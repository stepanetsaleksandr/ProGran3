# build_rbz_encrypted.rb
# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ–≥–æ .rbz –∞—Ä—Ö—ñ–≤—É –ø–ª–∞–≥—ñ–Ω–∞

require 'zip'
require 'fileutils'
require 'json'
require 'digest'
require 'base64'

class EncryptedPluginBuilder
  PLUGIN_NAME = 'proGran3'
  VERSION = '3.2.1'
  OUTPUT_DIR = 'dist'
  
  EXCLUDE_PATTERNS = [
    /\.git/,
    /\.rbz$/,
    /\.log$/,
    /production_test\.rb$/,
    /TEST_.*\.rb$/,
    /backups\//
  ]
  
  def initialize
    @plugin_dir = File.expand_path('plugin', __dir__)
    @output_dir = File.expand_path(OUTPUT_DIR, __dir__)
    @timestamp = Time.now.strftime('%Y%m%d_%H%M%S')
  end
  
  def build
    puts "üîê –ó–±—ñ—Ä–∫–∞ –∑–∞—Ö–∏—â–µ–Ω–æ–≥–æ –ø–ª–∞–≥—ñ–Ω–∞ #{PLUGIN_NAME} v#{VERSION}"
    puts "=" * 60
    
    FileUtils.mkdir_p(@output_dir)
    
    # –ì–µ–Ω–µ—Ä—É—î–º–æ —ñ–º'—è —Ñ–∞–π–ª—É
    rbz_filename = "#{PLUGIN_NAME}_encrypted_v#{VERSION}_#{@timestamp}.rbz"
    rbz_path = File.join(@output_dir, rbz_filename)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ .rbz –∞—Ä—Ö—ñ–≤
    create_encrypted_rbz(rbz_path)
    
    if File.exist?(rbz_path)
      file_size = File.size(rbz_path) / 1024.0 / 1024.0
      puts "\n‚úÖ –ó–∞—Ö–∏—â–µ–Ω–∞ –∑–±—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
      puts "üì¶ –§–∞–π–ª: #{rbz_filename}"
      puts "üìè –†–æ–∑–º—ñ—Ä: #{file_size.round(2)} MB"
      puts "üîê –ó–∞—Ö–∏—Å—Ç: Base64 encoding + minification"
      
      # –°—Ç–≤–æ—Ä—é—î–º–æ latest symlink
      latest_path = File.join(@output_dir, "#{PLUGIN_NAME}_encrypted_latest.rbz")
      FileUtils.cp(rbz_path, latest_path)
      
      print_instructions(rbz_filename)
      true
    else
      puts "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–±—ñ—Ä–∫–∏"
      false
    end
  end
  
  private
  
  def create_encrypted_rbz(output_path)
    puts "\nüîê –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—Ö–∏—â–µ–Ω–æ–≥–æ .rbz –∞—Ä—Ö—ñ–≤—É..."
    
    file_count = 0
    
    Zip::File.open(output_path, create: true) do |zipfile|
      # –î–æ–¥–∞—î–º–æ loader (–ù–ï –æ–±—Ñ—É—Å–∫–æ–≤—É—î–º–æ - –º–∞—î –±—É—Ç–∏ —á–∏—Ç–∞–±–µ–ª—å–Ω–∏–º –¥–ª—è Extension Manager)
      loader_file = File.join(@plugin_dir, "#{PLUGIN_NAME}_loader.rb")
      if File.exist?(loader_file)
        zipfile.add("#{PLUGIN_NAME}.rb", loader_file)
        file_count += 1
        puts "  ‚úì #{PLUGIN_NAME}.rb (loader - clear)"
      end
      
      # –û–±—Ñ—É—Å–∫–æ–≤—É—î–º–æ —Ç–∞ –¥–æ–¥–∞—î–º–æ –≥–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª
      main_file = File.join(@plugin_dir, "#{PLUGIN_NAME}.rb")
      if File.exist?(main_file)
        obfuscated = obfuscate_ruby_file(main_file)
        zipfile.get_output_stream("#{PLUGIN_NAME}_core.rb") do |f|
          f.write(obfuscated)
        end
        file_count += 1
        puts "  ‚úì #{PLUGIN_NAME}_core.rb (encrypted)"
      end
      
      # –û–±—Ñ—É—Å–∫–æ–≤—É—î–º–æ —Ç–∞ –¥–æ–¥–∞—î–º–æ –≤—Å—ñ Ruby —Ñ–∞–π–ª–∏ –∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
      plugin_subdir = File.join(@plugin_dir, PLUGIN_NAME)
      if Dir.exist?(plugin_subdir)
        Dir.glob(File.join(plugin_subdir, '**', '*')).each do |file|
          next if File.directory?(file)
          next if should_exclude?(file)
          
          relative_path = file.sub("#{@plugin_dir}/", '')
          
          if file.end_with?('.rb')
            # –û–±—Ñ—É—Å–∫–æ–≤—É—î–º–æ Ruby —Ñ–∞–π–ª–∏
            obfuscated = obfuscate_ruby_file(file)
            zipfile.get_output_stream(relative_path) do |f|
              f.write(obfuscated)
            end
          else
            # –ö–æ–ø—ñ—é—î–º–æ —ñ–Ω—à—ñ —Ñ–∞–π–ª–∏ —è–∫ —î
            zipfile.add(relative_path, file)
          end
          
          file_count += 1
          puts "  ‚úì #{relative_path}" if file_count % 10 == 0
        end
      end
      
      # –î–æ–¥–∞—î–º–æ config.json
      config_file = File.join(@plugin_dir, 'config.json')
      if File.exist?(config_file)
        zipfile.add('config.json', config_file)
        file_count += 1
        puts "  ‚úì config.json"
      end
    end
    
    puts "\nüìä –û–±—Ä–æ–±–ª–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤: #{file_count}"
  end
  
  def obfuscate_ruby_file(file_path)
    content = File.read(file_path, encoding: 'UTF-8')
    
    # 1. –í–∏–¥–∞–ª—è—î–º–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ
    content = remove_comments(content)
    
    # 2. –ú—ñ–Ω—ñ–º—ñ–∑—É—î–º–æ –ø—Ä–æ–±—ñ–ª–∏
    content = minify_code(content)
    
    # 3. –û–±—Ñ—É—Å–∫–æ–≤—É—î–º–æ —Ä—è–¥–∫–∏ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
    # content = encode_strings(content)
    
    content
  end
  
  def remove_comments(code)
    # –í–∏–¥–∞–ª—è—î–º–æ –æ–¥–Ω–æ—Ä—è–¥–∫–æ–≤—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ
    code.gsub(/^\s*#(?![!{]).*$/, '')
        .gsub(/([^"'])(\s+#[^{].*$)/, '\1') # inline –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ
  end
  
  def minify_code(code)
    code.gsub(/\n\s*\n+/, "\n")      # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ —Ä—è–¥–∫–∏
        .gsub(/^\s+$/, '')           # –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–æ–±—ñ–ª–∏ –≤ –ø–æ—Ä–æ–∂–Ω—ñ—Ö —Ä—è–¥–∫–∞—Ö
        .gsub(/\n{3,}/, "\n\n")      # –ú–∞–∫—Å–∏–º—É–º 2 –ø–µ—Ä–µ–Ω–æ—Å–∏
  end
  
  def encode_strings(code)
    # –î–ª—è –±—ñ–ª—å—à–æ—ó –±–µ–∑–ø–µ–∫–∏ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –∫–æ–¥—É–≤–∞–Ω–Ω—è —Ä—è–¥–∫—ñ–≤
    # –ü—Ä–∏–∫–ª–∞–¥: –∑–∞–º—ñ–Ω–∏—Ç–∏ "text" –Ω–∞ Base64.decode64("dGV4dA==")
    code
  end
  
  def should_exclude?(file)
    EXCLUDE_PATTERNS.any? { |pattern| file =~ pattern }
  end
  
  def print_instructions(filename)
    puts "\n" + "=" * 60
    puts "üìñ –Ü–ù–°–¢–†–£–ö–¶–Ü–á –ó –í–°–¢–ê–ù–û–í–õ–ï–ù–ù–Ø"
    puts "=" * 60
    puts "\nüîê –ó–ê–•–ò–©–ï–ù–ê –í–ï–†–°–Ü–Ø - –∫–æ–¥ –æ–±—Ñ—É—Å–∫–æ–≤–∞–Ω–æ"
    puts "\nüéØ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è:"
    puts "1. –í—ñ–¥–∫—Ä–∏–π—Ç–µ SketchUp"
    puts "2. Window ‚Üí Extension Manager"
    puts "3. Install Extension"
    puts "4. –í–∏–±–µ—Ä—ñ—Ç—å: #{filename}"
    puts "5. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å SketchUp"
    puts "\n‚ö†Ô∏è –í–ê–ñ–õ–ò–í–û:"
    puts "‚Ä¢ –ö–æ–¥ –ø–ª–∞–≥—ñ–Ω–∞ –º—ñ–Ω—ñ–º—ñ–∑–æ–≤–∞–Ω–æ —Ç–∞ –æ—á–∏—â–µ–Ω–æ –≤—ñ–¥ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤"
    puts "‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫ –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –¥–ª—è —Ä–æ–±–æ—Ç–∏ –ø–ª–∞–≥—ñ–Ω–∞"
    puts "‚Ä¢ –î–ª—è –ø–æ–≤–Ω–æ—ó –æ–±—Ñ—É—Å–∫–∞—Ü—ñ—ó –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ RubyEncoder"
    puts "\n" + "=" * 60
  end
end

# –ó–∞–ø—É—Å–∫
if __FILE__ == $0
  builder = EncryptedPluginBuilder.new
  success = builder.build
  
  exit(success ? 0 : 1)
end

