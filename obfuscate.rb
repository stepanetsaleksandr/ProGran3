# obfuscate.rb
# –û–±—Ñ—É—Å–∫–∞—Ü—ñ—è Ruby –∫–æ–¥—É –¥–ª—è SketchUp –ø–ª–∞–≥—ñ–Ω–∞

require 'fileutils'
require 'base64'

class RubyObfuscator
  
  def initialize(source_dir, output_dir)
    @source_dir = source_dir
    @output_dir = output_dir
    @exclude_patterns = [
      /\.git/,
      /\.rbz$/,
      /backups\//,
      /production_test\.rb$/,
      /TEST_.*\.rb$/
    ]
  end
  
  def obfuscate_all
    puts "üîê –ü–æ—á–∞—Ç–æ–∫ –æ–±—Ñ—É—Å–∫–∞—Ü—ñ—ó..."
    puts "=" * 60
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ output –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é
    FileUtils.mkdir_p(@output_dir)
    
    # –û–±—Ñ—É—Å–∫—É—î–º–æ Ruby —Ñ–∞–π–ª–∏
    obfuscated_count = 0
    Dir.glob(File.join(@source_dir, '**', '*.rb')).each do |file|
      next if should_exclude?(file)
      
      relative_path = file.sub("#{@source_dir}/", '')
      output_file = File.join(@output_dir, relative_path)
      
      # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫–∏
      FileUtils.mkdir_p(File.dirname(output_file))
      
      # –û–±—Ñ—É—Å–∫—É—î–º–æ —Ñ–∞–π–ª
      obfuscate_file(file, output_file)
      obfuscated_count += 1
      
      puts "  ‚úì #{relative_path}" if obfuscated_count % 5 == 0
    end
    
    # –ö–æ–ø—ñ—é—î–º–æ –Ω–µ-Ruby —Ñ–∞–π–ª–∏
    copy_non_ruby_files
    
    puts "\n‚úÖ –û–±—Ñ—É—Å–∫–æ–≤–∞–Ω–æ —Ñ–∞–π–ª—ñ–≤: #{obfuscated_count}"
  end
  
  private
  
  def obfuscate_file(input_file, output_file)
    content = File.read(input_file, encoding: 'UTF-8')
    
    # –ú–µ—Ç–æ–¥–∏ –æ–±—Ñ—É—Å–∫–∞—Ü—ñ—ó
    obfuscated = content
    obfuscated = remove_comments(obfuscated)
    obfuscated = minify_whitespace(obfuscated)
    obfuscated = encode_strings(obfuscated)
    
    File.write(output_file, obfuscated, encoding: 'UTF-8')
  end
  
  def remove_comments(code)
    # –í–∏–¥–∞–ª—è—î–º–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ (–ø—Ä–æ—Å—Ç—ñ –≤–∏–ø–∞–¥–∫–∏)
    code.gsub(/^\s*#[^!].*$/, '')
        .gsub(/\s+#[^{].*$/, '') # –í–∏–¥–∞–ª—è—î–º–æ inline –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ
  end
  
  def minify_whitespace(code)
    # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏ —Ç–∞ –ø–æ—Ä–æ–∂–Ω—ñ —Ä—è–¥–∫–∏
    code.gsub(/\n\s*\n+/, "\n")
        .gsub(/^\s+$/, '')
  end
  
  def encode_strings(code)
    # –ö–æ–¥—É—î–º–æ –≤–∞–∂–ª–∏–≤—ñ —Ä—è–¥–∫–∏ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
    # –î–ª—è production –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Å–∫–ª–∞–¥–Ω—ñ—à—É –ª–æ–≥—ñ–∫—É
    code
  end
  
  def copy_non_ruby_files
    # –ö–æ–ø—ñ—é—î–º–æ assets, HTML, CSS, JS, JSON
    patterns = ['**/*.{html,css,js,json,png,jpg,skp,skb}']
    
    patterns.each do |pattern|
      Dir.glob(File.join(@source_dir, pattern)).each do |file|
        next if should_exclude?(file)
        
        relative_path = file.sub("#{@source_dir}/", '')
        output_file = File.join(@output_dir, relative_path)
        
        FileUtils.mkdir_p(File.dirname(output_file))
        FileUtils.cp(file, output_file)
      end
    end
  end
  
  def should_exclude?(file)
    @exclude_patterns.any? { |pattern| file =~ pattern }
  end
  
end

# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
if __FILE__ == $0
  source = File.expand_path('plugin', __dir__)
  output = File.expand_path('plugin_obfuscated', __dir__)
  
  obfuscator = RubyObfuscator.new(source, output)
  obfuscator.obfuscate_all
  
  puts "\nüì¶ –û–±—Ñ—É—Å–∫–æ–≤–∞–Ω—ñ —Ñ–∞–π–ª–∏ –≤: #{output}"
end

