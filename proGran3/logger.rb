# progran3/logger.rb
require_relative 'constants'

module ProGran3
  module Logger
    extend self
    
    # –†—ñ–≤–Ω—ñ –ª–æ–≥—É–≤–∞–Ω–Ω—è
    LEVELS = {
      debug: 0,
      info: 1, 
      warn: 2,
      error: 3,
      fatal: 4
    }
    
    # –ü–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –ª–æ–≥—É–≤–∞–Ω–Ω—è
    @current_level = LEVELS[Constants::DEFAULT_LOG_LEVEL]
    
    # –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ä—ñ–≤–Ω—ñ–≤
    COLORS = {
      debug: "\033[36m", # Cyan
      info: "\033[32m",  # Green
      warn: "\033[33m",  # Yellow
      error: "\033[31m", # Red
      fatal: "\033[35m"  # Magenta
    }
    
    # –Ü–∫–æ–Ω–∫–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ä—ñ–≤–Ω—ñ–≤
    ICONS = {
      debug: "üîç",
      info: "‚ÑπÔ∏è",
      warn: "‚ö†Ô∏è",
      error: "‚ùå",
      fatal: "üí•"
    }
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
    def level=(new_level)
      @current_level = LEVELS[new_level.to_sym] || LEVELS[:info]
    end
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è
    def level
      LEVELS.key(@current_level) || :info
    end
    
    # –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
    def log(level, message, context = nil)
      return unless should_log?(level)
      
      timestamp = Time.now.strftime("%H:%M:%S")
      level_sym = level.to_sym
      icon = ICONS[level_sym] || "üìù"
      color = COLORS[level_sym] || "\033[0m"
      
      formatted_message = format_message(timestamp, icon, message, context)
      
      # –í–∏–≤–æ–¥–∏–º–æ –≤ –∫–æ–Ω—Å–æ–ª—å SketchUp
      puts "#{color}#{formatted_message}\033[0m"
      
      # –î–æ–¥–∞—Ç–∫–æ–≤–æ –¥–ª—è –ø–æ–º–∏–ª–æ–∫ –ø–æ–∫–∞–∑—É—î–º–æ –≤ UI
      if [:error, :fatal].include?(level_sym)
        show_error_dialog(message, context)
      end
    end
    
    # –ú–µ—Ç–æ–¥–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ä—ñ–≤–Ω—ñ–≤ –ª–æ–≥—É–≤–∞–Ω–Ω—è
    def debug(message, context = nil)
      log(:debug, message, context)
    end
    
    def info(message, context = nil)
      log(:info, message, context)
    end
    
    def warn(message, context = nil)
      log(:warn, message, context)
    end
    
    def error(message, context = nil)
      log(:error, message, context)
    end
    
    def fatal(message, context = nil)
      log(:fatal, message, context)
    end
    
    # –£—Å–ø—ñ—à–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó
    def success(message, context = nil)
      log(:info, "‚úÖ #{message}", context)
    end
    
    # –ü–æ—á–∞—Ç–æ–∫ –æ–ø–µ—Ä–∞—Ü—ñ—ó
    def start(operation, context = nil)
      log(:info, "üöÄ –ü–æ—á–∞—Ç–æ–∫: #{operation}", context)
    end
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó
    def finish(operation, context = nil)
      log(:info, "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: #{operation}", context)
    end
    
    private
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ª–æ–≥—É–≤–∞—Ç–∏
    def should_log?(level)
      LEVELS[level.to_sym] >= @current_level
    end
    
    # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    def format_message(timestamp, icon, message, context)
      if context
        "[#{timestamp}] #{icon} [#{context}] #{message}"
      else
        "[#{timestamp}] #{icon} #{message}"
      end
    end
    
    # –ü–æ–∫–∞–∑ –¥—ñ–∞–ª–æ–≥—É –ø–æ–º–∏–ª–∫–∏
    def show_error_dialog(message, context)
      full_message = context ? "#{context}: #{message}" : message
      begin
        ::UI.messagebox("–ü–æ–º–∏–ª–∫–∞ ProGran3:\n#{full_message}")
      rescue => e
        puts "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–∫–∞–∑–∞—Ç–∏ –¥—ñ–∞–ª–æ–≥ –ø–æ–º–∏–ª–∫–∏: #{e.message}"
      end
    end
  end
end

