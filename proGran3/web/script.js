// progran3/web/script.js

// --- –ì–õ–û–ë–ê–õ–¨–ù–Ü –ó–ú–Ü–ù–ù–Ü ---
let modelLists = {};
let carouselState = {
  stands: { index: 0 },
  steles: { index: 0 },
  flowerbeds: { index: 0 }
};
let testCarouselState = {
  steles: { index: 0 }
};



// –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∫–∞—Ä—É—Å–µ–ª–µ–π
const CarouselManager = {
  // –†–æ–∑—à–∏—Ä–µ–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∫–∞—Ä—É—Å–µ–ª–µ–π
  carousels: {
    'stands': { 
      hasPreview: true, 
      previewMode: 'dynamic',
      autoLoad: true,
      design: 'default',
      maxItems: 10
    },
    'flowerbeds': { 
      hasPreview: true, 
      previewMode: 'dynamic',
      autoLoad: true,
      design: 'default',
      maxItems: 10
    },
    'steles': { 
      hasPreview: true, 
      previewMode: 'dynamic',
      autoLoad: true,
      design: 'default',
      maxItems: 10
    }
  },

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–∏—Ö –∫–∞—Ä—É—Å–µ–ª–µ–π
  registerCarousel(category, config = {}) {
    const defaultConfig = {
      hasPreview: true,
      previewMode: 'dynamic',
      autoLoad: true,
      design: 'default',
      maxItems: 10
    };
    
    this.carousels[category] = { ...defaultConfig, ...config };
    console.log(`üé® –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –Ω–æ–≤—É –∫–∞—Ä—É—Å–µ–ª—å: ${category}`);
  },

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∫–∞—Ä—É—Å–µ–ª—ñ
  getCarouselConfig(category) {
    return this.carousels[category] || null;
  },

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —ñ—Å–Ω—É—î –∫–∞—Ä—É—Å–µ–ª—å
  hasCarousel(category) {
    return category in this.carousels;
  },

  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–∞—Ä—É—Å–µ–ª—ñ
  initialize(category, options = {}) {
    const config = { ...this.carousels[category], ...options };
    const track = document.getElementById(`${category}-carousel-track`);
    const viewport = document.getElementById(`${category}-carousel-viewport`);
    
    if (!track || !viewport || !modelLists[category] || modelLists[category].length === 0) return;
    
    track.innerHTML = '';
    
    modelLists[category].forEach(filename => {
      const item = this.createCarouselItem(category, filename, config);
      track.appendChild(item);
    });
    
    this.setupCarouselEvents(category, viewport);
    
    setTimeout(() => {
      this.showCarouselItem(category, 0);
      // –õ–µ–¥–∞—á–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä—à–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ (—è–∫ —É —Ç–µ—Å—Ç–æ–≤—ñ–π –ª–æ–≥—ñ—Ü—ñ)
      this.loadOrGeneratePreview(category, 0);
    }, 100);
  },

  // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ –∫–∞—Ä—É—Å–µ–ª—ñ - –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –¥–∏–∑–∞–π–Ω—ñ–≤
  createCarouselItem(category, filename, config) {
    const item = document.createElement('div');
    item.className = 'carousel-item';
    
    // –î–æ–¥–∞—î–º–æ CSS –∫–ª–∞—Å –¥–ª—è –¥–∏–∑–∞–π–Ω—É
    const design = config.design || 'default';
    item.classList.add(`design-${design}`);
    
    // –í—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å –¥–∏–Ω–∞–º—ñ—á–Ω–µ –ø—Ä–µ–≤—å—é –∑ –ª–µ–¥–∞—á–∏–º –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º
    item.dataset.status = 'idle';
    item.dataset.filename = filename;
    item.dataset.category = category;
    item.dataset.design = design;
    
    const loadingDiv = document.createElement('div');
    loadingDiv.className = 'loading-indicator';
    loadingDiv.textContent = '–ì–æ—Ç–æ–≤–æ –¥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è';
    item.appendChild(loadingDiv);
    
    return item;
  },

  // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π –∫–∞—Ä—É—Å–µ–ª—ñ
  setupCarouselEvents(category, viewport) {
    viewport.addEventListener('wheel', (event) => {
      event.preventDefault();
      this.moveCarousel(category, event.deltaY > 0 ? 1 : -1);
    });
  },

  // –ü–æ–∫–∞–∑ –µ–ª–µ–º–µ–Ω—Ç–∞ –∫–∞—Ä—É—Å–µ–ª—ñ
  showCarouselItem(category, index) {
    const track = document.getElementById(`${category}-carousel-track`);
    const viewport = document.getElementById(`${category}-carousel-viewport`);
    const items = track.querySelectorAll('.carousel-item');
    
    if (!track || items.length === 0 || !items[index]) return;

    items.forEach((item, i) => {
      item.classList.toggle('active', i === index);
    });
    
    const viewportCenter = viewport.offsetWidth / 2;
    const targetItem = items[index];
    const itemCenter = targetItem.offsetLeft + targetItem.offsetWidth / 2;
    const newTransform = viewportCenter - itemCenter;

    carouselState[category].index = index;
    track.style.transform = `translateX(${newTransform}px)`;
    
    // –õ–µ–¥–∞—á–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ —Ç–∞ —Å—É—Å—ñ–¥—ñ–≤ (—è–∫ —É —Ç–µ—Å—Ç–æ–≤—ñ–π –ª–æ–≥—ñ—Ü—ñ)
    this.loadOrGeneratePreview(category, index);
    if (index + 1 < items.length) this.loadOrGeneratePreview(category, index + 1);
    if (index - 1 >= 0) this.loadOrGeneratePreview(category, index - 1);
    
    updateAllDisplays();
  },

  // –õ–µ–¥–∞—á–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–µ–≤—å—é - —Ç–µ–ø–µ—Ä —Ç—ñ–ª—å–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è
  loadOrGeneratePreview(category, index) {
    const track = document.getElementById(`${category}-carousel-track`);
    if (!track) return;
    
    const items = track.querySelectorAll('.carousel-item');
    const item = items[index];
    if (!item) return;

    const currentStatus = item.dataset.status;
    if (currentStatus === 'loaded' || currentStatus === 'pending') return;

    const filename = item.dataset.filename || (modelLists[category] && modelLists[category][index]);
    if (!filename) return;

    let loadingDiv = item.querySelector('.loading-indicator');
    if (!loadingDiv) {
      loadingDiv = document.createElement('div');
      loadingDiv.className = 'loading-indicator';
      item.appendChild(loadingDiv);
    }
    loadingDiv.textContent = '–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–µ–≤—å—é...';

    item.dataset.status = 'pending';

    // –í—ñ–¥—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞—î–º–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –ø—Ä–µ–≤—å—é
    this.autoGeneratePreview(category, filename, item, loadingDiv);
  },

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–µ–≤—å—é
  autoGeneratePreview(category, filename, item, loadingDiv) {
    if (!window.sketchup) {
      createPlaceholder(item, loadingDiv, `–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó\n${filename}`);
      return;
    }
    
    window.sketchup.generate_web_preview(`${category}/${filename}`);
    
    window.pendingPreviews = window.pendingPreviews || {};
    window.pendingPreviews[`${category}/${filename}`] = { item, loadingDiv, filename };
  },



  // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≥–ª—É—à–∫–∏
  createPlaceholder(item, loadingDiv, text) {
    createPlaceholder(item, loadingDiv, text);
  },

  // –†—É—Ö –∫–∞—Ä—É—Å–µ–ª—ñ
  moveCarousel(category, direction) {
    const state = carouselState[category];
    const newIndex = state.index + direction;
    const track = document.getElementById(`${category}-carousel-track`);
    const items = track.querySelectorAll('.carousel-item');
    
    if (newIndex >= 0 && newIndex < items.length) {
      this.showCarouselItem(category, newIndex);
    }
  },

  // –î–æ–¥–∞–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ
  addModel(category) {
    const state = carouselState[category];
    const filename = modelLists[category][state.index];
    
    if (window.sketchup && window.sketchup.add_model) {
      window.sketchup.add_model(category, filename);
    }
  },

  // –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ—ó –∫–∞—Ä—É—Å–µ–ª—ñ (–æ–Ω–æ–≤–ª–µ–Ω–∞)
  registerCarousel(category, config = {}) {
    const defaultConfig = {
      hasPreview: true,
      previewMode: 'dynamic',
      autoLoad: true,
      design: 'default',
      maxItems: 10
    };
    
    this.carousels[category] = { ...defaultConfig, ...config };
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–∞–Ω –∫–∞—Ä—É—Å–µ–ª—ñ
    if (!carouselState[category]) {
      carouselState[category] = { index: 0 };
    }
    
    console.log(`üé® –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –Ω–æ–≤—É –∫–∞—Ä—É—Å–µ–ª—å: ${category}`);
  },

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—Å—ñ—Ö –∫–∞—Ä—É—Å–µ–ª–µ–π
  initializeAllCarousels() {
    Object.keys(this.carousels).forEach(category => {
      if (modelLists[category] && document.getElementById(`${category}-carousel-track`)) {
        this.initialize(category);
        console.log(`‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –∫–∞—Ä—É—Å–µ–ª—å: ${category}`);
      }
    });
  },

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞—Ä—É—Å–µ–ª–µ–π
  getCarouselStats() {
    return {
      total: Object.keys(this.carousels).length,
      active: Object.keys(this.carousels).filter(cat => 
        modelLists[cat] && document.getElementById(`${cat}-carousel-track`)
      ).length,
      categories: Object.keys(this.carousels)
    };
  },

  // –ü—Ä–∏–∫–ª–∞–¥ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –∫–∞—Ä—É—Å–µ–ª—ñ
  addExampleCarousel() {
    // –î–æ–¥–∞—î–º–æ –Ω–æ–≤—É –∫–∞—Ä—É—Å–µ–ª—å –∑ –∫–∞—Å—Ç–æ–º–Ω–∏–º –¥–∏–∑–∞–π–Ω–æ–º
    this.registerCarousel('example', {
      hasPreview: true,
      previewMode: 'dynamic',
      autoLoad: true,
      design: 'gradient',
      maxItems: 15
    });
    
    console.log('üìù –ü—Ä–∏–∫–ª–∞–¥: –î–æ–¥–∞–Ω–æ –Ω–æ–≤—É –∫–∞—Ä—É—Å–µ–ª—å "example" –∑ –¥–∏–∑–∞–π–Ω–æ–º gradient');
  }
};

// --- –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø ---
window.onload = function () {
  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –¥–æ–¥–∞—Ç–æ–∫ –æ–¥—Ä–∞–∑—É
  initializeApp();
  
  // –ó–∞–ø—É—Å–∫–∞—î–º–æ –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å
  if (window.sketchup && window.sketchup.ready) {
    window.sketchup.ready();
  }
};

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–æ–¥–∞—Ç–∫—É
function initializeApp() {
  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è UI (–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É ready)
  if(document.getElementById('tiling-mode')) {
    updateTilingControls();
  }
  // –ó–≥–æ—Ä—Ç–∞—î–º–æ –≤—Å—ñ –ø–∞–Ω–µ–ª—ñ, –∫—Ä—ñ–º –ø–µ—Ä—à–æ—ó
  document.querySelectorAll('.panel').forEach((panel, index) => {
    if (index > 0) {
      panel.classList.add('collapsed');
    }
  });
  updateAllDisplays();
}

function loadModelLists(data) {
  modelLists = data;
  
  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –≤—Å—ñ—Ö –∫–∞—Ä—É—Å–µ–ª–µ–π
  CarouselManager.initializeAllCarousels();
  
  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ç–µ—Å—Ç–æ–≤—É –∫–∞—Ä—É—Å–µ–ª—å —Å—Ç–µ–ª
  if (modelLists['steles'] && document.getElementById('test-steles-carousel-track')) {
    initializeTestCarousel('steles');
  }
  
  // –í–∏–≤–æ–¥–∏–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞—Ä—É—Å–µ–ª–µ–π
  const stats = CarouselManager.getCarouselStats();
  console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ä—É—Å–µ–ª–µ–π: ${stats.active}/${stats.total} –∞–∫—Ç–∏–≤–Ω–∏—Ö`);
  
  updateAllDisplays();
}

// --- –õ–û–ì–Ü–ö–ê –î–õ–Ø –ó–ì–û–†–¢–ê–ù–ù–Ø –ü–ê–ù–ï–õ–ï–ô ---

function togglePanel(headerElement) {
  const panel = headerElement.closest('.panel');
  panel.classList.toggle('collapsed');
}

function advanceToNextPanel(buttonElement) {
  // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫—É –ø–∞–Ω–µ–ª—å –∫–Ω–æ–ø–∫–∏
  const currentPanel = buttonElement.closest('.panel');
  // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –ø–∞–Ω–µ–ª—ñ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
  const allPanels = Array.from(document.querySelectorAll('.panel'));
  const currentIndex = allPanels.indexOf(currentPanel);
  const nextPanel = allPanels[currentIndex + 1];

  // –ó–≥–æ—Ä—Ç–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –ø–∞–Ω–µ–ª—å
  if (currentPanel && !currentPanel.classList.contains('collapsed')) {
    currentPanel.classList.add('collapsed');
  }

  // –†–æ–∑–≥–æ—Ä—Ç–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω—É, —è–∫—â–æ –≤–æ–Ω–∞ —ñ—Å–Ω—É—î —ñ —î –∑–≥–æ—Ä–Ω—É—Ç–æ—é
  if (nextPanel && nextPanel.classList.contains('collapsed')) {
    nextPanel.classList.remove('collapsed');
  }
}



// --- –¢–ï–°–¢–û–í–ê –ö–ê–†–£–°–ï–õ–¨ (–∑–∞–ª–∏—à–∞—î–º–æ –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ) ---

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–µ—Å—Ç–æ–≤–æ—ó –∫–∞—Ä—É—Å–µ–ª—ñ
function initializeTestCarousel(category) {
  const track = document.getElementById(`test-${category}-carousel-track`);
  const viewport = document.getElementById(`test-${category}-carousel-viewport`);
  if (!track || !viewport || !modelLists[category] || modelLists[category].length === 0) return;
  
  track.innerHTML = '';

  modelLists[category].forEach(filename => {
    const item = document.createElement('div');
    item.className = 'carousel-item';
    // –°—Ç–∞–Ω –ª–µ–¥–∞—á–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    item.dataset.status = 'idle';
    item.dataset.filename = filename;
    // –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä
    const loadingDiv = document.createElement('div');
    loadingDiv.className = 'loading-indicator';
    loadingDiv.textContent = '–ì–æ—Ç–æ–≤–æ –¥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è';
    item.appendChild(loadingDiv);
    track.appendChild(item);
  });
  
  viewport.addEventListener('wheel', (event) => {
    event.preventDefault();
    moveTestCarousel(category, event.deltaY > 0 ? 1 : -1);
  });

  setTimeout(() => {
    showTestCarouselItem(category, 0);
    // –õ–µ–¥–∞—á–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä—à–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
    loadOrGenerateTestPreview(category, 0);
  }, 100); 
}

// –õ–µ–¥–∞—á–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–µ–≤—å—é –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ —Ç–µ—Å—Ç–æ–≤–æ—ó –∫–∞—Ä—É—Å–µ–ª—ñ
function loadOrGenerateTestPreview(category, index) {
  const track = document.getElementById(`test-${category}-carousel-track`);
  if (!track) return;
  const items = track.querySelectorAll('.carousel-item');
  const item = items[index];
  if (!item) return;

  const currentStatus = item.dataset.status;
  if (currentStatus === 'loaded' || currentStatus === 'pending') return;

  const filename = item.dataset.filename || (modelLists[category] && modelLists[category][index]);
  if (!filename) return;

  let loadingDiv = item.querySelector('.loading-indicator');
  if (!loadingDiv) {
    loadingDiv = document.createElement('div');
    loadingDiv.className = 'loading-indicator';
    item.appendChild(loadingDiv);
  }
  loadingDiv.textContent = '–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–µ–≤—å—é...';

  item.dataset.status = 'pending';

  // –í—ñ–¥—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞—î–º–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –ø—Ä–µ–≤—å—é
  autoGenerateTestPreview(category, filename, item, loadingDiv);
}



// –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–µ–≤—å—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ—ó –∫–∞—Ä—É—Å–µ–ª—ñ
function autoGenerateTestPreview(category, filename, item, loadingDiv) {
  if (!window.sketchup) {
    createPlaceholder(item, loadingDiv, `–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó\n${filename}`);
    return;
  }
  
  // –ì–µ–Ω–µ—Ä—É—î–º–æ –≤–µ–±-–ø—Ä–µ–≤—å—é —á–µ—Ä–µ–∑ SketchUp
  window.sketchup.generate_web_preview(`${category}/${filename}`);
  
  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –µ–ª–µ–º–µ–Ω—Ç–∏ –¥–ª—è callback
  window.pendingPreviews = window.pendingPreviews || {};
  window.pendingPreviews[`${category}/${filename}`] = { item, loadingDiv, filename };
}

// –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≥–ª—É—à–∫–∏
function createPlaceholder(item, loadingDiv, text) {
  loadingDiv.remove();
  const placeholder = document.createElement('div');
  placeholder.style.cssText = `
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background: rgba(255, 255, 255, 0.1);
    color: #666;
    font-size: 12px;
    text-align: center;
    padding: 10px;
    box-sizing: border-box;
  `;
  placeholder.textContent = text;
  item.appendChild(placeholder);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≥–ª—É—à–∫–∏ –≤ —Ç–µ—Å—Ç–æ–≤—ñ–π –∫–∞—Ä—É—Å–µ–ª—ñ (–¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)
function createTestPlaceholder(item, loadingDiv, text) {
  createPlaceholder(item, loadingDiv, text);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ–≥–æ –ø—Ä–µ–≤—å—é –∑ Ruby
function receiveWebPreview(componentPath, base64Data) {
  const pendingData = window.pendingPreviews && window.pendingPreviews[componentPath];
  if (!pendingData) {
    return;
  }
  
  const { item, loadingDiv, filename } = pendingData;
  
  if (base64Data && base64Data.startsWith('data:image/')) {
    // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ base64 –¥–∞–Ω–∏—Ö
    const img = document.createElement('img');
    img.src = base64Data;
    img.alt = filename;
    
    // –í–∏–¥–∞–ª—è—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –¥–æ–¥–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    if (loadingDiv && loadingDiv.parentNode) loadingDiv.parentNode.removeChild(loadingDiv);
    if (item) item.appendChild(img);
    
  } else {
    // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏, –ø–æ–∫–∞–∑—É—î–º–æ –∑–∞–≥–ª—É—à–∫—É
    if (item && loadingDiv) createPlaceholder(item, loadingDiv, `–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó\n${filename}`);
  }
  
  // –û—á–∏—â–∞—î–º–æ pending
  delete window.pendingPreviews[componentPath];
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–µ–≤—å—é
function handlePreviewError(componentPath, errorMessage) {
  const pendingData = window.pendingPreviews && window.pendingPreviews[componentPath];
  if (!pendingData) return;
  
  const { item, loadingDiv, filename } = pendingData;
  createPlaceholder(item, loadingDiv, `–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó\n${filename}`);
  
  // –û—á–∏—â–∞—î–º–æ pending
  delete window.pendingPreviews[componentPath];
}

function moveTestCarousel(category, direction) {
  const state = testCarouselState[category];
  const newIndex = state.index + direction;
  const track = document.getElementById(`test-${category}-carousel-track`);
  const items = track.querySelectorAll('.carousel-item');
  
  if (newIndex >= 0 && newIndex < items.length) {
    showTestCarouselItem(category, newIndex);
  }
}

function showTestCarouselItem(category, index) {
  const track = document.getElementById(`test-${category}-carousel-track`);
  const viewport = document.getElementById(`test-${category}-carousel-viewport`);
  const items = track.querySelectorAll('.carousel-item');
  
  if (!track || items.length === 0 || !items[index]) return;

  items.forEach((item, i) => {
    item.classList.toggle('active', i === index);
  });
  
  const viewportCenter = viewport.offsetWidth / 2;
  const targetItem = items[index];
  const itemCenter = targetItem.offsetLeft + targetItem.offsetWidth / 2;
  const newTransform = viewportCenter - itemCenter;

  testCarouselState[category].index = index;
  track.style.transform = `translateX(${newTransform}px)`;
  
  // –õ–µ–¥–∞—á–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ —Ç–∞ —Å—É—Å—ñ–¥—ñ–≤
  loadOrGenerateTestPreview(category, index);
  if (index + 1 < items.length) loadOrGenerateTestPreview(category, index + 1);
  if (index - 1 >= 0) loadOrGenerateTestPreview(category, index - 1);
}



function addTestModel(category) {
  const state = testCarouselState[category];
  const filename = modelLists[category][state.index];
  
  if (window.sketchup && window.sketchup.add_model) {
    window.sketchup.add_model(category, filename);
  }
}

// --- –£–ù–Ü–í–ï–†–°–ê–õ–¨–ù–Ü –§–£–ù–ö–¶–Ü–á –î–õ–Ø –ö–ê–†–£–°–ï–õ–ï–ô ---

// –ó–∞–º—ñ–Ω—é—î–º–æ —Å—Ç–∞—Ä—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –Ω–∞ —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω—ñ
function initializeCarousel(category) {
  CarouselManager.initialize(category);
}

function showCarouselItem(category, index) {
  CarouselManager.showCarouselItem(category, index);
}

function moveCarousel(category, direction) {
  CarouselManager.moveCarousel(category, direction);
}

function addModel(category) {
  CarouselManager.addModel(category);
}

// --- –Ü–ù–®–Ü –§–£–ù–ö–¶–Ü–á ---

function updateTilingControls() {
  const tilingMode = document.getElementById('tiling-mode');
  const frameControls = document.getElementById('frame-controls');
  const modularControls = document.getElementById('modular-controls');
  
  if (tilingMode.value === 'frame') {
    frameControls.classList.remove('hidden');
    modularControls.classList.add('hidden');
  } else {
    frameControls.classList.add('hidden');
    modularControls.classList.remove('hidden');
  }
}

function updateAllDisplays() {
  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—ñ–≤ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç—É
  const foundationDepth = document.getElementById('foundation-depth').value;
  const foundationWidth = document.getElementById('foundation-width').value;
  const foundationHeight = document.getElementById('foundation-height').value;
  document.getElementById('foundation-dimensions-display').textContent = 
    `${foundationDepth}√ó${foundationWidth}√ó${foundationHeight} –º–º`;
  
  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∏–ø—É –ø–ª–∏—Ç–∫–∏
  const tilingMode = document.getElementById('tiling-mode');
  if (tilingMode) {
    const modeText = tilingMode.options[tilingMode.selectedIndex].text;
    document.getElementById('tiling-type-display').textContent = modeText;
  }
  
  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ–≤—â–∏–Ω–∏ –æ–±–ª–∏—Ü—é–≤–∞–Ω–Ω—è
  const claddingThickness = document.getElementById('cladding-thickness').value;
  document.getElementById('cladding-dimensions-display').textContent = 
    `–¢–æ–≤—â–∏–Ω–∞: ${claddingThickness} –º–º`;
  
  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π
  updateModelDisplays();
  
  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Å—É–º–∫–æ–≤–æ—ó —Ç–∞–±–ª–∏—Ü—ñ
  updateSummaryTable();
}

function updateModelDisplays() {
  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—ñ–¥—Å—Ç–∞–≤–∫–∏
  if (carouselState.stands && modelLists.stands) {
    const standIndex = carouselState.stands.index;
    const standFilename = modelLists.stands[standIndex];
    if (standFilename) {
      document.getElementById('stands-dimensions-display').textContent = 
        standFilename.replace('.skp', '');
    }
  }
  
  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–≤—ñ—Ç–Ω–∏–∫–∞
  if (carouselState.flowerbeds && modelLists.flowerbeds) {
    const flowerbedIndex = carouselState.flowerbeds.index;
    const flowerbedFilename = modelLists.flowerbeds[flowerbedIndex];
    if (flowerbedFilename) {
      document.getElementById('flowerbeds-dimensions-display').textContent = 
        flowerbedFilename.replace('.skp', '');
    }
  }
  
  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–µ–ª–∏
  if (carouselState.steles && modelLists.steles) {
    const steleIndex = carouselState.steles.index;
    const steleFilename = modelLists.steles[steleIndex];
    if (steleFilename) {
      document.getElementById('steles-dimensions-display').textContent = 
        steleFilename.replace('.skp', '');
    }
  }
}

function updateSummaryTable() {
  // –§—É–Ω–¥–∞–º–µ–Ω—Ç
  const foundationDepth = document.getElementById('foundation-depth').value;
  const foundationWidth = document.getElementById('foundation-width').value;
  const foundationHeight = document.getElementById('foundation-height').value;
  document.getElementById('summary-foundation').textContent = 
    `${foundationDepth}√ó${foundationWidth}√ó${foundationHeight} –º–º`;
  
  // –ü–ª–∏—Ç–∫–∞
  const tilingMode = document.getElementById('tiling-mode');
  if (tilingMode) {
    const modeText = tilingMode.options[tilingMode.selectedIndex].text;
    document.getElementById('summary-tiling').textContent = modeText;
  }
  
  // –û–±–ª–∏—Ü—é–≤–∞–Ω–Ω—è
  const claddingThickness = document.getElementById('cladding-thickness').value;
  document.getElementById('summary-cladding').textContent = 
    `–¢–æ–≤—â–∏–Ω–∞: ${claddingThickness} –º–º`;
  
  // –ü—ñ–¥—Å—Ç–∞–≤–∫–∞
  if (carouselState.stands && modelLists.stands) {
    const standFilename = modelLists.stands[carouselState.stands.index];
    document.getElementById('summary-stand').textContent = 
      standFilename ? standFilename.replace('.skp', '') : '--';
  }
  
  // –ö–≤—ñ—Ç–Ω–∏–∫
  if (carouselState.flowerbeds && modelLists.flowerbeds) {
    const flowerbedFilename = modelLists.flowerbeds[carouselState.flowerbeds.index];
    document.getElementById('summary-flowerbed').textContent = 
      flowerbedFilename ? flowerbedFilename.replace('.skp', '') : '--';
  }
  
  // –°—Ç–µ–ª–∞
  if (carouselState.steles && modelLists.steles) {
    const steleFilename = modelLists.steles[carouselState.steles.index];
    document.getElementById('summary-stele').textContent = 
      steleFilename ? steleFilename.replace('.skp', '') : '--';
  }
}

// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
function addFoundation() {
  const depth = document.getElementById('foundation-depth').value;
  const width = document.getElementById('foundation-width').value;
  const height = document.getElementById('foundation-height').value;
  
  if (window.sketchup && window.sketchup.add_foundation) {
    window.sketchup.add_foundation(depth, width, height);
  }
}

function addTiles() {
  const mode = document.getElementById('tiling-mode').value;
  
  if (window.sketchup && window.sketchup.add_tiles) {
    if (mode === 'frame') {
      const thickness = document.getElementById('tile-thickness-frame').value;
      const borderWidth = document.getElementById('tile-border-width').value;
      const overhang = document.getElementById('tile-overhang').value;
      window.sketchup.add_tiles('frame', thickness, borderWidth, overhang);
    } else {
      const size = document.getElementById('modular-tile-size').value;
      const thickness = document.getElementById('modular-thickness').value;
      const seam = document.getElementById('modular-seam').value;
      const overhang = document.getElementById('modular-overhang').value;
      window.sketchup.add_tiles('modular', size, thickness, seam, overhang);
    }
  }
}

function addSideCladding() {
  const thickness = document.getElementById('cladding-thickness').value;
  
  if (window.sketchup && window.sketchup.add_side_cladding) {
    window.sketchup.add_side_cladding(thickness);
  }
}





