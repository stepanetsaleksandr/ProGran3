// progran3/web/script.js

// --- –ì–õ–û–ë–ê–õ–¨–ù–Ü –ó–ú–Ü–ù–ù–Ü ---
let modelLists = {};
let carouselState = {
  stands: { index: 0 },
  steles: { index: 0 },
  flowerbeds: { index: 0 }
};
let testCarouselState = {
  steles: { index: 0 }
};

// --- –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø ---
window.onload = function () {
  if (window.sketchup && window.sketchup.ready) {
    window.sketchup.ready();
  }
  if(document.getElementById('tiling-mode')) {
    updateTilingControls();
  }
  // –ó–≥–æ—Ä—Ç–∞—î–º–æ –≤—Å—ñ –ø–∞–Ω–µ–ª—ñ, –∫—Ä—ñ–º –ø–µ—Ä—à–æ—ó
  document.querySelectorAll('.panel').forEach((panel, index) => {
    if (index > 0) {
      panel.classList.add('collapsed');
    }
  });
  updateAllDisplays();
};

function loadModelLists(data) {
  modelLists = data;
  ['stands', 'steles', 'flowerbeds'].forEach(category => {
    if (modelLists[category] && document.getElementById(`${category}-carousel-track`)) {
      initializeCarousel(category);
    }
  });
  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ç–µ—Å—Ç–æ–≤—É –∫–∞—Ä—É—Å–µ–ª—å —Å—Ç–µ–ª
  if (modelLists['steles'] && document.getElementById('test-steles-carousel-track')) {
    initializeTestCarousel('steles');
  }
  updateAllDisplays();
}

// --- –õ–û–ì–Ü–ö–ê –î–õ–Ø –ó–ì–û–†–¢–ê–ù–ù–Ø –ü–ê–ù–ï–õ–ï–ô ---

function togglePanel(headerElement) {
  const panel = headerElement.closest('.panel');
  panel.classList.toggle('collapsed');
}

function advanceToNextPanel(buttonElement) {
  // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫—É –ø–∞–Ω–µ–ª—å –∫–Ω–æ–ø–∫–∏
  const currentPanel = buttonElement.closest('.panel');
  // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –ø–∞–Ω–µ–ª—ñ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
  const allPanels = Array.from(document.querySelectorAll('.panel'));
  const currentIndex = allPanels.indexOf(currentPanel);
  const nextPanel = allPanels[currentIndex + 1];

  // –ó–≥–æ—Ä—Ç–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –ø–∞–Ω–µ–ª—å
  if (currentPanel && !currentPanel.classList.contains('collapsed')) {
    currentPanel.classList.add('collapsed');
  }

  // –†–æ–∑–≥–æ—Ä—Ç–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω—É, —è–∫—â–æ –≤–æ–Ω–∞ —ñ—Å–Ω—É—î —ñ —î –∑–≥–æ—Ä–Ω—É—Ç–æ—é
  if (nextPanel && nextPanel.classList.contains('collapsed')) {
    nextPanel.classList.remove('collapsed');
  }
}

// --- –£–ù–Ü–í–ï–†–°–ê–õ–¨–ù–ê –õ–û–ì–Ü–ö–ê –î–õ–Ø –ö–ê–†–£–°–ï–õ–ï–ô ---

function initializeCarousel(category) {
  const track = document.getElementById(`${category}-carousel-track`);
  const viewport = document.getElementById(`${category}-carousel-viewport`);
  if (!track || !viewport || !modelLists[category] || modelLists[category].length === 0) return;
  
  track.innerHTML = '';

  modelLists[category].forEach(filename => {
    const item = document.createElement('div');
    item.className = 'carousel-item';
    const img = document.createElement('img');
    const imgPath = `../assets/${category}/${filename.replace('.skp', '.png')}`;
    img.src = imgPath;
    img.alt = filename;
    item.appendChild(img);
    track.appendChild(item);
  });
  
  viewport.addEventListener('wheel', (event) => {
    event.preventDefault();
    moveCarousel(category, event.deltaY > 0 ? 1 : -1);
  });

  setTimeout(() => showCarouselItem(category, 0), 100); 
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–µ—Å—Ç–æ–≤–æ—ó –∫–∞—Ä—É—Å–µ–ª—ñ
function initializeTestCarousel(category) {
  const track = document.getElementById(`test-${category}-carousel-track`);
  const viewport = document.getElementById(`test-${category}-carousel-viewport`);
  if (!track || !viewport || !modelLists[category] || modelLists[category].length === 0) return;
  
  track.innerHTML = '';

  modelLists[category].forEach(filename => {
    const item = document.createElement('div');
    item.className = 'carousel-item';
    // –°—Ç–∞–Ω –ª–µ–¥–∞—á–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    item.dataset.status = 'idle';
    item.dataset.filename = filename;
    // –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä
    const loadingDiv = document.createElement('div');
    loadingDiv.className = 'loading-indicator';
    loadingDiv.textContent = '–ì–æ—Ç–æ–≤–æ –¥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è';
    item.appendChild(loadingDiv);
    track.appendChild(item);
  });
  
  viewport.addEventListener('wheel', (event) => {
    event.preventDefault();
    moveTestCarousel(category, event.deltaY > 0 ? 1 : -1);
  });

  setTimeout(() => {
    showTestCarouselItem(category, 0);
    // –õ–µ–¥–∞—á–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä—à–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
    loadOrGenerateTestPreview(category, 0);
  }, 100); 
}

// –õ–µ–¥–∞—á–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–µ–≤—å—é –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ —Ç–µ—Å—Ç–æ–≤–æ—ó –∫–∞—Ä—É—Å–µ–ª—ñ
function loadOrGenerateTestPreview(category, index) {
  const track = document.getElementById(`test-${category}-carousel-track`);
  if (!track) return;
  const items = track.querySelectorAll('.carousel-item');
  const item = items[index];
  if (!item) return;

  const currentStatus = item.dataset.status;
  if (currentStatus === 'loaded' || currentStatus === 'pending') return;

  const filename = item.dataset.filename || (modelLists[category] && modelLists[category][index]);
  if (!filename) return;

  let loadingDiv = item.querySelector('.loading-indicator');
  if (!loadingDiv) {
    loadingDiv = document.createElement('div');
    loadingDiv.className = 'loading-indicator';
    item.appendChild(loadingDiv);
  }
  loadingDiv.textContent = '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è';

  item.dataset.status = 'pending';

  const img = new Image();
  img.alt = filename;
  img.onload = function() {
    item.dataset.status = 'loaded';
    if (loadingDiv && loadingDiv.parentNode) loadingDiv.parentNode.removeChild(loadingDiv);
    item.appendChild(img);
    debugLog(`‚úÖ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: ${filename}`);
  };
  img.onerror = function() {
    debugLog(`‚ùå PNG –≤—ñ–¥—Å—É—Ç–Ω—î, –∑–∞–ø—É—Å–∫–∞—î–º–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é: ${filename}`);
    loadingDiv.textContent = '–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–µ–≤—å—é...';
    autoGenerateTestPreview(category, filename, item, loadingDiv);
  };
  img.src = `../assets/${category}/${filename.replace('.skp', '.png')}`;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤ –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ
function debugLog(message) {
  const debugElement = document.getElementById('debug-log');
  if (debugElement) {
    const time = new Date().toLocaleTimeString();
    debugElement.innerHTML += `<div>[${time}] ${message}</div>`;
    debugElement.scrollTop = debugElement.scrollHeight;
  }
  console.log(message);
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–µ–≤—å—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ—ó –∫–∞—Ä—É—Å–µ–ª—ñ
function autoGenerateTestPreview(category, filename, item, loadingDiv) {
  debugLog(`üîç autoGenerateTestPreview –≤–∏–∫–ª–∏–∫–∞–Ω–æ –¥–ª—è: ${category}/${filename}`);
  
  if (!window.sketchup) {
    debugLog('‚ùå window.sketchup –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π');
    createTestPlaceholder(item, loadingDiv, `–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó\n${filename}`);
    return;
  }
  
  debugLog('‚úÖ window.sketchup –¥–æ—Å—Ç—É–ø–Ω–∏–π, –≤–∏–∫–ª–∏–∫–∞—î–º–æ generate_web_preview');
  
  // –ì–µ–Ω–µ—Ä—É—î–º–æ –≤–µ–±-–ø—Ä–µ–≤—å—é —á–µ—Ä–µ–∑ SketchUp
  window.sketchup.generate_web_preview(`${category}/${filename}`);
  
  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –µ–ª–µ–º–µ–Ω—Ç–∏ –¥–ª—è callback
  window.pendingPreviews = window.pendingPreviews || {};
  window.pendingPreviews[`${category}/${filename}`] = { item, loadingDiv, filename };
  
  debugLog(`üìù –ó–±–µ—Ä–µ–∂–µ–Ω–æ pending preview –¥–ª—è: ${category}/${filename}`);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≥–ª—É—à–∫–∏ –≤ —Ç–µ—Å—Ç–æ–≤—ñ–π –∫–∞—Ä—É—Å–µ–ª—ñ
function createTestPlaceholder(item, loadingDiv, text) {
  loadingDiv.remove();
  const placeholder = document.createElement('div');
  placeholder.style.cssText = `
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background: rgba(255, 255, 255, 0.1);
    color: #666;
    font-size: 12px;
    text-align: center;
    padding: 10px;
    box-sizing: border-box;
  `;
  placeholder.textContent = text;
  item.appendChild(placeholder);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ–≥–æ –ø—Ä–µ–≤—å—é –∑ Ruby
function receiveWebPreview(componentPath, base64Data) {
  debugLog(`üîç receiveWebPreview –≤–∏–∫–ª–∏–∫–∞–Ω–æ –¥–ª—è: ${componentPath}`);
  debugLog(`üìä base64Data –¥–æ–≤–∂–∏–Ω–∞: ${base64Data ? base64Data.length : 0}`);
  debugLog(`üìÑ –ü–µ—Ä—à—ñ 100 —Å–∏–º–≤–æ–ª—ñ–≤: ${base64Data ? base64Data.substring(0, 100) : 'null'}`);
  
  const pendingData = window.pendingPreviews && window.pendingPreviews[componentPath];
  if (!pendingData) {
    debugLog('‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ pending data –¥–ª—è: ' + componentPath);
    return;
  }
  
  debugLog('‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ pending data');
  
  const { item, loadingDiv, filename } = pendingData;
  
  if (base64Data && base64Data.startsWith('data:image/')) {
    debugLog('‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ –≤–∞–ª—ñ–¥–Ω—ñ base64 –¥–∞–Ω—ñ, —Å—Ç–≤–æ—Ä—é—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è');
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ base64 –¥–∞–Ω–∏—Ö
    const img = document.createElement('img');
    img.src = base64Data;
    img.alt = filename;
    
    // –í–∏–¥–∞–ª—è—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –¥–æ–¥–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    loadingDiv.remove();
    item.appendChild(img);
    
    // –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–∏–±—Ä–∞–Ω–æ –¥–ª—è –∫—ñ–Ω—Ü–µ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  } else {
    debugLog('‚ùå –ù–µ–≤–∞–ª—ñ–¥–Ω—ñ base64 –¥–∞–Ω—ñ –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ');
    debugLog(`üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: startsWith('data:image/'): ${base64Data ? base64Data.startsWith('data:image/') : false}`);
    // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏, –ø–æ–∫–∞–∑—É—î–º–æ –∑–∞–≥–ª—É—à–∫—É
    createTestPlaceholder(item, loadingDiv, `–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó\n${filename}`);
  }
  
  // –û—á–∏—â–∞—î–º–æ pending
  delete window.pendingPreviews[componentPath];
  debugLog('üßπ –û—á–∏—â–µ–Ω–æ pending preview');
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–µ–≤—å—é
function handlePreviewError(componentPath, errorMessage) {
  const pendingData = window.pendingPreviews && window.pendingPreviews[componentPath];
  if (!pendingData) return;
  
  const { item, loadingDiv, filename } = pendingData;
  createTestPlaceholder(item, loadingDiv, `–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó\n${filename}`);
  
  // –û—á–∏—â–∞—î–º–æ pending
  delete window.pendingPreviews[componentPath];
}



function moveCarousel(category, direction) {
  const state = carouselState[category];
  const newIndex = state.index + direction;
  
  if (newIndex >= 0 && newIndex < modelLists[category].length) {
    showCarouselItem(category, newIndex);
  }
}

function moveTestCarousel(category, direction) {
  const state = testCarouselState[category];
  const newIndex = state.index + direction;
  
  if (newIndex >= 0 && newIndex < modelLists[category].length) {
    showTestCarouselItem(category, newIndex);
  }
}

function showCarouselItem(category, index) {
  const track = document.getElementById(`${category}-carousel-track`);
  const viewport = document.getElementById(`${category}-carousel-viewport`);
  const items = track.querySelectorAll('.carousel-item');
  
  if (!track || items.length === 0 || !items[index]) return;

  items.forEach((item, i) => {
    item.classList.toggle('active', i === index);
  });
  
  const viewportCenter = viewport.offsetWidth / 2;
  const targetItem = items[index];
  const itemCenter = targetItem.offsetLeft + targetItem.offsetWidth / 2;
  const newTransform = viewportCenter - itemCenter;

  carouselState[category].index = index;
  track.style.transform = `translateX(${newTransform}px)`;
  
  updateAllDisplays();
}

function showTestCarouselItem(category, index) {
  const track = document.getElementById(`test-${category}-carousel-track`);
  const viewport = document.getElementById(`test-${category}-carousel-viewport`);
  const items = track.querySelectorAll('.carousel-item');
  
  if (!track || items.length === 0 || !items[index]) return;

  items.forEach((item, i) => {
    item.classList.toggle('active', i === index);
  });
  
  const viewportCenter = viewport.offsetWidth / 2;
  const targetItem = items[index];
  const itemCenter = targetItem.offsetLeft + targetItem.offsetWidth / 2;
  const newTransform = viewportCenter - itemCenter;

  testCarouselState[category].index = index;
  track.style.transform = `translateX(${newTransform}px)`;
  // –õ–µ–¥–∞—á–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞ —Å—É—Å—ñ–¥–Ω—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
  loadOrGenerateTestPreview(category, index);
  if (index + 1 < items.length) loadOrGenerateTestPreview(category, index + 1);
  if (index - 1 >= 0) loadOrGenerateTestPreview(category, index - 1);
}

// --- –§–£–ù–ö–¶–Ü–á –î–õ–Ø –°–¢–í–û–†–ï–ù–ù–Ø –ï–õ–ï–ú–ï–ù–¢–Ü–í ---

function addModel(category) {
  const state = carouselState[category];
  const filename = modelLists[category][state.index];
  if (window.sketchup && filename) {
    window.sketchup.insert_component(`${category}|${filename}`);
  }
}

function addTestModel(category) {
  const state = testCarouselState[category];
  const filename = modelLists[category][state.index];
  if (window.sketchup && filename) {
    window.sketchup.insert_component(`${category}|${filename}`);
    showNotification(`–¢–µ—Å—Ç–æ–≤–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç ${filename} –¥–æ–¥–∞–Ω–æ!`, 'success');
  }
}

function updateTilingControls() {
    const mode = document.getElementById('tiling-mode').value;
    const frameControls = document.getElementById('frame-controls');
    const modularControls = document.getElementById('modular-controls');
    
    if (mode === 'frame') {
        frameControls.classList.remove('hidden');
        modularControls.classList.add('hidden');
    } else if (mode === 'modular') {
        frameControls.classList.add('hidden');
        modularControls.classList.remove('hidden');
    }
    updateAllDisplays();
}

function addTiles() {
    updateAllDisplays(); 
    const mode = document.getElementById('tiling-mode').value;
    if (mode === 'frame') {
        addPerimeterTiles();
    } else if (mode === 'modular') {
        addModularTiles();
    }
}

function addPerimeterTiles() {
  const thickness = document.getElementById("tile-thickness-frame").value;
  const borderWidth = document.getElementById("tile-border-width").value;
  const overhang = document.getElementById("tile-overhang").value;
  if (window.sketchup) {
    const params = { type: 'frame', thickness: parseFloat(thickness), borderWidth: parseFloat(borderWidth), overhang: parseFloat(overhang) };
    window.sketchup.insert_tiles(JSON.stringify(params));
  }
}

function addModularTiles() {
    const tileSize = document.getElementById('modular-tile-size').value;
    const thickness = document.getElementById('modular-thickness').value;
    const seam = document.getElementById('modular-seam').value;
    const overhang = document.getElementById('modular-overhang').value;
    if (window.sketchup) {
        const params = { type: 'modular', tileSize: tileSize, thickness: parseFloat(thickness), seam: parseFloat(seam), overhang: parseFloat(overhang) };
        window.sketchup.insert_tiles(JSON.stringify(params));
    }
}

function addFoundation() {
  const depth = document.getElementById("foundation-depth").value;
  const width = document.getElementById("foundation-width").value;
  const height = document.getElementById("foundation-height").value;
  
  if (window.sketchup) {
    const params = { depth: parseFloat(depth), width: parseFloat(width), height: parseFloat(height) };
    window.sketchup.insert_foundation(JSON.stringify(params));
  }
  updateAllDisplays();
}

function addSideCladding() {
    const thickness = document.getElementById("cladding-thickness").value;
    if (window.sketchup) {
        const params = { thickness: parseFloat(thickness) };
        window.sketchup.insert_side_cladding(JSON.stringify(params));
    }
    updateAllDisplays();
}


// --- –¶–ï–ù–¢–†–ê–õ–Ü–ó–û–í–ê–ù–ê –§–£–ù–ö–¶–Ü–Ø –û–ù–û–í–õ–ï–ù–ù–Ø –í–°–Ü–• –ù–ê–ü–ò–°–Ü–í ---
function updateAllDisplays() {
    updateHeaders();
    updateSummaryTable();
}

function updateHeaders() {
    const getVal = id => document.getElementById(id).value;
    const getFloat = id => parseFloat(getVal(id));
    const updateText = (id, text) => {
        const el = document.getElementById(id);
        if (el) el.textContent = text;
    };

    const f_depth = getFloat('foundation-depth');
    const f_width = getFloat('foundation-width');
    const f_height = getFloat('foundation-height');
    updateText('foundation-dimensions-display', `${f_depth/10} x ${f_width/10} x ${f_height/10} —Å–º`);

    const mode = getVal('tiling-mode');
    updateText('tiling-type-display', mode === 'frame' ? '–†–∞–º–∫–∞' : '–ú–æ–¥—É–ª—å–Ω–∞');

    const c_thickness = getVal('cladding-thickness');
    updateText('cladding-dimensions-display', `h: ${f_height/10}—Å–º, —Ç–æ–≤—â: ${c_thickness}–º–º`);

    ['stands', 'steles', 'flowerbeds'].forEach(category => {
        const state = carouselState[category];
        const display = document.getElementById(`${category}-dimensions-display`);
        if (display && modelLists[category] && modelLists[category].length > 0 && state) {
            const filename = modelLists[category][state.index];
            if (filename) {
                const match = filename.match(/(\d+x\d+x\d+)/);
                display.textContent = match ? match[1].replace(/x/g, 'x') + '—Å–º' : '';
            }
        }
    });
}


function updateSummaryTable() {
    if (!document.getElementById('summary-foundation')) return;
    
    const getValue = id => document.getElementById(id).value;
    const getFloat = id => parseFloat(getValue(id));
    
    const summary = {
        foundation: document.getElementById('summary-foundation'),
        tiling: document.getElementById('summary-tiling'),
        cladding: document.getElementById('summary-cladding'),
        stand: document.getElementById('summary-stand'),
        flowerbed: document.getElementById('summary-flowerbed'),
        stele: document.getElementById('summary-stele')
    };

    const f_depth = getFloat('foundation-depth');
    const f_width = getFloat('foundation-width');
    const f_height = getFloat('foundation-height');
    summary.foundation.textContent = `${f_depth/10} x ${f_width/10} x ${f_height/10} —Å–º`;

    const mode = getValue('tiling-mode');
    if (mode === 'frame') {
        const width = getValue('tile-border-width');
        const overhang = getValue('tile-overhang');
        summary.tiling.textContent = `–†–∞–º–∫–∞, —à–∏—Ä. ${width}–º–º, –≤–∏—Å—Ç—É–ø ${overhang}–º–º`;
    } else {
        const size = getValue('modular-tile-size');
        const seam = getValue('modular-seam');
        summary.tiling.textContent = `–ú–æ–¥—É–ª—å–Ω–∞ ${size}—Å–º, —à–æ–≤ ${seam}–º–º`;
    }

    const c_thickness = getFloat('cladding-thickness');
    const perimeter = 2 * (f_depth + f_width);
    summary.cladding.textContent = `h: ${f_height/10}—Å–º, —Ç–æ–≤—â: ${c_thickness}–º–º, L: ${perimeter/1000}–º`;

    ['stands', 'flowerbeds', 'steles'].forEach(category => {
        const state = carouselState[category];
        const displayId = `summary-${category.slice(0, -1)}`;
        const display = document.getElementById(displayId);
        if (display && modelLists[category] && modelLists[category].length > 0 && state) {
            const filename = modelLists[category][state.index];
            if (filename) {
                const match = filename.match(/(\d+x\d+x\d+)/);
                display.textContent = match ? match[1].replace(/x/g, ' x ') + ' —Å–º' : '--';
            }
        } else if (display) {
            display.textContent = '--';
        }
    });
}

// ========================================
// –§–£–ù–ö–¶–Ü–á –î–õ–Ø –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ù–û–í–ò–• –§–Ü–ß
// ========================================



// –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–µ–≤—å—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ—ó –∫–∞—Ä—É—Å–µ–ª—ñ
function generateTestPreviews(category) {
  if (!modelLists[category] || modelLists[category].length === 0) {
    showNotification('–ù–µ–º–∞—î –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–µ–≤—å—é', 'warning');
    return;
  }
  
  const categoryText = getCategoryDisplayName(category);
  showNotification(`–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–µ–≤—å—é –¥–ª—è ${categoryText}...`, 'info');
  
  if (window.sketchup) {
    window.sketchup.generate_category_previews(category);
  }
  
  showNotification(`–ü—Ä–µ–≤—å—é –¥–ª—è ${categoryText} –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ!`, 'success');
  
  // –û–Ω–æ–≤–ª—é—î–º–æ –∫–∞—Ä—É—Å–µ–ª—å –ø—ñ—Å–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
  setTimeout(() => {
    initializeTestCarousel(category);
  }, 2000);
}

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂—É–≤–∞–Ω–æ—ó –Ω–∞–∑–≤–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
function getCategoryDisplayName(category) {
    const names = {
        'stands': '–ø—ñ–¥—Å—Ç–∞–≤–æ–∫',
        'steles': '—Å—Ç–µ–ª',
        'flowerbeds': '–∫–≤—ñ—Ç–Ω–∏–∫—ñ–≤',
        'gravestones': '–Ω–∞–¥–≥—Ä–æ–±–∫—ñ–≤',
        'pavement_tiles': '–ø–ª–∏—Ç–∫–∏'
    };
    return names[category] || category;
}

// –°–∏—Å—Ç–µ–º–∞ —Å–ø–æ–≤—ñ—â–µ–Ω—å
function showNotification(message, type = 'info') {
    // –°—Ç–≤–æ—Ä—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.textContent = message;
    
    // –î–æ–¥–∞—î–º–æ —Å—Ç–∏–ª—ñ
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 12px 20px;
        border-radius: 8px;
        color: white;
        font-weight: 500;
        z-index: 1000;
        transform: translateX(100%);
        transition: transform 0.3s ease;
        max-width: 300px;
        word-wrap: break-word;
    `;
    
    // –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤
    const colors = {
        'info': 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
        'success': 'linear-gradient(135deg, #56ab2f 0%, #a8e6cf 100%)',
        'warning': 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)',
        'error': 'linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%)'
    };
    
    notification.style.background = colors[type] || colors.info;
    
    // –î–æ–¥–∞—î–º–æ –¥–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    document.body.appendChild(notification);
    
    // –ü–æ–∫–∞–∑—É—î–º–æ
    setTimeout(() => {
        notification.style.transform = 'translateX(0)';
    }, 100);
    
    // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥–∏
    setTimeout(() => {
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    }, 3000);
}