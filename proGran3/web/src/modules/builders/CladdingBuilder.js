// proGran3/web/src/modules/builders/CladdingBuilder.js
// –ú–æ–¥—É–ª—å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±–ª–∏—Ü—é–≤–∞–Ω–Ω—è –¥–ª—è ProGran3

import { Logger } from '../utils/Logger.js';
import { convertToMm } from '../utils/Units.js';

export class CladdingBuilder {
  constructor() {
    this.addedElements = window.addedElements || {};
  }

  // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±–ª–∏—Ü—é–≤–∞–Ω–Ω—è
  addCladding() {
    Logger.debug('üèóÔ∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±–ª–∏—Ü—é–≤–∞–Ω–Ω—è...', 'info');
    
    try {
      const thickness = convertToMm(document.getElementById('cladding-thickness').value);
      const height = convertToMm(document.getElementById('cladding-height').value);
      const mode = this.getSelectedCladdingMode();
      
      Logger.debug(`üìè –¢–æ–≤—â–∏–Ω–∞ –æ–±–ª–∏—Ü—é–≤–∞–Ω–Ω—è: ${thickness} –º–º, –≤–∏—Å–æ—Ç–∞: ${height} –º–º, —Ä–µ–∂–∏–º: ${mode}`, 'info');
      
      // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
      if (!this.validateCladdingParameters(thickness, height)) {
        Logger.debug('‚ùå –ù–µ–≤—ñ—Ä–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –æ–±–ª–∏—Ü—é–≤–∞–Ω–Ω—è', 'error');
        return false;
      }
      
      if (mode === 'uniform') {
        return this.addUniformCladding(thickness, height);
      } else {
        return this.addCustomCladding(thickness, height);
      }
      
    } catch (error) {
      Logger.debug(`‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±–ª–∏—Ü—é–≤–∞–Ω–Ω—è: ${error.message}`, 'error');
      return false;
    }
  }

  // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±–ª–∏—Ü—é–≤–∞–Ω–Ω—è –∑ –æ–¥–Ω–∞–∫–æ–≤–æ—é —à–∏—Ä–∏–Ω–æ—é
  addUniformCladding(thickness, height) {
    const width = convertToMm(document.getElementById('cladding-uniform-width').value);
    
    Logger.debug(`üèóÔ∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±–ª–∏—Ü—é–≤–∞–Ω–Ω—è –∑ –æ–¥–Ω–∞–∫–æ–≤–æ—é —à–∏—Ä–∏–Ω–æ—é: ${width}–º–º, —Ç–æ–≤—â–∏–Ω–∞: ${thickness}–º–º, –≤–∏—Å–æ—Ç–∞: ${height}–º–º`, 'info');
    
    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —à–∏—Ä–∏–Ω–∏
    if (!this.validateCladdingWidth(width)) {
      return false;
    }
    
    if (window.sketchup && window.sketchup.add_cladding_uniform) {
      window.sketchup.add_cladding_uniform(width, thickness, height);
      this.addedElements.cladding = true;
      
      if (window.updateSummaryTable) {
        window.updateSummaryTable();
      }
      
      Logger.debug('‚úÖ –û–±–ª–∏—Ü—é–≤–∞–Ω–Ω—è –∑ –æ–¥–Ω–∞–∫–æ–≤–æ—é —à–∏—Ä–∏–Ω–æ—é —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ', 'success');
      return true;
    } else {
      Logger.debug('‚ùå window.sketchup.add_cladding_uniform –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π', 'error');
      return false;
    }
  }

  // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±–ª–∏—Ü—é–≤–∞–Ω–Ω—è –∑ —Ä—ñ–∑–Ω–æ—é —à–∏—Ä–∏–Ω–æ—é
  addCustomCladding(thickness, height) {
    const north = convertToMm(document.getElementById('cladding-north').value);
    const south = convertToMm(document.getElementById('cladding-south').value);
    const east = convertToMm(document.getElementById('cladding-east').value);
    const west = convertToMm(document.getElementById('cladding-west').value);
    
    Logger.debug(`üèóÔ∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±–ª–∏—Ü—é–≤–∞–Ω–Ω—è –∑ —Ä—ñ–∑–Ω–æ—é —à–∏—Ä–∏–Ω–æ—é: –ü:${north}–º–º, –ü–¥:${south}–º–º, –°:${east}–º–º, –ó:${west}–º–º, —Ç–æ–≤—â–∏–Ω–∞: ${thickness}–º–º, –≤–∏—Å–æ—Ç–∞: ${height}–º–º`, 'info');
    
    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤—Å—ñ—Ö —Å—Ç–æ—Ä—ñ–Ω
    if (!this.validateCladdingWidth(north) || !this.validateCladdingWidth(south) || 
        !this.validateCladdingWidth(east) || !this.validateCladdingWidth(west)) {
      return false;
    }
    
    if (window.sketchup && window.sketchup.add_cladding_custom) {
      window.sketchup.add_cladding_custom(north, south, east, west, thickness, height);
      this.addedElements.cladding = true;
      
      if (window.updateSummaryTable) {
        window.updateSummaryTable();
      }
      
      Logger.debug('‚úÖ –û–±–ª–∏—Ü—é–≤–∞–Ω–Ω—è –∑ —Ä—ñ–∑–Ω–æ—é —à–∏—Ä–∏–Ω–æ—é —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ', 'success');
      return true;
    } else {
      Logger.debug('‚ùå window.sketchup.add_cladding_custom –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π', 'error');
      return false;
    }
  }

  // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –æ–±–ª–∏—Ü—é–≤–∞–Ω–Ω—è
  validateCladdingParameters(thickness, height) {
    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–æ–≤—â–∏–Ω–∏
    if (thickness < 10 || thickness > 100) {
      Logger.debug('‚ùå –¢–æ–≤—â–∏–Ω–∞ –æ–±–ª–∏—Ü—é–≤–∞–Ω–Ω—è –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –≤—ñ–¥ 10 –¥–æ 100 –º–º', 'error');
      return false;
    }
    
    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤–∏—Å–æ—Ç–∏
    if (height < 50 || height > 3000) {
      Logger.debug('‚ùå –í–∏—Å–æ—Ç–∞ –æ–±–ª–∏—Ü—é–≤–∞–Ω–Ω—è –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –≤—ñ–¥ 50 –¥–æ 3000 –º–º', 'error');
      return false;
    }
    
    return true;
  }

  // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —à–∏—Ä–∏–Ω–∏ –æ–±–ª–∏—Ü—é–≤–∞–Ω–Ω—è
  validateCladdingWidth(width) {
    if (width < 20 || width > 5000) {
      Logger.debug('‚ùå –®–∏—Ä–∏–Ω–∞ –æ–±–ª–∏—Ü—é–≤–∞–Ω–Ω—è –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –≤—ñ–¥ 20 –¥–æ 5000 –º–º', 'error');
      return false;
    }
    return true;
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É –æ–±–ª–∏—Ü—é–≤–∞–Ω–Ω—è
  getSelectedCladdingMode() {
    const activeButton = document.querySelector('.button-group-cladding-mode .cladding-mode-btn.active');
    return activeButton ? activeButton.dataset.value : 'uniform';
  }

  // –í–∏–±—ñ—Ä —Ä–µ–∂–∏–º—É –æ–±–ª–∏—Ü—é–≤–∞–Ω–Ω—è
  selectCladdingMode(button) {
    Logger.debug(`üîÑ –ó–º—ñ–Ω–∞ —Ä–µ–∂–∏–º—É –æ–±–ª–∏—Ü—é–≤–∞–Ω–Ω—è –Ω–∞: ${button.dataset.value}`, 'info');
    
    // –í–∏–¥–∞–ª—è—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–ª–∞—Å –∑ —É—Å—ñ—Ö –∫–Ω–æ–ø–æ–∫ —Ä–µ–∂–∏–º—É —à–∏—Ä–∏–Ω–∏
    document.querySelectorAll('.button-group-cladding-mode .cladding-mode-btn').forEach(btn => {
      btn.classList.remove('active');
    });
    
    // –î–æ–¥–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–ª–∞—Å –¥–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ—ó –∫–Ω–æ–ø–∫–∏
    button.classList.add('active');
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏
    this.updateCladdingControls();
  }

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç—Ä–æ–ª—ñ–≤ –æ–±–ª–∏—Ü—é–≤–∞–Ω–Ω—è
  updateCladdingControls() {
    const mode = this.getSelectedCladdingMode();
    const uniformControls = document.getElementById('uniform-cladding-controls');
    const customControls = document.getElementById('custom-cladding-controls');
    
    if (mode === 'uniform') {
      uniformControls.classList.remove('hidden');
      customControls.classList.add('hidden');
    } else {
      uniformControls.classList.add('hidden');
      customControls.classList.remove('hidden');
    }
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –≤—Å—ñ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    if (window.updateAllDisplays) {
      window.updateAllDisplays();
    }
    
    Logger.debug(`‚úÖ –ö–æ–Ω—Ç—Ä–æ–ª–∏ –æ–±–ª–∏—Ü—é–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è —Ä–µ–∂–∏–º—É: ${mode}`, 'success');
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –æ–±–ª–∏—Ü—é–≤–∞–Ω–Ω—è –≤–∂–µ —Å—Ç–≤–æ—Ä–µ–Ω–µ
  isCladdingAdded() {
    return this.addedElements.cladding === true;
  }

  // –°–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –æ–±–ª–∏—Ü—é–≤–∞–Ω–Ω—è
  resetCladding() {
    this.addedElements.cladding = false;
    Logger.debug('üîÑ –°—Ç–∞–Ω –æ–±–ª–∏—Ü—é–≤–∞–Ω–Ω—è —Å–∫–∏–Ω—É—Ç–æ', 'info');
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –æ–±–ª–∏—Ü—é–≤–∞–Ω–Ω—è –¥–ª—è —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
  getCladdingInfo() {
    if (!this.isCladdingAdded()) {
      return '--';
    }
    
    const thickness = convertToMm(document.getElementById('cladding-thickness').value);
    const height = convertToMm(document.getElementById('cladding-height').value);
    const mode = this.getSelectedCladdingMode();
    const unit = window.getCurrentUnit ? window.getCurrentUnit() : 'mm';
    const unitText = unit === 'mm' ? '–º–º' : '—Å–º';
    
    if (mode === 'uniform') {
      const width = convertToMm(document.getElementById('cladding-uniform-width').value);
      if (unit === 'cm') {
        return `–®:${Math.round(width/10)} –í:${Math.round(height/10)} –¢:${Math.round(thickness/10)} ${unitText}`;
      } else {
        return `–®:${width} –í:${height} –¢:${thickness} ${unitText}`;
      }
    } else {
      const north = convertToMm(document.getElementById('cladding-north').value);
      const south = convertToMm(document.getElementById('cladding-south').value);
      const east = convertToMm(document.getElementById('cladding-east').value);
      const west = convertToMm(document.getElementById('cladding-west').value);
      
      if (unit === 'cm') {
        return `–ü:${Math.round(north/10)} –ü–¥:${Math.round(south/10)} –°:${Math.round(east/10)} –ó:${Math.round(west/10)} –í:${Math.round(height/10)} –¢:${Math.round(thickness/10)} ${unitText}`;
      } else {
        return `–ü:${north} –ü–¥:${south} –°:${east} –ó:${west} –í:${height} –¢:${thickness} ${unitText}`;
      }
    }
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä
const claddingBuilder = new CladdingBuilder();

// –ï–∫—Å–ø–æ—Ä—Ç –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
export function addCladding() {
  return claddingBuilder.addCladding();
}

export function selectCladdingMode(button) {
  return claddingBuilder.selectCladdingMode(button);
}

export function getSelectedCladdingMode() {
  return claddingBuilder.getSelectedCladdingMode();
}

export function updateCladdingControls() {
  return claddingBuilder.updateCladdingControls();
}

export function isCladdingAdded() {
  return claddingBuilder.isCladdingAdded();
}

export function resetCladding() {
  return claddingBuilder.resetCladding();
}

export function getCladdingInfo() {
  return claddingBuilder.getCladdingInfo();
}
