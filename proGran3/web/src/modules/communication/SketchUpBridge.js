// proGran3/web/src/modules/communication/SketchUpBridge.js
// –ú–æ–¥—É–ª—å –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—ó –∑ SketchUp –¥–ª—è ProGran3

import { Logger } from '../utils/Logger.js';

export class SketchUpBridge {
  constructor() {
    this.isConnected = false;
    this.connectionRetries = 0;
    this.maxRetries = 3;
    this.retryDelay = 1000;
    this.callbackQueue = [];
    this.responseHandlers = new Map();
  }

  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ SketchUp
  initialize() {
    Logger.debug('üîó –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ SketchUp', 'info');
    
    try {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –æ–±'—î–∫—Ç–∞ SketchUp
      if (typeof window.sketchup === 'undefined') {
        Logger.debug('‚ö†Ô∏è –û–±\'—î–∫—Ç window.sketchup –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ', 'warning');
        this.scheduleRetry();
        return false;
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –º–µ—Ç–æ–¥–∏
      const requiredMethods = [
        'get_models',
        'add_foundation',
        'add_blind_area_uniform',
        'add_blind_area_custom',
        'add_tiling_uniform',
        'add_tiling_custom',
        'add_cladding_uniform',
        'add_cladding_custom',
        'add_stand',
        'add_stele',
        'add_flowerbed'
      ];

      const missingMethods = requiredMethods.filter(method => 
        typeof window.sketchup[method] !== 'function'
      );

      if (missingMethods.length > 0) {
        Logger.debug(`‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ –º–µ—Ç–æ–¥–∏ SketchUp: ${missingMethods.join(', ')}`, 'warning');
        this.scheduleRetry();
        return false;
      }

      this.isConnected = true;
      this.connectionRetries = 0;
      
             Logger.debug('‚úÖ –ó\'—î–¥–Ω–∞–Ω–Ω—è –∑ SketchUp –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'success');
       this.processCallbackQueue();
      
      return true;
      
    } catch (error) {
      Logger.debug(`‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó SketchUp: ${error.message}`, 'error');
      this.scheduleRetry();
      return false;
    }
  }

  // –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Å–ø—Ä–æ–±–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
  scheduleRetry() {
    if (this.connectionRetries < this.maxRetries) {
      this.connectionRetries++;
      Logger.debug(`üîÑ –°–ø—Ä–æ–±–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è ${this.connectionRetries}/${this.maxRetries} —á–µ—Ä–µ–∑ ${this.retryDelay}–º—Å`, 'info');
      
      setTimeout(() => {
        this.initialize();
      }, this.retryDelay);
    } else {
      Logger.debug('‚ùå –î–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–± –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è', 'error');
    }
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è
  isBridgeConnected() {
    return this.isConnected && typeof window.sketchup !== 'undefined';
  }

  // –ë–µ–∑–ø–µ—á–Ω–∏–π –≤–∏–∫–ª–∏–∫ –º–µ—Ç–æ–¥—É SketchUp
  callSketchUpMethod(methodName, ...args) {
    Logger.debug(`üìû –í–∏–∫–ª–∏–∫ SketchUp: ${methodName}(${args.join(', ')})`, 'info');
    
    if (!this.isBridgeConnected()) {
      Logger.debug(`‚ùå SketchUp –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –≤–∏–∫–ª–∏–∫—É ${methodName}`, 'error');
      return Promise.reject(new Error('SketchUp –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π'));
    }

    try {
      const method = window.sketchup[methodName];
      if (typeof method !== 'function') {
        Logger.debug(`‚ùå –ú–µ—Ç–æ–¥ ${methodName} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ SketchUp`, 'error');
        return Promise.reject(new Error(`–ú–µ—Ç–æ–¥ ${methodName} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`));
      }

      const result = method.apply(window.sketchup, args);
      Logger.debug(`‚úÖ SketchUp ${methodName} –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ`, 'success');
      
      return Promise.resolve(result);
      
    } catch (error) {
      Logger.debug(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–ª–∏–∫—É SketchUp ${methodName}: ${error.message}`, 'error');
      return Promise.reject(error);
    }
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –º–æ–¥–µ–ª–µ–π –∑ SketchUp
  getModels(modelType) {
    return this.callSketchUpMethod('get_models', modelType)
      .then(models => {
        Logger.debug(`üì¶ –û—Ç—Ä–∏–º–∞–Ω–æ ${models?.length || 0} –º–æ–¥–µ–ª–µ–π —Ç–∏–ø—É ${modelType}`, 'success');
        return models || [];
      })
      .catch(error => {
        Logger.debug(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–æ–¥–µ–ª–µ–π ${modelType}: ${error.message}`, 'error');
        return [];
      });
  }

  // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç—É
  createFoundation(depth, width, height) {
    return this.callSketchUpMethod('add_foundation', depth, width, height)
      .then(result => {
        Logger.debug('üèóÔ∏è –§—É–Ω–¥–∞–º–µ–Ω—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ', 'success');
        return result;
      });
  }

  // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–º–æ—Å—Ç–∫–∏ –∑ –æ–¥–Ω–∞–∫–æ–≤–æ—é —à–∏—Ä–∏–Ω–æ—é
  createUniformBlindArea(width, thickness) {
    return this.callSketchUpMethod('add_blind_area_uniform', width, thickness)
      .then(result => {
        Logger.debug('üèóÔ∏è –í—ñ–¥–º–æ—Å—Ç–∫–∞ –∑ –æ–¥–Ω–∞–∫–æ–≤–æ—é —à–∏—Ä–∏–Ω–æ—é —Å—Ç–≤–æ—Ä–µ–Ω–∞', 'success');
        return result;
      });
  }

  // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–º–æ—Å—Ç–∫–∏ –∑ —Ä—ñ–∑–Ω–æ—é —à–∏—Ä–∏–Ω–æ—é
  createCustomBlindArea(north, south, east, west, thickness) {
    return this.callSketchUpMethod('add_blind_area_custom', north, south, east, west, thickness)
      .then(result => {
        Logger.debug('üèóÔ∏è –í—ñ–¥–º–æ—Å—Ç–∫–∞ –∑ —Ä—ñ–∑–Ω–æ—é —à–∏—Ä–∏–Ω–æ—é —Å—Ç–≤–æ—Ä–µ–Ω–∞', 'success');
        return result;
      });
  }

  // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∏—Ç–∫–∏ –∑ –æ–¥–Ω–∞–∫–æ–≤–æ—é —à–∏—Ä–∏–Ω–æ—é
  createUniformTiling(width, thickness) {
    return this.callSketchUpMethod('add_tiling_uniform', width, thickness)
      .then(result => {
        Logger.debug('üèóÔ∏è –ü–ª–∏—Ç–∫–∞ –∑ –æ–¥–Ω–∞–∫–æ–≤–æ—é —à–∏—Ä–∏–Ω–æ—é —Å—Ç–≤–æ—Ä–µ–Ω–∞', 'success');
        return result;
      });
  }

  // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∏—Ç–∫–∏ –∑ —Ä—ñ–∑–Ω–æ—é —à–∏—Ä–∏–Ω–æ—é
  createCustomTiling(north, south, east, west, thickness) {
    return this.callSketchUpMethod('add_tiling_custom', north, south, east, west, thickness)
      .then(result => {
        Logger.debug('üèóÔ∏è –ü–ª–∏—Ç–∫–∞ –∑ —Ä—ñ–∑–Ω–æ—é —à–∏—Ä–∏–Ω–æ—é —Å—Ç–≤–æ—Ä–µ–Ω–∞', 'success');
        return result;
      });
  }

  // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±–ª–∏—Ü—é–≤–∞–Ω–Ω—è –∑ –æ–¥–Ω–∞–∫–æ–≤–æ—é —à–∏—Ä–∏–Ω–æ—é
  createUniformCladding(width, thickness, height) {
    return this.callSketchUpMethod('add_cladding_uniform', width, thickness, height)
      .then(result => {
        Logger.debug('üèóÔ∏è –û–±–ª–∏—Ü—é–≤–∞–Ω–Ω—è –∑ –æ–¥–Ω–∞–∫–æ–≤–æ—é —à–∏—Ä–∏–Ω–æ—é —Å—Ç–≤–æ—Ä–µ–Ω–æ', 'success');
        return result;
      });
  }

  // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±–ª–∏—Ü—é–≤–∞–Ω–Ω—è –∑ —Ä—ñ–∑–Ω–æ—é —à–∏—Ä–∏–Ω–æ—é
  createCustomCladding(north, south, east, west, thickness, height) {
    return this.callSketchUpMethod('add_cladding_custom', north, south, east, west, thickness, height)
      .then(result => {
        Logger.debug('üèóÔ∏è –û–±–ª–∏—Ü—é–≤–∞–Ω–Ω—è –∑ —Ä—ñ–∑–Ω–æ—é —à–∏—Ä–∏–Ω–æ—é —Å—Ç–≤–æ—Ä–µ–Ω–æ', 'success');
        return result;
      });
  }

  // –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å—Ç–µ–ª–∞–∂—É
  addStand(modelIndex) {
    return this.callSketchUpMethod('add_stand', modelIndex)
      .then(result => {
        Logger.debug(`üèóÔ∏è –°—Ç–µ–ª–∞–∂ ${modelIndex} –¥–æ–¥–∞–Ω–æ`, 'success');
        return result;
      });
  }

  // –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å—Ç–µ–ª–∏
  addStele(modelIndex) {
    return this.callSketchUpMethod('add_stele', modelIndex)
      .then(result => {
        Logger.debug(`üèóÔ∏è –°—Ç–µ–ª–∞ ${modelIndex} –¥–æ–¥–∞–Ω–∞`, 'success');
        return result;
      });
  }

  // –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–ª—É–º–±–∏
  addFlowerbed(modelIndex) {
    return this.callSketchUpMethod('add_flowerbed', modelIndex)
      .then(result => {
        Logger.debug(`üèóÔ∏è –ö–ª—É–º–±–∞ ${modelIndex} –¥–æ–¥–∞–Ω–∞`, 'success');
        return result;
      });
  }

  // –û–±—Ä–æ–±–∫–∞ —á–µ—Ä–≥–∏ –≤–∏–∫–ª–∏–∫—ñ–≤
  processCallbackQueue() {
    if (this.callbackQueue.length === 0) return;
    
    Logger.debug(`üìã –û–±—Ä–æ–±–∫–∞ —á–µ—Ä–≥–∏ –≤–∏–∫–ª–∏–∫—ñ–≤ (${this.callbackQueue.length} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤)`, 'info');
    
    while (this.callbackQueue.length > 0) {
      const callback = this.callbackQueue.shift();
      try {
        callback();
      } catch (error) {
        Logger.debug(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤–∏–∫–ª–∏–∫—É –∑ —á–µ—Ä–≥–∏: ${error.message}`, 'error');
      }
    }
  }

  // –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏–∫–ª–∏–∫—É –¥–æ —á–µ—Ä–≥–∏
  queueCallback(callback) {
    this.callbackQueue.push(callback);
    Logger.debug('üìã –í–∏–∫–ª–∏–∫ –¥–æ–¥–∞–Ω–æ –¥–æ —á–µ—Ä–≥–∏', 'info');
  }

  // –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
  registerResponseHandler(requestId, handler) {
    this.responseHandlers.set(requestId, handler);
    Logger.debug(`üìù –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –æ–±—Ä–æ–±–Ω–∏–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${requestId}`, 'info');
  }

  // –í–∏–¥–∞–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
  unregisterResponseHandler(requestId) {
    this.responseHandlers.delete(requestId);
    Logger.debug(`üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ –æ–±—Ä–æ–±–Ω–∏–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${requestId}`, 'info');
  }

  // –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ SketchUp
  handleResponse(requestId, response) {
    const handler = this.responseHandlers.get(requestId);
    if (handler) {
      try {
        handler(response);
        this.unregisterResponseHandler(requestId);
        Logger.debug(`‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å ${requestId} –æ–±—Ä–æ–±–ª–µ–Ω–∞`, 'success');
      } catch (error) {
        Logger.debug(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ ${requestId}: ${error.message}`, 'error');
      }
    } else {
      Logger.debug(`‚ö†Ô∏è –û–±—Ä–æ–±–Ω–∏–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ ${requestId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`, 'warning');
    }
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑'—î–¥–Ω–∞–Ω–Ω—è
  getConnectionStatus() {
    return {
      isConnected: this.isConnected,
      retries: this.connectionRetries,
      maxRetries: this.maxRetries,
      queueLength: this.callbackQueue.length,
      activeHandlers: this.responseHandlers.size
    };
  }

  // –°–∫–∏–¥–∞–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è
  reset() {
    this.isConnected = false;
    this.connectionRetries = 0;
    this.callbackQueue = [];
    this.responseHandlers.clear();
    Logger.debug('üîÑ –ó\'—î–¥–Ω–∞–Ω–Ω—è –∑ SketchUp —Å–∫–∏–Ω—É—Ç–æ', 'info');
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –º–µ—Ç–æ–¥—É
  isMethodAvailable(methodName) {
    return this.isBridgeConnected() && typeof window.sketchup[methodName] === 'function';
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º–µ—Ç–æ–¥—ñ–≤
  getAvailableMethods() {
    if (!this.isBridgeConnected()) return [];
    
    return Object.getOwnPropertyNames(window.sketchup)
      .filter(prop => typeof window.sketchup[prop] === 'function');
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä
const sketchUpBridge = new SketchUpBridge();

// –ï–∫—Å–ø–æ—Ä—Ç –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
export function initializeSketchUpBridge() {
  return sketchUpBridge.initialize();
}

export function isSketchUpConnected() {
  return sketchUpBridge.isBridgeConnected();
}

export function callSketchUpMethod(methodName, ...args) {
  return sketchUpBridge.callSketchUpMethod(methodName, ...args);
}

export function getModels(modelType) {
  return sketchUpBridge.getModels(modelType);
}

export function createFoundation(depth, width, height) {
  return sketchUpBridge.createFoundation(depth, width, height);
}

export function createUniformBlindArea(width, thickness) {
  return sketchUpBridge.createUniformBlindArea(width, thickness);
}

export function createCustomBlindArea(north, south, east, west, thickness) {
  return sketchUpBridge.createCustomBlindArea(north, south, east, west, thickness);
}

export function createUniformTiling(width, thickness) {
  return sketchUpBridge.createUniformTiling(width, thickness);
}

export function createCustomTiling(north, south, east, west, thickness) {
  return sketchUpBridge.createCustomTiling(north, south, east, west, thickness);
}

export function createUniformCladding(width, thickness, height) {
  return sketchUpBridge.createUniformCladding(width, thickness, height);
}

export function createCustomCladding(north, south, east, west, thickness, height) {
  return sketchUpBridge.createCustomCladding(north, south, east, west, thickness, height);
}

export function addStand(modelIndex) {
  return sketchUpBridge.addStand(modelIndex);
}

export function addStele(modelIndex) {
  return sketchUpBridge.addStele(modelIndex);
}

export function addFlowerbed(modelIndex) {
  return sketchUpBridge.addFlowerbed(modelIndex);
}

export function getConnectionStatus() {
  return sketchUpBridge.getConnectionStatus();
}

export function resetSketchUpBridge() {
  return sketchUpBridge.reset();
}

export function isMethodAvailable(methodName) {
  return sketchUpBridge.isMethodAvailable(methodName);
}

export function getAvailableMethods() {
  return sketchUpBridge.getAvailableMethods();
}
