// proGran3/web/src/modules/communication/Callbacks.js
// –ú–æ–¥—É–ª—å –æ–±—Ä–æ–±–∫–∏ –∑–≤–æ—Ä–æ—Ç–Ω–∏—Ö –≤–∏–∫–ª–∏–∫—ñ–≤ –¥–ª—è ProGran3

import { Logger } from '../utils/Logger.js';

export class CallbackManager {
  constructor() {
    this.callbacks = new Map();
    this.eventListeners = new Map();
    this.asyncCallbacks = new Map();
    this.callbackHistory = [];
    this.maxHistorySize = 100;
  }

  // –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
  registerCallback(callbackName, callbackFunction) {
    Logger.debug(`üìù –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É: ${callbackName}`, 'info');
    
    if (typeof callbackFunction !== 'function') {
      Logger.debug(`‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–∏–ø –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É –¥–ª—è ${callbackName}`, 'error');
      return false;
    }

    this.callbacks.set(callbackName, callbackFunction);
    Logger.debug(`‚úÖ –ó–≤–æ—Ä–æ—Ç–Ω–∏–π –≤–∏–∫–ª–∏–∫ ${callbackName} –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ`, 'success');
    return true;
  }

  // –í–∏–∫–ª–∏–∫ –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
  invokeCallback(callbackName, ...args) {
    Logger.debug(`üîÑ –í–∏–∫–ª–∏–∫ –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É: ${callbackName}(${args.join(', ')})`, 'info');
    
    const callback = this.callbacks.get(callbackName);
    if (!callback) {
      Logger.debug(`‚ùå –ó–≤–æ—Ä–æ—Ç–Ω–∏–π –≤–∏–∫–ª–∏–∫ ${callbackName} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`, 'error');
      return false;
    }

    try {
      const result = callback.apply(null, args);
      this.logCallbackExecution(callbackName, args, result);
      Logger.debug(`‚úÖ –ó–≤–æ—Ä–æ—Ç–Ω–∏–π –≤–∏–∫–ª–∏–∫ ${callbackName} –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ`, 'success');
      return result;
    } catch (error) {
      Logger.debug(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É ${callbackName}: ${error.message}`, 'error');
      this.logCallbackError(callbackName, args, error);
      return false;
    }
  }

  // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –∑–≤–æ—Ä–æ—Ç–Ω–∏–π –≤–∏–∫–ª–∏–∫
  async invokeAsyncCallback(callbackName, ...args) {
    Logger.debug(`‚è≥ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –≤–∏–∫–ª–∏–∫: ${callbackName}(${args.join(', ')})`, 'info');
    
    const callback = this.callbacks.get(callbackName);
    if (!callback) {
      Logger.debug(`‚ùå –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –∑–≤–æ—Ä–æ—Ç–Ω–∏–π –≤–∏–∫–ª–∏–∫ ${callbackName} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`, 'error');
      return false;
    }

    try {
      const result = await callback.apply(null, args);
      this.logCallbackExecution(callbackName, args, result);
      Logger.debug(`‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –∑–≤–æ—Ä–æ—Ç–Ω–∏–π –≤–∏–∫–ª–∏–∫ ${callbackName} –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ`, 'success');
      return result;
    } catch (error) {
      Logger.debug(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É ${callbackName}: ${error.message}`, 'error');
      this.logCallbackError(callbackName, args, error);
      return false;
    }
  }

  // –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
  unregisterCallback(callbackName) {
    Logger.debug(`üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É: ${callbackName}`, 'info');
    
    const removed = this.callbacks.delete(callbackName);
    if (removed) {
      Logger.debug(`‚úÖ –ó–≤–æ—Ä–æ—Ç–Ω–∏–π –≤–∏–∫–ª–∏–∫ ${callbackName} –≤–∏–¥–∞–ª–µ–Ω–æ`, 'success');
    } else {
      Logger.debug(`‚ö†Ô∏è –ó–≤–æ—Ä–æ—Ç–Ω–∏–π –≤–∏–∫–ª–∏–∫ ${callbackName} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è`, 'warning');
    }
    
    return removed;
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
  hasCallback(callbackName) {
    return this.callbacks.has(callbackName);
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
  getCallback(callbackName) {
    return this.callbacks.get(callbackName);
  }

  // –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –ø–æ–¥—ñ–π
  addEventListener(eventName, handler) {
    Logger.debug(`üëÇ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –ø–æ–¥—ñ—ó: ${eventName}`, 'info');
    
    if (!this.eventListeners.has(eventName)) {
      this.eventListeners.set(eventName, []);
    }
    
    this.eventListeners.get(eventName).push(handler);
    Logger.debug(`‚úÖ –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó ${eventName} –¥–æ–¥–∞–Ω–æ`, 'success');
  }

  // –í–∏–¥–∞–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –ø–æ–¥—ñ–π
  removeEventListener(eventName, handler) {
    Logger.debug(`üëÇ –í–∏–¥–∞–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –ø–æ–¥—ñ—ó: ${eventName}`, 'info');
    
    const handlers = this.eventListeners.get(eventName);
    if (!handlers) {
      Logger.debug(`‚ö†Ô∏è –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ—ó ${eventName} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`, 'warning');
      return false;
    }
    
    const index = handlers.indexOf(handler);
    if (index > -1) {
      handlers.splice(index, 1);
      Logger.debug(`‚úÖ –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó ${eventName} –≤–∏–¥–∞–ª–µ–Ω–æ`, 'success');
      return true;
    }
    
    Logger.debug(`‚ö†Ô∏è –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó ${eventName} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`, 'warning');
    return false;
  }

  // –í–∏–∫–ª–∏–∫ –ø–æ–¥—ñ—ó
  dispatchEvent(eventName, eventData = {}) {
    Logger.debug(`üì¢ –í–∏–∫–ª–∏–∫ –ø–æ–¥—ñ—ó: ${eventName}`, 'info');
    
    const handlers = this.eventListeners.get(eventName);
    if (!handlers || handlers.length === 0) {
      Logger.debug(`‚ö†Ô∏è –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ—ó ${eventName} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`, 'warning');
      return false;
    }
    
    let successCount = 0;
    handlers.forEach((handler, index) => {
      try {
        handler(eventData);
        successCount++;
      } catch (error) {
        Logger.debug(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–Ω–∏–∫–∞ –ø–æ–¥—ñ—ó ${eventName}[${index}]: ${error.message}`, 'error');
      }
    });
    
    Logger.debug(`‚úÖ –ü–æ–¥—ñ—è ${eventName} –æ–±—Ä–æ–±–ª–µ–Ω–∞ (${successCount}/${handlers.length} —É—Å–ø—ñ—à–Ω–æ)`, 'success');
    return successCount > 0;
  }

  // –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
  registerAsyncCallback(callbackName, asyncFunction) {
    Logger.debug(`‚è≥ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É: ${callbackName}`, 'info');
    
    if (typeof asyncFunction !== 'function') {
      Logger.debug(`‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–∏–ø –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É –¥–ª—è ${callbackName}`, 'error');
      return false;
    }

    this.asyncCallbacks.set(callbackName, asyncFunction);
    Logger.debug(`‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –∑–≤–æ—Ä–æ—Ç–Ω–∏–π –≤–∏–∫–ª–∏–∫ ${callbackName} –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ`, 'success');
    return true;
  }

  // –í–∏–∫–ª–∏–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
  async invokeAsyncCallbackByName(callbackName, ...args) {
    Logger.debug(`‚è≥ –í–∏–∫–ª–∏–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É: ${callbackName}`, 'info');
    
    const callback = this.asyncCallbacks.get(callbackName);
    if (!callback) {
      Logger.debug(`‚ùå –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –∑–≤–æ—Ä–æ—Ç–Ω–∏–π –≤–∏–∫–ª–∏–∫ ${callbackName} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`, 'error');
      return false;
    }

    try {
      const result = await callback.apply(null, args);
      this.logCallbackExecution(callbackName, args, result);
      Logger.debug(`‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –∑–≤–æ—Ä–æ—Ç–Ω–∏–π –≤–∏–∫–ª–∏–∫ ${callbackName} –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ`, 'success');
      return result;
    } catch (error) {
      Logger.debug(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É ${callbackName}: ${error.message}`, 'error');
      this.logCallbackError(callbackName, args, error);
      return false;
    }
  }

  // –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
  logCallbackExecution(callbackName, args, result) {
    const logEntry = {
      timestamp: new Date().toISOString(),
      callbackName,
      args,
      result,
      type: 'success'
    };
    
    this.callbackHistory.push(logEntry);
    this.trimHistory();
  }

  // –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏ –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
  logCallbackError(callbackName, args, error) {
    const logEntry = {
      timestamp: new Date().toISOString(),
      callbackName,
      args,
      error: error.message,
      type: 'error'
    };
    
    this.callbackHistory.push(logEntry);
    this.trimHistory();
  }

  // –û–±—Ä—ñ–∑–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É
  trimHistory() {
    if (this.callbackHistory.length > this.maxHistorySize) {
      this.callbackHistory = this.callbackHistory.slice(-this.maxHistorySize);
    }
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –∑–≤–æ—Ä–æ—Ç–Ω–∏—Ö –≤–∏–∫–ª–∏–∫—ñ–≤
  getCallbackHistory(limit = 10) {
    return this.callbackHistory.slice(-limit);
  }

  // –û—á–∏—â–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó
  clearCallbackHistory() {
    this.callbackHistory = [];
    Logger.debug('üóëÔ∏è –Ü—Å—Ç–æ—Ä—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–∏—Ö –≤–∏–∫–ª–∏–∫—ñ–≤ –æ—á–∏—â–µ–Ω–∞', 'info');
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  getCallbackStats() {
    return {
      totalCallbacks: this.callbacks.size,
      totalAsyncCallbacks: this.asyncCallbacks.size,
      totalEventListeners: Array.from(this.eventListeners.values()).reduce((sum, handlers) => sum + handlers.length, 0),
      historySize: this.callbackHistory.length,
      registeredEvents: Array.from(this.eventListeners.keys())
    };
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –≤—Å—ñ—Ö –∑–≤–æ—Ä–æ—Ç–Ω–∏—Ö –≤–∏–∫–ª–∏–∫—ñ–≤
  getAllCallbacks() {
    return Array.from(this.callbacks.keys());
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –≤—Å—ñ—Ö –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏—Ö –∑–≤–æ—Ä–æ—Ç–Ω–∏—Ö –≤–∏–∫–ª–∏–∫—ñ–≤
  getAllAsyncCallbacks() {
    return Array.from(this.asyncCallbacks.keys());
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –≤—Å—ñ—Ö –ø–æ–¥—ñ–π
  getAllEvents() {
    return Array.from(this.eventListeners.keys());
  }

  // –ú–∞—Å–æ–≤–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–≤–æ—Ä–æ—Ç–Ω–∏—Ö –≤–∏–∫–ª–∏–∫—ñ–≤
  invokeMultipleCallbacks(callbackNames, ...args) {
    Logger.debug(`üîÑ –ú–∞—Å–æ–≤–∏–π –≤–∏–∫–ª–∏–∫ –∑–≤–æ—Ä–æ—Ç–Ω–∏—Ö –≤–∏–∫–ª–∏–∫—ñ–≤: ${callbackNames.join(', ')}`, 'info');
    
    const results = {};
    let successCount = 0;
    
    callbackNames.forEach(callbackName => {
      try {
        const result = this.invokeCallback(callbackName, ...args);
        results[callbackName] = result;
        if (result !== false) successCount++;
      } catch (error) {
        results[callbackName] = false;
        Logger.debug(`‚ùå –ü–æ–º–∏–ª–∫–∞ –º–∞—Å–æ–≤–æ–≥–æ –≤–∏–∫–ª–∏–∫—É ${callbackName}: ${error.message}`, 'error');
      }
    });
    
    Logger.debug(`‚úÖ –ú–∞—Å–æ–≤–∏–π –≤–∏–∫–ª–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ (${successCount}/${callbackNames.length} —É—Å–ø—ñ—à–Ω–æ)`, 'success');
    return results;
  }

  // –°–∫–∏–¥–∞–Ω–Ω—è –≤—Å—ñ—Ö –∑–≤–æ—Ä–æ—Ç–Ω–∏—Ö –≤–∏–∫–ª–∏–∫—ñ–≤
  reset() {
    this.callbacks.clear();
    this.asyncCallbacks.clear();
    this.eventListeners.clear();
    this.callbackHistory = [];
    Logger.debug('üîÑ –í—Å—ñ –∑–≤–æ—Ä–æ—Ç–Ω—ñ –≤–∏–∫–ª–∏–∫–∏ —Å–∫–∏–Ω—É—Ç–æ', 'info');
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä
const callbackManager = new CallbackManager();

// –ï–∫—Å–ø–æ—Ä—Ç –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
export function registerCallback(callbackName, callbackFunction) {
  return callbackManager.registerCallback(callbackName, callbackFunction);
}

export function invokeCallback(callbackName, ...args) {
  return callbackManager.invokeCallback(callbackName, ...args);
}

export function invokeAsyncCallback(callbackName, ...args) {
  return callbackManager.invokeAsyncCallback(callbackName, ...args);
}

export function unregisterCallback(callbackName) {
  return callbackManager.unregisterCallback(callbackName);
}

export function hasCallback(callbackName) {
  return callbackManager.hasCallback(callbackName);
}

export function getCallback(callbackName) {
  return callbackManager.getCallback(callbackName);
}

export function addEventListener(eventName, handler) {
  return callbackManager.addEventListener(eventName, handler);
}

export function removeEventListener(eventName, handler) {
  return callbackManager.removeEventListener(eventName, handler);
}

export function dispatchEvent(eventName, eventData) {
  return callbackManager.dispatchEvent(eventName, eventData);
}

export function registerAsyncCallback(callbackName, asyncFunction) {
  return callbackManager.registerAsyncCallback(callbackName, asyncFunction);
}

export function invokeAsyncCallbackByName(callbackName, ...args) {
  return callbackManager.invokeAsyncCallbackByName(callbackName, ...args);
}

export function getCallbackHistory(limit) {
  return callbackManager.getCallbackHistory(limit);
}

export function clearCallbackHistory() {
  return callbackManager.clearCallbackHistory();
}

export function getCallbackStats() {
  return callbackManager.getCallbackStats();
}

export function getAllCallbacks() {
  return callbackManager.getAllCallbacks();
}

export function getAllAsyncCallbacks() {
  return callbackManager.getAllAsyncCallbacks();
}

export function getAllEvents() {
  return callbackManager.getAllEvents();
}

export function invokeMultipleCallbacks(callbackNames, ...args) {
  return callbackManager.invokeMultipleCallbacks(callbackNames, ...args);
}

export function resetCallbacks() {
  return callbackManager.reset();
}
