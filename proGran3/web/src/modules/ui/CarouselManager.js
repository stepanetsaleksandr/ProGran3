// proGran3/web/src/modules/ui/CarouselManager.js
// –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–∞—Ä—É—Å–µ–ª–ª—é –¥–ª—è ProGran3

import { Logger } from '../utils/Logger.js';

export class CarouselManager {
  constructor() {
    this.carouselState = window.carouselState || {
      stands: { index: 0 },
      steles: { index: 0 },
      flowerbeds: { index: 0 }
    };
    this.modelLists = window.modelLists || {};
  }

  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–∞—Ä—É—Å–µ–ª—ñ
  initializeCarousel(carouselType) {
    Logger.debug(`üé† –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–∞—Ä—É—Å–µ–ª—ñ: ${carouselType}`, 'info');
    
    try {
      const carouselContainer = document.getElementById(`${carouselType}-carousel`);
      if (!carouselContainer) {
        Logger.debug(`‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—É—Å–µ–ª—ñ ${carouselType} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`, 'error');
        return false;
      }

      // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –º–æ–¥–µ–ª—ñ –¥–ª—è –¥–∞–Ω–æ–≥–æ —Ç–∏–ø—É
      this.loadModelsForCarousel(carouselType);
      
      // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
      this.updateCarouselDisplay(carouselType);
      
      Logger.debug(`‚úÖ –ö–∞—Ä—É—Å–µ–ª—å ${carouselType} —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞`, 'success');
      return true;
      
    } catch (error) {
      Logger.debug(`‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∫–∞—Ä—É—Å–µ–ª—ñ ${carouselType}: ${error.message}`, 'error');
      return false;
    }
  }

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª–µ–π –¥–ª—è –∫–∞—Ä—É—Å–µ–ª—ñ
  loadModelsForCarousel(carouselType) {
    Logger.debug(`üì¶ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª–µ–π –¥–ª—è ${carouselType}`, 'info');
    
    if (window.sketchup && window.sketchup.get_models) {
      try {
        const models = window.sketchup.get_models(carouselType);
        this.modelLists[carouselType] = models || [];
        Logger.debug(`üìã –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${this.modelLists[carouselType].length} –º–æ–¥–µ–ª–µ–π –¥–ª—è ${carouselType}`, 'success');
      } catch (error) {
        Logger.debug(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª–µ–π ${carouselType}: ${error.message}`, 'error');
        this.modelLists[carouselType] = [];
      }
    } else {
      Logger.debug(`‚ö†Ô∏è window.sketchup.get_models –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è ${carouselType}`, 'info');
      this.modelLists[carouselType] = [];
    }
  }

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–∞—Ä—É—Å–µ–ª—ñ
  updateCarouselDisplay(carouselType) {
    const carouselContainer = document.getElementById(`${carouselType}-carousel`);
    if (!carouselContainer) return;

    const models = this.modelLists[carouselType] || [];
    const currentIndex = this.carouselState[carouselType]?.index || 0;
    
    if (models.length === 0) {
      carouselContainer.innerHTML = '<div class="no-models">–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π</div>';
      return;
    }

    const currentModel = models[currentIndex];
    if (!currentModel) return;

    // –û–Ω–æ–≤–ª—é—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    const imageElement = carouselContainer.querySelector('.carousel-image');
    if (imageElement) {
      imageElement.src = currentModel.image || '';
      imageElement.alt = currentModel.name || '–ú–æ–¥–µ–ª—å';
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ –Ω–∞–∑–≤—É
    const nameElement = carouselContainer.querySelector('.carousel-name');
    if (nameElement) {
      nameElement.textContent = currentModel.name || '–ë–µ–∑ –Ω–∞–∑–≤–∏';
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ —Ä–æ–∑–º—ñ—Ä–∏
    const dimensionsElement = carouselContainer.querySelector('.carousel-dimensions');
    if (dimensionsElement) {
      dimensionsElement.textContent = currentModel.dimensions || '';
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é
    this.updateCarouselNavigation(carouselType, models.length, currentIndex);
    
    Logger.debug(`üîÑ –ö–∞—Ä—É—Å–µ–ª—å ${carouselType} –æ–Ω–æ–≤–ª–µ–Ω–∞ (${currentIndex + 1}/${models.length})`, 'info');
  }

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –∫–∞—Ä—É—Å–µ–ª—ñ
  updateCarouselNavigation(carouselType, totalModels, currentIndex) {
    const prevButton = document.getElementById(`${carouselType}-prev`);
    const nextButton = document.getElementById(`${carouselType}-next`);
    const counterElement = document.getElementById(`${carouselType}-counter`);

    if (prevButton) {
      prevButton.disabled = currentIndex === 0;
      prevButton.style.opacity = currentIndex === 0 ? '0.5' : '1';
    }

    if (nextButton) {
      nextButton.disabled = currentIndex === totalModels - 1;
      nextButton.style.opacity = currentIndex === totalModels - 1 ? '0.5' : '1';
    }

    if (counterElement) {
      counterElement.textContent = `${currentIndex + 1} / ${totalModels}`;
    }
  }

  // –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –º–æ–¥–µ–ª—ñ
  nextModel(carouselType) {
    const models = this.modelLists[carouselType] || [];
    const currentIndex = this.carouselState[carouselType]?.index || 0;
    
    if (currentIndex < models.length - 1) {
      this.carouselState[carouselType].index = currentIndex + 1;
      this.updateCarouselDisplay(carouselType);
      Logger.debug(`‚û°Ô∏è –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –º–æ–¥–µ–ª—ñ ${carouselType}: ${currentIndex + 1}`, 'info');
      return true;
    }
    
    Logger.debug(`‚ö†Ô∏è –î–æ—Å—è–≥–Ω—É—Ç–æ –∫—ñ–Ω–µ—Ü—å –∫–∞—Ä—É—Å–µ–ª—ñ ${carouselType}`, 'info');
    return false;
  }

  // –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –º–æ–¥–µ–ª—ñ
  prevModel(carouselType) {
    const currentIndex = this.carouselState[carouselType]?.index || 0;
    
    if (currentIndex > 0) {
      this.carouselState[carouselType].index = currentIndex - 1;
      this.updateCarouselDisplay(carouselType);
      Logger.debug(`‚¨ÖÔ∏è –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –º–æ–¥–µ–ª—ñ ${carouselType}: ${currentIndex - 1}`, 'info');
      return true;
    }
    
    Logger.debug(`‚ö†Ô∏è –î–æ—Å—è–≥–Ω—É—Ç–æ –ø–æ—á–∞—Ç–æ–∫ –∫–∞—Ä—É—Å–µ–ª—ñ ${carouselType}`, 'info');
    return false;
  }

  // –í–∏–±—ñ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –º–æ–¥–µ–ª—ñ
  selectModel(carouselType, index) {
    const models = this.modelLists[carouselType] || [];
    
    if (index >= 0 && index < models.length) {
      this.carouselState[carouselType].index = index;
      this.updateCarouselDisplay(carouselType);
      Logger.debug(`üéØ –í–∏–±—Ä–∞–Ω–æ –º–æ–¥–µ–ª—å ${carouselType} –∑ —ñ–Ω–¥–µ–∫—Å–æ–º ${index}`, 'info');
      return true;
    }
    
    Logger.debug(`‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –º–æ–¥–µ–ª—ñ ${carouselType}: ${index}`, 'error');
    return false;
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –º–æ–¥–µ–ª—ñ
  getCurrentModel(carouselType) {
    const models = this.modelLists[carouselType] || [];
    const currentIndex = this.carouselState[carouselType]?.index || 0;
    
    return models[currentIndex] || null;
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —ñ–Ω–¥–µ–∫—Å—É
  getCurrentIndex(carouselType) {
    return this.carouselState[carouselType]?.index || 0;
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –º–æ–¥–µ–ª–µ–π
  getModelCount(carouselType) {
    return (this.modelLists[carouselType] || []).length;
  }

  // –°–∫–∏–¥–∞–Ω–Ω—è –∫–∞—Ä—É—Å–µ–ª—ñ
  resetCarousel(carouselType) {
    this.carouselState[carouselType] = { index: 0 };
    this.updateCarouselDisplay(carouselType);
    Logger.debug(`üîÑ –ö–∞—Ä—É—Å–µ–ª—å ${carouselType} —Å–∫–∏–Ω—É—Ç–∞`, 'info');
  }

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –∫–∞—Ä—É—Å–µ–ª–µ–π –≤ –∞–∫—Ç–∏–≤–Ω—ñ–π –≤–∫–ª–∞–¥—Ü—ñ
  updateCarouselsInActiveTab() {
    const activeTab = window.activeTab || 'base';
    Logger.debug(`üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞—Ä—É—Å–µ–ª–µ–π –≤ –∞–∫—Ç–∏–≤–Ω—ñ–π –≤–∫–ª–∞–¥—Ü—ñ: ${activeTab}`, 'info');
    
    const carouselTypes = this.getCarouselTypesForTab(activeTab);
    carouselTypes.forEach(type => {
      this.updateCarouselDisplay(type);
    });
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–∏–ø—ñ–≤ –∫–∞—Ä—É—Å–µ–ª–µ–π –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
  getCarouselTypesForTab(tabName) {
    const tabCarousels = {
      'base': ['stands', 'flowerbeds'],
      'elements': ['steles'],
      'finishing': []
    };
    
    return tabCarousels[tabName] || [];
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–∞—Ä—É—Å–µ–ª—å –≤–∏–¥–∏–º–∞
  isCarouselVisible(carouselType) {
    const carouselElement = document.getElementById(`${carouselType}-carousel`);
    if (!carouselElement) return false;
    
    const style = window.getComputedStyle(carouselElement);
    return style.display !== 'none' && style.visibility !== 'hidden';
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø–æ—Ç–æ—á–Ω—É –º–æ–¥–µ–ª—å
  getCurrentModelInfo(carouselType) {
    const model = this.getCurrentModel(carouselType);
    if (!model) return '--';
    
    return {
      name: model.name || '–ë–µ–∑ –Ω–∞–∑–≤–∏',
      dimensions: model.dimensions || '',
      image: model.image || '',
      index: this.getCurrentIndex(carouselType),
      total: this.getModelCount(carouselType)
    };
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä
const carouselManager = new CarouselManager();

// –ï–∫—Å–ø–æ—Ä—Ç –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
export function initializeCarousel(carouselType) {
  return carouselManager.initializeCarousel(carouselType);
}

export function nextModel(carouselType) {
  return carouselManager.nextModel(carouselType);
}

export function prevModel(carouselType) {
  return carouselManager.prevModel(carouselType);
}

export function selectModel(carouselType, index) {
  return carouselManager.selectModel(carouselType, index);
}

export function getCurrentModel(carouselType) {
  return carouselManager.getCurrentModel(carouselType);
}

export function getCurrentIndex(carouselType) {
  return carouselManager.getCurrentIndex(carouselType);
}

export function getModelCount(carouselType) {
  return carouselManager.getModelCount(carouselType);
}

export function resetCarousel(carouselType) {
  return carouselManager.resetCarousel(carouselType);
}

export function updateCarouselsInActiveTab() {
  return carouselManager.updateCarouselsInActiveTab();
}

export function getCurrentModelInfo(carouselType) {
  return carouselManager.getCurrentModelInfo(carouselType);
}
