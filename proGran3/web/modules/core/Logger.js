// modules/core/Logger.js
// –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è ProGran3

(function(global) {
  'use strict';
  
  // –°—Ç–≤–æ—Ä—é—î–º–æ namespace
  global.ProGran3 = global.ProGran3 || {};
  global.ProGran3.Core = global.ProGran3.Core || {};
  
  // –ü—Ä–∏–≤–∞—Ç–Ω—ñ –∑–º—ñ–Ω–Ω—ñ (—ñ–Ω–∫–∞–ø—Å—É–ª—è—Ü—ñ—è)
  let logLevel = 'info';
  let logHistory = [];
  let maxHistorySize = 100;
  
  // –†—ñ–≤–Ω—ñ –ª–æ–≥—É–≤–∞–Ω–Ω—è
  const LOG_LEVELS = {
    debug: 0,
    info: 1,
    warn: 2,
    error: 3,
    fatal: 4
  };
  
  // –Ü–∫–æ–Ω–∫–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ä—ñ–≤–Ω—ñ–≤
  const ICONS = {
    debug: 'üîç',
    info: '‚ÑπÔ∏è',
    warn: '‚ö†Ô∏è',
    error: '‚ùå',
    fatal: 'üí•'
  };
  
  // –ü—Ä–∏–≤–∞—Ç–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
  function shouldLog(level) {
    return LOG_LEVELS[level] >= LOG_LEVELS[logLevel];
  }
  
  function formatMessage(message, type, context) {
    const timestamp = new Date().toLocaleTimeString();
    const icon = ICONS[type] || 'üìù';
    const contextStr = context ? `[${context}] ` : '';
    return `[${timestamp}] ${icon} ${contextStr}${message}`;
  }
  
  function addToHistory(formattedMessage) {
    logHistory.push(formattedMessage);
    if (logHistory.length > maxHistorySize) {
      logHistory.shift(); // –í–∏–¥–∞–ª—è—î–º–æ –Ω–∞–π—Å—Ç–∞—Ä—ñ—à–∏–π –∑–∞–ø–∏—Å
    }
  }
  
  function updateDebugLogElement(formattedMessage, type) {
    const debugLogElement = document.getElementById('debug-log');
    if (!debugLogElement) return;
    
    const logEntry = document.createElement('div');
    logEntry.className = `log-entry log-${type}`;
    logEntry.textContent = formattedMessage;
    debugLogElement.appendChild(logEntry);
    debugLogElement.scrollTop = debugLogElement.scrollHeight;
    
    // –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤ –≤ UI
    while (debugLogElement.children.length > 50) {
      debugLogElement.removeChild(debugLogElement.firstChild);
    }
  }
  
  // –ü—É–±–ª—ñ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
  function debugLog(message, type = 'info', context = null) {
    if (!shouldLog(type)) return;
    
    const formattedMessage = formatMessage(message, type, context);
    
    // –î–æ–¥–∞—î–º–æ –≤ —ñ—Å—Ç–æ—Ä—ñ—é
    addToHistory(formattedMessage);
    
    // –í–∏–≤–æ–¥–∏–º–æ –≤ –∫–æ–Ω—Å–æ–ª—å
    console.log(formattedMessage);
    
    // –í–∏–≤–æ–¥–∏–º–æ –≤ UI
    updateDebugLogElement(formattedMessage, type);
  }
  
  function clearDebugLog() {
    logHistory = [];
    const debugLogElement = document.getElementById('debug-log');
    if (debugLogElement) {
      debugLogElement.innerHTML = '<div>üîç –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–≤...</div>';
    }
  }
  
  function setLogLevel(level) {
    if (LOG_LEVELS.hasOwnProperty(level)) {
      logLevel = level;
      debugLog(`–†—ñ–≤–µ–Ω—å –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: ${level}`, 'info', 'Logger');
    } else {
      debugLog(`–ù–µ–≤—ñ—Ä–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –ª–æ–≥—É–≤–∞–Ω–Ω—è: ${level}`, 'error', 'Logger');
    }
  }
  
  function getLogLevel() {
    return logLevel;
  }
  
  function getLogHistory() {
    return [...logHistory]; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ–ø—ñ—é
  }
  
  function getLogStats() {
    const stats = {
      total: logHistory.length,
      byLevel: {}
    };
    
    Object.keys(LOG_LEVELS).forEach(level => {
      stats.byLevel[level] = 0;
    });
    
    logHistory.forEach(entry => {
      Object.keys(ICONS).forEach(level => {
        if (entry.includes(ICONS[level])) {
          stats.byLevel[level]++;
        }
      });
    });
    
    return stats;
  }
  
  // –ï–∫—Å–ø–æ—Ä—Ç –ø—É–±–ª—ñ—á–Ω–æ–≥–æ API
  global.ProGran3.Core.Logger = {
    debugLog: debugLog,
    clearDebugLog: clearDebugLog,
    setLogLevel: setLogLevel,
    getLogLevel: getLogLevel,
    getLogHistory: getLogHistory,
    getLogStats: getLogStats,
    LOG_LEVELS: LOG_LEVELS
  };
  
  // –ó–≤–æ—Ä–æ—Ç–Ω–∞ —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å - —Ñ—É–Ω–∫—Ü—ñ—ó –¥–æ—Å—Ç—É–ø–Ω—ñ –≥–ª–æ–±–∞–ª—å–Ω–æ
  global.debugLog = debugLog;
  global.clearDebugLog = clearDebugLog;
  
  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
  debugLog('Logger –º–æ–¥—É–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ', 'info', 'Logger');
  
})(window);
