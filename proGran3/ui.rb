# progran3/ui.rb
require 'json'

module ProGran3
  module UI
    extend self

    def show_dialog
      html_path = File.join(File.dirname(__FILE__), "web", "index.html")
      categories = {
        stands: Dir.glob(File.join(ProGran3::ASSETS_PATH, "stands", "*.skp")).map { |f| File.basename(f) },
        steles: Dir.glob(File.join(ProGran3::ASSETS_PATH, "steles", "*.skp")).map { |f| File.basename(f) },
        flowerbeds: Dir.glob(File.join(ProGran3::ASSETS_PATH, "flowerbeds", "*.skp")).map { |f| File.basename(f) },
        gravestones: Dir.glob(File.join(ProGran3::ASSETS_PATH, "gravestones", "*.skp")).map { |f| File.basename(f) },
        pavement_tiles: Dir.glob(File.join(ProGran3::ASSETS_PATH, "pavement_tiles", "*.skp")).map { |f| File.basename(f) },
      }

      if @dialog && @dialog.visible?
        @dialog.close
        @dialog = nil
      end
      
      @dialog ||= ::UI::HtmlDialog.new({
          :dialog_title => "proGran –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä",
          :preferences_key => "com.progran.ui",
          :scrollable => true,
          :resizable => true,
          :width => 420,
          :height => 850,
          :min_width => 350,
          :min_height => 600
      })

      @dialog.set_file(html_path)

      @dialog.add_action_callback("ready") do |d, _|
        @dialog.execute_script("loadModelLists(#{categories.to_json});")
      end

      # Callback'–∏ –¥–ª—è JavaScript
      @dialog.add_action_callback("add_foundation") do |dialog, depth, width, height|
        ProGran3::FoundationBuilder.create(depth.to_i, width.to_i, height.to_i)
      end

      @dialog.add_action_callback("add_tiles") do |dialog, type, *params|
        if type == "frame"
          thickness, borderWidth, overhang = params.map(&:to_i)
          ProGran3::TilingBuilder.insert_perimeter_tiles(thickness, borderWidth, overhang)
        elsif type == "modular"
          tileSize, thickness, seam, overhang = params
          thickness, seam, overhang = [thickness, seam, overhang].map(&:to_i)
          ProGran3::TilingBuilder.insert_modular_tiles(tileSize, thickness, seam, overhang)
        end
      end
      
      @dialog.add_action_callback("add_side_cladding") do |dialog, thickness|
        ProGran3::CladdingBuilder.create(thickness.to_i)
      end

      @dialog.add_action_callback("add_model") do |dialog, category, filename|
        ProGran3.insert_component(category, filename)
      end

      # –°—Ç–∞—Ä—ñ callback'–∏ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
      @dialog.add_action_callback("insert_foundation") do |dialog, params_json|
        params = JSON.parse(params_json)
        ProGran3::FoundationBuilder.create(params["depth"], params["width"], params["height"])
      end

      @dialog.add_action_callback("insert_component") do |dialog, params|
        category, filename = params.split("|")
        ProGran3.insert_component(category, filename)
      end

      @dialog.add_action_callback("insert_tiles") do |dialog, params_json|
        params = JSON.parse(params_json)
        if params["type"] == "frame"
          ProGran3::TilingBuilder.insert_perimeter_tiles(params["thickness"], params["borderWidth"], params["overhang"])
        elsif params["type"] == "modular"
          ProGran3::TilingBuilder.insert_modular_tiles(params["tileSize"], params["thickness"], params["seam"], params["overhang"])
        end
      end
      
      @dialog.add_action_callback("insert_side_cladding") do |dialog, params_json|
        params = JSON.parse(params_json)
        ProGran3::CladdingBuilder.create(params["thickness"])
      end

      @dialog.add_action_callback("reload_plugin") do |dialog, _|
        dialog.close
        ProGran3.reload
        ProGran3::UI.show_dialog
      end

      # Callback –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π (—É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞ –∑ .skp —Ñ–∞–π–ª—ñ–≤)

      @dialog.add_action_callback("generate_preview_image") do |dialog, component_path|
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –µ–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –¥–ª—è .skp —Ñ–∞–π–ª—ñ–≤
        result = ProGran3.extract_skp_preview(component_path)
        puts "‚úÖ –ü—Ä–µ–≤—å—é –≤–∏—Ç—è–≥–Ω—É—Ç–æ: #{result}" if result
      end

      @dialog.add_action_callback("generate_web_preview") do |dialog, component_path|
        puts "üîç generate_web_preview callback –≤–∏–∫–ª–∏–∫–∞–Ω–æ –¥–ª—è: #{component_path}"
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è base64
        base64_data = ProGran3.get_preview_base64(component_path, 256)
        
        if base64_data
          puts "‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ base64 –¥–∞–Ω—ñ, –¥–æ–≤–∂–∏–Ω–∞: #{base64_data.length}"
          puts "üîÑ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –¥–∞–Ω—ñ –≤ JavaScript..."
          
          # –ï–∫—Ä–∞–Ω—É—î–º–æ –æ–¥–∏–Ω–∞—Ä–Ω—ñ –ª–∞–ø–∫–∏ –≤ base64_data
          escaped_base64 = base64_data.gsub("'", "\\'")
          
          script = "receiveWebPreview('#{component_path}', '#{escaped_base64}');"
          puts "üìù JavaScript —Å–∫—Ä–∏–ø—Ç: #{script[0..100]}..." if script.length > 100
          
          @dialog.execute_script(script)
          puts "‚úÖ –°–∫—Ä–∏–ø—Ç –≤–∏–∫–æ–Ω–∞–Ω–æ"
        else
          puts "‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–µ–≤—å—é –¥–ª—è: #{component_path}"
          @dialog.execute_script("handlePreviewError('#{component_path}', '–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–µ–≤—å—é');")
        end
      end

      # –†–µ—î—Å—Ç—Ä—É—î–º–æ callback'–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è –∫–∞—Ä—É—Å–µ–ª—ñ
      @carousel_ui = ProGran3::Carousel::CarouselUI.new
      @carousel_ui.register_callbacks(@dialog)
      
      # –î–æ–¥–∞—î–º–æ callback –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è HTML –∫–∞—Ä—É—Å–µ–ª—ñ
      @dialog.add_action_callback("get_carousel_html") do |dialog, carousel_id|
        html = @carousel_ui.get_carousel_html(carousel_id)
        dialog.execute_script("receiveCarouselHtml('#{carousel_id}', `#{html}`);")
      end

      # Callback –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –º–æ–¥–µ–ª—ñ
      @dialog.add_action_callback("get_model_status") do |dialog, _|
        puts "üîç get_model_status callback –≤–∏–∫–ª–∏–∫–∞–Ω–æ"
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –º–æ–¥–µ–ª—å SketchUp
        model = Sketchup.active_model
        status = {
          foundation: false,
          tiling: false,
          cladding: false,
          stands: false,
          flowerbeds: false,
          steles: false
        }
        
        if model
          # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –ø–æ—à—É–∫—É –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
          def check_entities(entities, status)
            entities.each do |entity|
              if entity.is_a?(Sketchup::ComponentInstance)
                definition = entity.definition
                name = definition.name.downcase
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ —ñ–º–µ–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
                if name == 'foundation'
                  status[:foundation] = true
                  puts "‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç (–∫–æ–º–ø–æ–Ω–µ–Ω—Ç): #{name}"
                elsif name.include?('stand') || name.include?('–ø—ñ–¥—Å—Ç–∞–≤–∫–∞') || name.include?('–ø–æ–¥—Å—Ç–∞–≤–∫–∞')
                  status[:stands] = true
                  puts "‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –ø—ñ–¥—Å—Ç–∞–≤–∫—É: #{name}"
                elsif name.include?('flowerbed') || name.include?('–∫–≤—ñ—Ç–Ω–∏–∫') || name.include?('—Ü–≤–µ—Ç–Ω–∏–∫')
                  status[:flowerbeds] = true
                  puts "‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∫–≤—ñ—Ç–Ω–∏–∫: #{name}"
                elsif name.include?('stele') || name.include?('—Å—Ç–µ–ª–∞') || name.include?('—Å—Ç–µ–ª–ª–∞')
                  status[:steles] = true
                  puts "‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —Å—Ç–µ–ª—É: #{name}"
                end
              elsif entity.is_a?(Sketchup::Group)
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≥—Ä—É–ø–∏
                check_entities(entity.entities, status)
                
                # –¢–∞–∫–æ–∂ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ–º'—è –≥—Ä—É–ø–∏
                group_name = entity.name.downcase
                if group_name.include?('tile') || group_name.include?('–ø–ª–∏—Ç–∫–∞')
                  status[:tiling] = true
                  puts "‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –ø–ª–∏—Ç–∫—É (–≥—Ä—É–ø–∞): #{group_name}"
                elsif group_name.include?('cladding') || group_name.include?('–æ–±–ª–∏—Ü—é–≤–∞–Ω–Ω—è')
                  status[:cladding] = true
                  puts "‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –æ–±–ª–∏—Ü—é–≤–∞–Ω–Ω—è (–≥—Ä—É–ø–∞): #{group_name}"
                end
              elsif entity.is_a?(Sketchup::Edge) || entity.is_a?(Sketchup::Face)
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≥–µ–æ–º–µ—Ç—Ä—ñ—é –¥–ª—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç—É, –ø–ª–∏—Ç–∫–∏ —Ç–∞ –æ–±–ª–∏—Ü—é–≤–∞–Ω–Ω—è
                if entity.layer
                  layer_name = entity.layer.name.downcase
                  if layer_name.include?('foundation') || layer_name.include?('—Ñ—É–Ω–¥–∞–º–µ–Ω—Ç')
                    status[:foundation] = true
                    puts "‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç (layer): #{layer_name}"
                  elsif layer_name.include?('tile') || layer_name.include?('–ø–ª–∏—Ç–∫–∞')
                    status[:tiling] = true
                    puts "‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –ø–ª–∏—Ç–∫—É (layer): #{layer_name}"
                  elsif layer_name.include?('cladding') || layer_name.include?('–æ–±–ª–∏—Ü—é–≤–∞–Ω–Ω—è')
                    status[:cladding] = true
                    puts "‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –æ–±–ª–∏—Ü—é–≤–∞–Ω–Ω—è (layer): #{layer_name}"
                  end
                end
              end
            end
          end
          
          # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –º–æ–¥–µ–ª—ñ
          check_entities(model.active_entities, status)
          
          # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç—É, –ø–ª–∏—Ç–∫–∏ —Ç–∞ –æ–±–ª–∏—Ü—é–≤–∞–Ω–Ω—è
          # –®—É–∫–∞—î–º–æ –∑–∞ —Ä–æ–∑–º—ñ—Ä–∞–º–∏ –∞–±–æ —ñ–Ω—à–∏–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
          model.active_entities.each do |entity|
            if entity.is_a?(Sketchup::Group)
              # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≥—Ä—É–ø–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —ó—Ö —Ä–æ–∑–º—ñ—Ä—ñ–≤ –∞–±–æ —ñ–º–µ–Ω—ñ
              bounds = entity.bounds
              if bounds
                width = bounds.width
                height = bounds.height
                depth = bounds.depth
                
                # –§—É–Ω–¥–∞–º–µ–Ω—Ç –∑–∞–∑–≤–∏—á–∞–π –º–∞—î –≤–µ–ª–∏–∫—ñ —Ä–æ–∑–º—ñ—Ä–∏ —ñ –º–∞–ª—É –≤–∏—Å–æ—Ç—É
                if width > 800 && depth > 800 && height < 300
                  status[:foundation] = true
                  puts "‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç (—Ä–æ–∑–º—ñ—Ä–∏): #{width}√ó#{depth}√ó#{height}"
                end
                
                # –ü–ª–∏—Ç–∫–∞ –∑–∞–∑–≤–∏—á–∞–π —Ç–æ–Ω–∫–∞ —ñ —à–∏—Ä–æ–∫–∞
                if height < 100 && width > 400 && depth > 400
                  status[:tiling] = true
                  puts "‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –ø–ª–∏—Ç–∫—É (—Ä–æ–∑–º—ñ—Ä–∏): #{width}√ó#{depth}√ó#{height}"
                end
                
                # –û–±–ª–∏—Ü—é–≤–∞–Ω–Ω—è –∑–∞–∑–≤–∏—á–∞–π –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–µ
                if height > 150 && (width < 200 || depth < 200)
                  status[:cladding] = true
                  puts "‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –æ–±–ª–∏—Ü—é–≤–∞–Ω–Ω—è (—Ä–æ–∑–º—ñ—Ä–∏): #{width}√ó#{depth}√ó#{height}"
                end
              end
            end
          end
        end
        
        puts "üìä –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª—ñ: #{status}"
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å—Ç–∞—Ç—É—Å –≤ JavaScript
        script = "receiveModelStatus(#{status.to_json});"
        @dialog.execute_script(script)
        puts "‚úÖ –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª—ñ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ JavaScript"
      end
      


      @dialog.show
    end
  end
end