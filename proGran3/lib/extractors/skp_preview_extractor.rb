# universal_skp_preview_extractor.rb
# –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –º–æ–¥—É–ª—å –¥–ª—è –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –ø—Ä–µ–≤—å—é –∑ .skp —Ñ–∞–π–ª—ñ–≤
# –ê–≤—Ç–æ—Ä: ProGran3 Team
# –í–µ—Ä—Å—ñ—è: 1.0.0

require 'fileutils'
require 'sketchup.rb'

module UniversalSkpPreviewExtractor
  extend self
  
  # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
  DEFAULT_CONFIG = {
    output_size: 256,
    output_format: 'png',
    output_dir: nil, # nil = –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –≤ —Ç–∏–º—á–∞—Å–æ–≤—ñ–π –ø–∞–ø—Ü—ñ
    cleanup_after_extraction: true,
    verbose_logging: true,
    error_handling: :raise # :raise, :return_nil, :log_only
  }
  
  # –ö–ª–∞—Å –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –µ–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞
  class Config
    attr_accessor :output_size, :output_format, :output_dir, :cleanup_after_extraction, :verbose_logging, :error_handling
    
    def initialize(options = {})
      config = DEFAULT_CONFIG.merge(options)
      
      @output_size = config[:output_size]
      @output_format = config[:output_format]
      @output_dir = config[:output_dir]
      @cleanup_after_extraction = config[:cleanup_after_extraction]
      @verbose_logging = config[:verbose_logging]
      @error_handling = config[:error_handling]
    end
    
    def output_dir
      @output_dir ||= File.join(Dir.tmpdir, 'skp_previews')
    end
  end
  
  # –û—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –ø—Ä–µ–≤—å—é
  def extract_preview(skp_file_path, config = nil)
    config = Config.new if config.nil?
    
    log("üîÑ –í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –ø—Ä–µ–≤—å—é –∑: #{File.basename(skp_file_path)}", config)
    
    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö
    unless validate_input(skp_file_path, config)
      return handle_error("–ù–µ–≤—ñ—Ä–Ω–∏–π —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –∞–±–æ —Ñ–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î", config)
    end
    
    begin
      # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —á–µ—Ä–µ–∑ model.definitions.load
      model = Sketchup.active_model
      definitions = model.definitions
      
      definition = definitions.load(skp_file_path)
      
      if definition && definition.respond_to?(:save_thumbnail)
        # –ì–µ–Ω–µ—Ä—É—î–º–æ —à–ª—è—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        output_path = generate_output_path(skp_file_path, config)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
        FileUtils.mkdir_p(File.dirname(output_path))
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–±—É–¥–æ–≤–∞–Ω–µ –ø—Ä–µ–≤—å—é
        success = definition.save_thumbnail(output_path)
        
        if success && File.exist?(output_path) && File.size(output_path) > 0
          log("  ‚úÖ –ü—Ä–µ–≤—å—é –≤–∏—Ç—è–≥–Ω—É—Ç–æ: #{File.basename(output_path)}", config)
          log("  üìè –†–æ–∑–º—ñ—Ä: #{File.size(output_path)} –±–∞–π—Ç", config)
          
          # –û—á–∏—â–∞—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
          cleanup_loaded_definition(definition, definitions, config) if config.cleanup_after_extraction
          
          return {
            success: true,
            output_path: output_path,
            file_size: File.size(output_path),
            original_file: skp_file_path
          }
        else
          return handle_error("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–µ–≤—å—é", config)
        end
      else
        return handle_error("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∞–±–æ save_thumbnail –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π", config)
      end
      
    rescue => e
      return handle_error("–ü–æ–º–∏–ª–∫–∞ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è: #{e.message}", config)
    ensure
      # –û—á–∏—â–∞—î–º–æ –≤ —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏
      if definition && config.cleanup_after_extraction
        cleanup_loaded_definition(definition, definitions, config)
      end
    end
  end
  
  # –ú–µ—Ç–æ–¥ –¥–ª—è –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –ø—Ä–µ–≤—å—é –∑ –∫—ñ–ª—å–∫–æ—Ö —Ñ–∞–π–ª—ñ–≤
  def extract_multiple_previews(skp_file_paths, config = nil)
    config = Config.new if config.nil?
    
    log("üîÑ –í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –ø—Ä–µ–≤—å—é –∑ #{skp_file_paths.length} —Ñ–∞–π–ª—ñ–≤...", config)
    
    results = []
    
    skp_file_paths.each_with_index do |file_path, index|
      log("  üìÅ [#{index + 1}/#{skp_file_paths.length}] #{File.basename(file_path)}", config)
      
      result = extract_preview(file_path, config)
      results << result
      
      # –ù–µ–≤–µ–ª–∏–∫–∞ –ø–∞—É–∑–∞ –º—ñ–∂ —Ñ–∞–π–ª–∞–º–∏ –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ
      sleep(0.1) if index < skp_file_paths.length - 1
    end
    
    successful = results.select { |r| r[:success] }
    failed = results.reject { |r| r[:success] }
    
    log("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: #{successful.length} —É—Å–ø—ñ—à–Ω–æ, #{failed.length} –Ω–µ–≤–¥–∞–ª–æ", config)
    
    {
      total_files: skp_file_paths.length,
      successful: successful.length,
      failed: failed.length,
      results: results
    }
  end
  
  # –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ—à—É–∫—É —Ç–∞ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –ø—Ä–µ–≤—å—é –∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
  def extract_from_directory(directory_path, config = nil)
    config = Config.new if config.nil?
    
    log("üîç –ü–æ—à—É–∫ .skp —Ñ–∞–π–ª—ñ–≤ –≤: #{directory_path}", config)
    
    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–∏–π –ø–æ—à—É–∫ .skp —Ñ–∞–π–ª—ñ–≤
    skp_files = Dir.glob(File.join(directory_path, "**/*.skp"))
    
    if skp_files.empty?
      log("‚ùå .skp —Ñ–∞–π–ª–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", config)
      return { total_files: 0, successful: 0, failed: 0, results: [] }
    end
    
    log("üìã –ó–Ω–∞–π–¥–µ–Ω–æ #{skp_files.length} .skp —Ñ–∞–π–ª—ñ–≤", config)
    
    extract_multiple_previews(skp_files, config)
  end
  
  # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö
  private def validate_input(skp_file_path, config)
    return false unless skp_file_path.is_a?(String)
    return false unless File.exist?(skp_file_path)
    return false unless File.extname(skp_file_path).downcase == '.skp'
    return false unless File.file?(skp_file_path)
    return false unless File.size(skp_file_path) > 0
    
    true
  end
  
  # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —à–ª—è—Ö—É –¥–ª—è –≤–∏–≤–æ–¥—É
  private def generate_output_path(skp_file_path, config)
    filename = File.basename(skp_file_path, '.skp')
    File.join(config.output_dir, "#{filename}_#{config.output_size}x#{config.output_size}.#{config.output_format}")
  end
  
  # –û—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  private def cleanup_loaded_definition(definition, definitions, config)
    return unless definition
    
    begin
      # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –µ–∫–∑–µ–º–ø–ª—è—Ä–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
      definition.instances.each(&:erase!) if definition.instances.any?
      
      # –í–∏–¥–∞–ª—è—î–º–æ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∑ –∫–æ–ª–µ–∫—Ü—ñ—ó
      definitions.remove(definition) if definitions.include?(definition)
      
      log("  üßπ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—á–∏—â–µ–Ω–æ –∑ –ø–∞–º'—è—Ç—ñ", config)
    rescue => e
      log("  ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è: #{e.message}", config)
    end
  end
  
  # –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
  private def handle_error(message, config)
    case config.error_handling
    when :raise
      raise StandardError, message
    when :return_nil
      log("‚ùå #{message}", config)
      nil
    when :log_only
      log("‚ùå #{message}", config)
      { success: false, error: message }
    else
      log("‚ùå #{message}", config)
      { success: false, error: message }
    end
  end
  
  # –õ–æ–≥—É–≤–∞–Ω–Ω—è
  private def log(message, config)
    puts message if config.verbose_logging
  end
  
  # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–æ–¥—É–ª—è
  def test_extraction(test_file_path = nil, config = nil)
    config = Config.new if config.nil?
    
    log("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –µ–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞ –ø—Ä–µ–≤—å—é...", config)
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª
    unless test_file_path
      test_file_path = Dir.glob("**/*.skp").first
    end
    
    if test_file_path && File.exist?(test_file_path)
      log("üìÅ –¢–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª: #{File.basename(test_file_path)}", config)
      
      result = extract_preview(test_file_path, config)
      
      if result && result[:success]
        log("‚úÖ –¢–µ—Å—Ç —É—Å–ø—ñ—à–Ω–∏–π: #{File.basename(result[:output_path])}", config)
        return result
      else
        log("‚ùå –¢–µ—Å—Ç –Ω–µ–≤–¥–∞–ª–∏–π", config)
        return result
      end
    else
      log("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–∏–π .skp —Ñ–∞–π–ª", config)
      return { success: false, error: "–¢–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" }
    end
  end
end

# –ê–ª—ñ–∞—Å –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ
SkpPreviewExtractor = UniversalSkpPreviewExtractor
