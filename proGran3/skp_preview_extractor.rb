# proGran3/skp_preview_extractor.rb
# –ú–æ–¥—É–ª—å –¥–ª—è –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –ø—Ä–µ–≤—å—é –∑ .skp —Ñ–∞–π–ª—ñ–≤ —á–µ—Ä–µ–∑ SketchUp API

require 'fileutils'

module ProGran3
  module SkpPreviewExtractor
    extend self
    
    # –®–ª—è—Ö –¥–æ –ø–∞–ø–∫–∏ –∑ –ø—Ä–µ–≤—å—é
    PREVIEW_PATH = File.join(File.dirname(__FILE__), '..', 'previews')
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É –¥–ª—è –ø—Ä–µ–≤—å—é —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
    Dir.mkdir(PREVIEW_PATH) unless Dir.exist?(PREVIEW_PATH)
    
    # –û—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –ø—Ä–µ–≤—å—é
    def extract_preview_from_skp(skp_file_path, output_size = 256)
      puts "üîÑ –í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –ø—Ä–µ–≤—å—é –∑: #{File.basename(skp_file_path)}"
      
      begin
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —á–µ—Ä–µ–∑ model.definitions.load
        model = Sketchup.active_model
        definitions = model.definitions
        
        definition = definitions.load(skp_file_path)
        
        if definition && definition.respond_to?(:save_thumbnail)
          # –ì–µ–Ω–µ—Ä—É—î–º–æ —à–ª—è—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
          output_path = generate_preview_path(skp_file_path, output_size)
          
          # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–±—É–¥–æ–≤–∞–Ω–µ –ø—Ä–µ–≤—å—é
          success = definition.save_thumbnail(output_path)
          
          if success && File.exist?(output_path) && File.size(output_path) > 0
            puts "  ‚úÖ –ü—Ä–µ–≤—å—é –≤–∏—Ç—è–≥–Ω—É—Ç–æ: #{File.basename(output_path)}"
            puts "  üìè –†–æ–∑–º—ñ—Ä: #{File.size(output_path)} –±–∞–π—Ç"
            
            # –û—á–∏—â–∞—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
            cleanup_loaded_definition(definition, definitions)
            
            return output_path
          else
            puts "  ‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–µ–≤—å—é"
          end
        else
          puts "  ‚ùå –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∞–±–æ save_thumbnail –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"
        end
        
        # –û—á–∏—â–∞—î–º–æ –≤ —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏
        cleanup_loaded_definition(definition, definitions) if definition
        
        nil
        
      rescue => e
        puts "  ‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è: #{e.message}"
        nil
      end
    end
    
    # –û—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    def cleanup_loaded_definition(definition, definitions)
      return unless definition
      
      begin
        # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –µ–∫–∑–µ–º–ø–ª—è—Ä–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        definition.instances.each(&:erase!) if definition.instances.any?
        
        # –í–∏–¥–∞–ª—è—î–º–æ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∑ –∫–æ–ª–µ–∫—Ü—ñ—ó
        definitions.remove(definition) if definitions.include?(definition)
        
        puts "  üßπ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—á–∏—â–µ–Ω–æ –∑ –ø–∞–º'—è—Ç—ñ"
      rescue => e
        puts "  ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è: #{e.message}"
      end
    end
    
    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —à–ª—è—Ö—É –¥–ª—è –ø—Ä–µ–≤—å—é
    def generate_preview_path(skp_file_path, size)
      filename = File.basename(skp_file_path, '.skp')
      File.join(PREVIEW_PATH, "#{filename}_#{size}x#{size}.png")
    end
    
    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–µ—Ç–æ–¥—É
    def test_extraction
      puts "üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –ø—Ä–µ–≤—å—é..."
      
      # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª
      test_file = Dir.glob("proGran3/assets/**/*.skp").first
      
      if test_file
        puts "üìÅ –¢–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª: #{File.basename(test_file)}"
        
        result = extract_preview_from_skp(test_file, 256)
        
        if result
          puts "‚úÖ –¢–µ—Å—Ç —É—Å–ø—ñ—à–Ω–∏–π: #{File.basename(result)}"
        else
          puts "‚ùå –¢–µ—Å—Ç –Ω–µ–≤–¥–∞–ª–∏–π"
        end
      else
        puts "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–∏–π .skp —Ñ–∞–π–ª"
      end
    end
  end
end

