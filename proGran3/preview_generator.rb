# proGran3/preview_generator.rb
# –ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó 3D –ø—Ä–µ–≤—å—é —Ç–∞ –∑–æ–±—Ä–∞–∂–µ–Ω—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤

require 'sketchup.rb'

module ProGran3
  module PreviewGenerator
    extend self

    # –®–ª—è—Ö –¥–æ –ø–∞–ø–∫–∏ –∑ –ø—Ä–µ–≤—å—é
    PREVIEW_PATH = File.join(File.dirname(__FILE__), 'previews')
    
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è –≥–µ–æ–º–µ—Ç—Ä—ñ—ó
    ORIGIN = Geom::Point3d.new(0, 0, 0)
    X_AXIS = Geom::Vector3d.new(1, 0, 0)
    Y_AXIS = Geom::Vector3d.new(0, 1, 0)
    Z_AXIS = Geom::Vector3d.new(0, 0, 1)

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–ø–∫–∏ –¥–ª—è –ø—Ä–µ–≤—å—é
    def ensure_preview_directory
      Dir.mkdir(PREVIEW_PATH) unless Dir.exist?(PREVIEW_PATH)
    end

    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–µ–≤—å—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    def generate_preview_image(component_path, size = 256)
      ensure_preview_directory
      
      begin
        model = Sketchup.active_model
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        full_path = File.join(ProGran3::ASSETS_PATH, component_path)
        comp_def = model.definitions.load(full_path)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä
        temp_instance = model.active_entities.add_instance(comp_def, Geom::Transformation.new)
        
        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∫–∞–º–µ—Ä—É –¥–ª—è –ø—Ä–µ–≤—å—é
        setup_preview_camera(temp_instance)
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        image_path = get_preview_image_path(component_path)
        success = export_preview_image(image_path, size)
        
        # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä
        temp_instance.erase!
        
        # –°–ø—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ purge —Ñ—É–Ω–∫—Ü—ñ—ó
        begin
          if model.respond_to?(:purge_unused)
            model.purge_unused
            puts "üßπ –ú–æ–¥–µ–ª—å –æ—á–∏—â–µ–Ω–∞ (purge_unused)"
          elsif model.respond_to?(:purge_all)
            model.purge_all
            puts "üßπ –ú–æ–¥–µ–ª—å –æ—á–∏—â–µ–Ω–∞ (purge_all)"
          elsif model.definitions.respond_to?(:purge_unused)
            model.definitions.purge_unused
            puts "üßπ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –æ—á–∏—â–µ–Ω—ñ (definitions.purge_unused)"
          else
            puts "üßπ –¢–∏–º—á–∞—Å–æ–≤–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –≤–∏–¥–∞–ª–µ–Ω–æ (purge –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π)"
          end
        rescue => e
          puts "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—á–∏—Å—Ç–∏—Ç–∏ –º–æ–¥–µ–ª—å: #{e.message}"
          puts "üßπ –¢–∏–º—á–∞—Å–æ–≤–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –≤–∏–¥–∞–ª–µ–Ω–æ"
        end
        
        if success
          puts "‚úÖ –ü—Ä–µ–≤—å—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ: #{File.basename(image_path)}"
          image_path
        else
          puts "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–µ–≤—å—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"
          nil
        end
        
      rescue => e
        puts "‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–µ–≤—å—é: #{e.message}"
        nil
      end
    end

    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–µ–≤—å—é —è–∫ base64 –¥–ª—è –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
    def generate_web_preview(component_path, size = 256)
      begin
        model = Sketchup.active_model
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        full_path = File.join(ProGran3::ASSETS_PATH, component_path)
        comp_def = model.definitions.load(full_path)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä
        temp_instance = model.active_entities.add_instance(comp_def, Geom::Transformation.new)
        
        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∫–∞–º–µ—Ä—É –¥–ª—è –ø—Ä–µ–≤—å—é
        setup_preview_camera(temp_instance)
        
        # –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É
        sleep(0.1)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
        temp_path = File.join(Dir.tmpdir, "temp_preview_#{Time.now.to_i}.png")
        
        # –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        success = export_preview_image(temp_path, size)
        
        # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä
        temp_instance.erase!
        
        # –°–ø—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ purge —Ñ—É–Ω–∫—Ü—ñ—ó
        begin
          if model.respond_to?(:purge_unused)
            model.purge_unused
            puts "üßπ –ú–æ–¥–µ–ª—å –æ—á–∏—â–µ–Ω–∞ (purge_unused)"
          elsif model.respond_to?(:purge_all)
            model.purge_all
            puts "üßπ –ú–æ–¥–µ–ª—å –æ—á–∏—â–µ–Ω–∞ (purge_all)"
          elsif model.definitions.respond_to?(:purge_unused)
            model.definitions.purge_unused
            puts "üßπ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –æ—á–∏—â–µ–Ω—ñ (definitions.purge_unused)"
          else
            puts "üßπ –¢–∏–º—á–∞—Å–æ–≤–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –≤–∏–¥–∞–ª–µ–Ω–æ (purge –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π)"
          end
        rescue => e
          puts "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—á–∏—Å—Ç–∏—Ç–∏ –º–æ–¥–µ–ª—å: #{e.message}"
          puts "üßπ –¢–∏–º—á–∞—Å–æ–≤–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –≤–∏–¥–∞–ª–µ–Ω–æ"
        end
        
        if success && File.exist?(temp_path)
          # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É
          file_size = File.size(temp_path)
          puts "üìè –†–æ–∑–º—ñ—Ä –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ–≥–æ —Ñ–∞–π–ª—É: #{file_size} –±–∞–π—Ç"
          
          if file_size > 100  # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –¥–ª—è PNG
            # –ß–∏—Ç–∞—î–º–æ —Ñ–∞–π–ª —Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ base64
            image_data = File.read(temp_path, mode: 'rb')  # –ë—ñ–Ω–∞—Ä–Ω–∏–π —Ä–µ–∂–∏–º
            require 'base64'
            base64_data = Base64.strict_encode64(image_data)
            
            # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
            File.delete(temp_path)
            
            puts "‚úÖ –í–µ–±-–ø—Ä–µ–≤—å—é –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –¥–ª—è: #{component_path}"
            puts "üìä –†–æ–∑–º—ñ—Ä –±—ñ–Ω–∞—Ä–Ω–∏—Ö –¥–∞–Ω–∏—Ö: #{image_data.length} –±–∞–π—Ç"
            puts "üìä Base64 –¥–æ–≤–∂–∏–Ω–∞: #{base64_data.length}"
            "data:image/png;base64,#{base64_data}"
          else
            puts "‚ùå –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π —Ñ–∞–π–ª –∑–∞–Ω–∞–¥—Ç–æ –º–∞–ª–∏–π: #{file_size} –±–∞–π—Ç"
            File.delete(temp_path) if File.exist?(temp_path)
            nil
          end
        else
          puts "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–µ–±-–ø—Ä–µ–≤—å—é –¥–ª—è: #{component_path}"
          puts "   –£—Å–ø—ñ—Ö –µ–∫—Å–ø–æ—Ä—Ç—É: #{success}"
          puts "   –§–∞–π–ª —ñ—Å–Ω—É—î: #{File.exist?(temp_path)}"
          nil
        end
        
      rescue => e
        puts "‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤–µ–±-–ø—Ä–µ–≤—å—é: #{e.message}"
        puts "   –ö–æ–º–ø–æ–Ω–µ–Ω—Ç: #{component_path}"
        puts "   –ü–æ–≤–Ω–∏–π —à–ª—è—Ö: #{File.join(ProGran3::ASSETS_PATH, component_path)}"
        nil
      end
    end

    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–∞–º–µ—Ä–∏ –¥–ª—è –ø—Ä–µ–≤—å—é
    def setup_preview_camera(instance)
      view = Sketchup.active_model.active_view
      model = Sketchup.active_model
      
      # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ø—Ä–æ–∑–æ—Ä–∏–π —Ñ–æ–Ω –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É
      setup_transparent_background(model, view)
      
      # –û—Ç—Ä–∏–º—É—î–º–æ –º–µ–∂—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
      bounds = instance.bounds
      center = bounds.center
      
      # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –≤—ñ–¥—Å—Ç–∞–Ω—å –¥–æ –∫–∞–º–µ—Ä–∏
      diagonal = bounds.diagonal
      distance = diagonal * 2
      
      # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –∫–∞–º–µ—Ä–∏ –¥–ª—è —á–∏—Å—Ç–æ—ó —ñ–∑–æ–º–µ—Ç—Ä—ñ—ó
      # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≥—Ä–∞–¥—É—Å–∏ –≤ —Ä–∞–¥—ñ–∞–Ω–∏
      angle_x_rad = 35.264 * Math::PI / 180  # –ù–∞—Ö–∏–ª 35.264¬∞ –ø–æ X (–∞—Ä–∫—Ç–∞–Ω–≥–µ–Ω—Å 1/‚àö2)
      angle_y_rad = 45 * Math::PI / 180      # –û–±–µ—Ä—Ç–∞–Ω–Ω—è 45¬∞ –ø–æ Y
      angle_z_rad = 0 * Math::PI / 180       # –ù—É–ª—å–æ–≤–∏–π –∫—É—Ç –ø–æ Z
      
      # –ë–∞–∑–æ–≤–∏–π –≤–µ–∫—Ç–æ—Ä –∫–∞–º–µ—Ä–∏ (—ñ–∑–æ–º–µ—Ç—Ä–∏—á–Ω–∏–π –∫—É—Ç)
      base_eye = Geom::Vector3d.new(distance, distance, distance)
      
      # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤–µ–∫—Ç–æ—Ä –Ω–∞–≤–∫–æ–ª–æ –æ—Å—ñ Z (–±–µ–∑ –æ–±–µ—Ä—Ç–∞–Ω–Ω—è –¥–ª—è –∫–ª–∞—Å–∏—á–Ω–æ—ó —ñ–∑–æ–º–µ—Ç—Ä—ñ—ó)
      rotation_z = Geom::Transformation.rotation(ORIGIN, Z_AXIS, angle_z_rad)
      eye_after_z = rotation_z * base_eye
      
      # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤–µ–∫—Ç–æ—Ä –Ω–∞–≤–∫–æ–ª–æ –æ—Å—ñ Y –Ω–∞ 0 –≥—Ä–∞–¥—É—Å—ñ–≤
      rotation_y = Geom::Transformation.rotation(ORIGIN, Y_AXIS, angle_y_rad)
      eye_after_y = rotation_y * eye_after_z
      
             # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤–µ–∫—Ç–æ—Ä –Ω–∞–≤–∫–æ–ª–æ –æ—Å—ñ X –Ω–∞ 35.264 –≥—Ä–∞–¥—É—Å—ñ–≤ (—ñ–∑–æ–º–µ—Ç—Ä–∏—á–Ω–∏–π –Ω–∞—Ö–∏–ª)
      rotation_x = Geom::Transformation.rotation(ORIGIN, X_AXIS, angle_x_rad)
      rotated_eye = rotation_x * eye_after_y
      
      # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –∫–∞–º–µ—Ä–∏
      eye = center + rotated_eye
      target = center
      up = Geom::Vector3d.new(0, 0, 1)
      
      # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞–º–µ—Ä–∏
      camera = Sketchup::Camera.new(eye, target, up)
      view.camera = camera
      
      # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ zoom –¥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
      view.zoom(instance)
      
             puts "üìê –ö–∞–º–µ—Ä–∞ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞ (—ñ–∑–æ–º–µ—Ç—Ä—ñ—è: 35.264¬∞ –ø–æ X, 45¬∞ –ø–æ Y, 0¬∞ –ø–æ Z –∑ –ø—Ä–æ–∑–æ—Ä–∏–º —Ñ–æ–Ω–æ–º)"
    end

    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∑–æ—Ä–æ–≥–æ —Ñ–æ–Ω—É (—Å–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è)
    def setup_transparent_background(model, view)
      begin
        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –ø—Ä–æ–∑–æ—Ä–æ—Å—Ç—ñ
        rendering_options = model.rendering_options
        
        # –°–ø—Ä–æ–±—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –±–∞–∑–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        rendering_options["DrawHorizon"] = false if rendering_options.keys.include?("DrawHorizon")
        rendering_options["DrawGround"] = false if rendering_options.keys.include?("DrawGround")
        rendering_options["DrawSky"] = false if rendering_options.keys.include?("DrawSky")
        
        puts "üé® –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –ø—Ä–æ—Å—Ç–∏–π —Ñ–æ–Ω"
      rescue => e
        puts "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Ñ–æ–Ω: #{e.message}"
        puts "üîÑ –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –±–µ–∑ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Ñ–æ–Ω—É"
      end
    end

    # –ï–∫—Å–ø–æ—Ä—Ç –ø—Ä–µ–≤—å—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    def export_preview_image(image_path, size)
      view = Sketchup.active_model.active_view
      
      # –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ view.write_image –∑ –ø—Ä–æ–∑–æ—Ä—ñ—Å—Ç—é
      begin
        puts "üì∏ –°–ø—Ä–æ–±–∞ –µ–∫—Å–ø–æ—Ä—Ç—É –≤: #{image_path}"
        puts "üìè –†–æ–∑–º—ñ—Ä: #{size}x#{size}"
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –ø—Ä–æ–∑–æ—Ä–æ–≥–æ —Ñ–æ–Ω—É
        options = {
          filename: image_path,
          width: size,
          height: size,
          antialias: true,
          compression: 0.9,
          transparent: true
        }
        
        puts "üé® –ï–∫—Å–ø–æ—Ä—Ç –∑ –ø—Ä–æ–∑–æ—Ä–∏–º —Ñ–æ–Ω–æ–º"
        success = view.write_image(options)
        
        puts "üì∏ –ï–∫—Å–ø–æ—Ä—Ç –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: #{success ? '—É—Å–ø—ñ—à–Ω–æ' : '–Ω–µ—É—Å–ø—ñ—à–Ω–æ'}"
        return success
      rescue => e
        puts "‚ùå –ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: #{e.message}"
        puts "üîÑ –°–ø—Ä–æ–±–∞ –∑ –±–∞–∑–æ–≤–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"
        
        # –†–µ–∑–µ—Ä–≤–Ω–∏–π —Å–ø–æ—Å—ñ–± –±–µ–∑ options hash
        begin
          success = view.write_image(image_path, size, size, true, 0.9)
          puts "üì∏ –†–µ–∑–µ—Ä–≤–Ω–∏–π –µ–∫—Å–ø–æ—Ä—Ç: #{success ? '—É—Å–ø—ñ—à–Ω–æ' : '–Ω–µ—É—Å–ø—ñ—à–Ω–æ'}"
          return success
        rescue => e2
          puts "‚ùå –†–µ–∑–µ—Ä–≤–Ω–∏–π –µ–∫—Å–ø–æ—Ä—Ç –Ω–µ –≤–¥–∞–≤—Å—è: #{e2.message}"
          return false
        end
      end
    end

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —à–ª—è—Ö—É –¥–æ –ø—Ä–µ–≤—å—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    def get_preview_image_path(component_path)
      component_name = File.basename(component_path, '.skp')
      File.join(PREVIEW_PATH, "#{component_name}_preview.png")
    end

    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–µ–≤—å—é –¥–ª—è –≤—Å—ñ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    def generate_category_previews(category)
      components = Dir.glob(File.join(ProGran3::ASSETS_PATH, category, "*.skp"))
      
      puts "üîÑ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–µ–≤—å—é –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: #{category}"
      puts "üìÅ –ó–Ω–∞–π–¥–µ–Ω–æ #{components.length} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤"
      
      generated_count = 0
      
      components.each do |component_path|
        if generate_preview_image(component_path)
          generated_count += 1
        end
      end
      
      puts "‚úÖ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ #{generated_count} –∑ #{components.length} –ø—Ä–µ–≤—å—é"
      generated_count
    end

    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–µ–≤—å—é –¥–ª—è –≤—Å—ñ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
    def generate_all_previews
      categories = ["stands", "steles", "flowerbeds", "gravestones", "pavement_tiles"]
      total_generated = 0
      
      puts "üîÑ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–µ–≤—å—é –¥–ª—è –≤—Å—ñ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤..."
      
      categories.each do |category|
        total_generated += generate_category_previews(category)
      end
      
      puts "üéâ –ó–∞–≥–∞–ª–æ–º –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ #{total_generated} –ø—Ä–µ–≤—å—é"
      total_generated
    end

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —à–ª—è—Ö—É –¥–æ –ø—Ä–µ–≤—å—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (—è–∫—â–æ —ñ—Å–Ω—É—î)
    def get_existing_preview_path(component_path)
      image_path = get_preview_image_path(component_path)
      File.exist?(image_path) ? image_path : nil
    end

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø—Ä–µ–≤—å—é
    def needs_preview_generation?(component_path)
      image_path = get_preview_image_path(component_path)
      !File.exist?(image_path)
    end

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–µ–≤—å—é –ø—Ä–∏ –ø–æ—Ç—Ä–µ–±—ñ
    def ensure_preview_exists(component_path)
      if needs_preview_generation?(component_path)
        generate_preview_image(component_path)
      else
        get_preview_image_path(component_path)
      end
    end
  end
end
