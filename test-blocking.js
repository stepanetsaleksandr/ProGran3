// –¢–µ—Å—Ç –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –ø–ª–∞–≥—ñ–Ω–∞
const pluginId = 'progran3-desktop-60aqeiu-provis3d';
const baseUrl = 'https://progran3-tracking-server-2fojxdkzj-provis3ds-projects.vercel.app';

async function testBlocking() {
  console.log('üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –ø–ª–∞–≥—ñ–Ω–∞...');
  
  // 1. –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å
  console.log('\n1Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å:');
  try {
    const heartbeatResponse = await fetch(`${baseUrl}/api/heartbeat`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        plugin_id: pluginId,
        plugin_name: 'ProGran3',
        version: '1.0.0',
        user_id: 'test-user@desktop',
        computer_name: 'desktop-60aqeiu',
        system_info: {
          os: 'Windows',
          ruby_version: '3.0.0',
          sketchup_version: '2024',
          architecture: '64-bit'
        },
        timestamp: new Date().toISOString(),
        action: 'heartbeat_update',
        source: 'sketchup_plugin',
        update_existing: true,
        force_update: false
      })
    });
    
    const heartbeatData = await heartbeatResponse.json();
    console.log('Heartbeat –≤—ñ–¥–ø–æ–≤—ñ–¥—å:', JSON.stringify(heartbeatData, null, 2));
    
    if (heartbeatData.success) {
      console.log(`üìä –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å: is_active=${heartbeatData.plugin.is_active}, is_blocked=${heartbeatData.plugin.is_blocked}`);
    }
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ heartbeat:', error.message);
  }
  
  // 2. –ë–ª–æ–∫—É—î–º–æ –ø–ª–∞–≥—ñ–Ω
  console.log('\n2Ô∏è‚É£ –ë–ª–æ–∫—É—î–º–æ –ø–ª–∞–≥—ñ–Ω:');
  try {
    const blockResponse = await fetch(`${baseUrl}/api/plugins/block`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        plugin_id: pluginId,
        action: 'block'
      })
    });
    
    const blockData = await blockResponse.json();
    console.log('Block –≤—ñ–¥–ø–æ–≤—ñ–¥—å:', JSON.stringify(blockData, null, 2));
    
    if (blockData.success) {
      console.log('‚úÖ –ü–ª–∞–≥—ñ–Ω —É—Å–ø—ñ—à–Ω–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π');
    } else {
      console.log('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –ø–ª–∞–≥—ñ–Ω:', blockData.error);
    }
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è:', error.message);
  }
  
  // 3. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –ø—ñ—Å–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
  console.log('\n3Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –ø—ñ—Å–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è:');
  try {
    const heartbeatResponse2 = await fetch(`${baseUrl}/api/heartbeat`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        plugin_id: pluginId,
        plugin_name: 'ProGran3',
        version: '1.0.0',
        user_id: 'test-user@desktop',
        computer_name: 'desktop-60aqeiu',
        system_info: {
          os: 'Windows',
          ruby_version: '3.0.0',
          sketchup_version: '2024',
          architecture: '64-bit'
        },
        timestamp: new Date().toISOString(),
        action: 'heartbeat_update',
        source: 'sketchup_plugin',
        update_existing: true,
        force_update: false
      })
    });
    
    const heartbeatData2 = await heartbeatResponse2.json();
    console.log('Heartbeat –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø—ñ—Å–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è:', JSON.stringify(heartbeatData2, null, 2));
    
    if (heartbeatData2.success) {
      console.log(`üìä –°—Ç–∞—Ç—É—Å –ø—ñ—Å–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è: is_active=${heartbeatData2.plugin.is_active}, is_blocked=${heartbeatData2.plugin.is_blocked}`);
      
      if (heartbeatData2.plugin.is_blocked && !heartbeatData2.plugin.is_active) {
        console.log('‚úÖ –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ!');
      } else {
        console.log('‚ùå –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –ù–ï –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ!');
      }
    }
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ heartbeat –ø—ñ—Å–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è:', error.message);
  }
}

testBlocking().catch(console.error);
