# build_rbz_advanced_obfuscation.rb
# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –æ–±—Ñ—É—Å–∫–∞—Ü—ñ—è Ruby –∫–æ–¥—É –±–µ–∑ —Å—Ç–æ—Ä–æ–Ω–Ω—ñ—Ö —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤

require 'zip'
require 'fileutils'
require 'json'
require 'digest'
require 'base64'
require 'zlib'

class AdvancedObfuscator
  PLUGIN_NAME = 'proGran3'
  VERSION = '3.2.1'
  OUTPUT_DIR = 'dist'
  
  # –°–ø–∏—Å–æ–∫ –∑–º—ñ–Ω–Ω–∏—Ö –¥–ª—è –æ–±—Ñ—É—Å–∫–∞—Ü—ñ—ó
  VAR_MAP = {}
  COUNTER = 0
  
  def initialize
    @plugin_dir = File.expand_path('plugin', __dir__)
    @output_dir = File.expand_path(OUTPUT_DIR, __dir__)
    @timestamp = Time.now.strftime('%Y%m%d_%H%M%S')
    @obfuscation_key = generate_key
  end
  
  def build
    puts "üîê –ó–±—ñ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –æ–±—Ñ—É—Å–∫–æ–≤–∞–Ω–æ–≥–æ –ø–ª–∞–≥—ñ–Ω–∞ #{PLUGIN_NAME} v#{VERSION}"
    puts "=" * 70
    
    FileUtils.mkdir_p(@output_dir)
    
    rbz_filename = "#{PLUGIN_NAME}_obfuscated_v#{VERSION}_#{@timestamp}.rbz"
    rbz_path = File.join(@output_dir, rbz_filename)
    
    create_obfuscated_rbz(rbz_path)
    
    if File.exist?(rbz_path)
      file_size = File.size(rbz_path) / 1024.0 / 1024.0
      puts "\n‚úÖ –û–±—Ñ—É—Å–∫–æ–≤–∞–Ω–∞ –∑–±—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
      puts "üì¶ –§–∞–π–ª: #{rbz_filename}"
      puts "üìè –†–æ–∑–º—ñ—Ä: #{file_size.round(2)} MB"
      puts "üîê –ó–∞—Ö–∏—Å—Ç: Advanced obfuscation"
      puts "üîë –ö–ª—é—á: #{@obfuscation_key[0..16]}..."
      
      latest_path = File.join(@output_dir, "#{PLUGIN_NAME}_obfuscated_latest.rbz")
      FileUtils.cp(rbz_path, latest_path)
      
      print_instructions
      true
    else
      puts "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–±—ñ—Ä–∫–∏"
      false
    end
  end
  
  private
  
  def create_obfuscated_rbz(output_path)
    puts "\nüîê –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –æ–±—Ñ—É—Å–∫–æ–≤–∞–Ω–æ–≥–æ .rbz –∞—Ä—Ö—ñ–≤—É..."
    
    file_count = 0
    
    Zip::File.open(output_path, create: true) do |zipfile|
      # Loader - –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –æ–±—Ñ—É—Å–∫–∞—Ü—ñ—è (–º–∞—î –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ Extension Manager)
      loader_file = File.join(@plugin_dir, "#{PLUGIN_NAME}_loader.rb")
      if File.exist?(loader_file)
        obfuscated = light_obfuscate(File.read(loader_file))
        zipfile.get_output_stream("#{PLUGIN_NAME}.rb") do |f|
          f.write(obfuscated)
        end
        file_count += 1
        puts "  ‚úì #{PLUGIN_NAME}.rb (light obfuscation)"
      end
      
      # –ì–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –æ–±—Ñ—É—Å–∫–∞—Ü—ñ—è
      main_file = File.join(@plugin_dir, "#{PLUGIN_NAME}.rb")
      if File.exist?(main_file)
        obfuscated = advanced_obfuscate(File.read(main_file))
        zipfile.get_output_stream("#{PLUGIN_NAME}_core.rb") do |f|
          f.write(obfuscated)
        end
        file_count += 1
        puts "  ‚úì #{PLUGIN_NAME}_core.rb (advanced obfuscation)"
      end
      
      # –í—Å—ñ —ñ–Ω—à—ñ Ruby —Ñ–∞–π–ª–∏
      plugin_subdir = File.join(@plugin_dir, PLUGIN_NAME)
      if Dir.exist?(plugin_subdir)
        Dir.glob(File.join(plugin_subdir, '**', '*')).each do |file|
          next if File.directory?(file)
          next if should_exclude?(file)
          
          relative_path = file.sub("#{@plugin_dir}/", '')
          
          if file.end_with?('.rb')
            obfuscated = advanced_obfuscate(File.read(file))
            zipfile.get_output_stream(relative_path) do |f|
              f.write(obfuscated)
            end
          else
            zipfile.add(relative_path, file)
          end
          
          file_count += 1
          puts "  ‚úì #{relative_path}" if file_count % 10 == 0
        end
      end
      
      # Config
      config_file = File.join(@plugin_dir, 'config.json')
      zipfile.add('config.json', config_file) if File.exist?(config_file)
    end
    
    puts "\nüìä –û–±—Ä–æ–±–ª–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤: #{file_count}"
  end
  
  def light_obfuscate(code)
    # –õ–µ–≥–∫–∞ –æ–±—Ñ—É—Å–∫–∞—Ü—ñ—è –¥–ª—è loader (–º–∞—î –∑–∞–ª–∏—à–∞—Ç–∏—Å—å —á–∏—Ç–∞–±–µ–ª—å–Ω–∏–º)
    code = remove_comments(code)
    code = minify_whitespace(code)
    code
  end
  
  def advanced_obfuscate(code)
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –æ–±—Ñ—É—Å–∫–∞—Ü—ñ—è
    code = remove_comments(code)
    # code = obfuscate_strings(code)  # –í–∏–º–∫–Ω–µ–Ω–æ - –ª–∞–º–∞—î —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
    code = obfuscate_variables(code)
    code = minify_whitespace(code)
    # code = add_junk_code(code)  # –í–∏–º–∫–Ω–µ–Ω–æ - –º–æ–∂–µ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É–≤–∞—Ç–∏
    code
  end
  
  def remove_comments(code)
    code.gsub(/^\s*#(?![!{]).*$/, '')
        .gsub(/([^"'])(\s+#[^{].*$)/, '\1')
  end
  
  def minify_whitespace(code)
    code.gsub(/\n\s*\n+/, "\n")
        .gsub(/^\s+$/, '')
        .gsub(/\n{3,}/, "\n")
  end
  
  def obfuscate_strings(code)
    # –ö–æ–¥—É—î–º–æ —Ä—è–¥–∫–∏ –≤ Base64
    code.gsub(/"([^"\\]*(\\.[^"\\]*)*)"/) do |match|
      str = $1
      # –ù–µ –∫–æ–¥—É—î–º–æ –¥—É–∂–µ –∫–æ—Ä–æ—Ç–∫—ñ —Ä—è–¥–∫–∏ —Ç–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ
      next match if str.length < 5
      next match if str =~ /^[a-z_]+$/ # identifier-like
      
      encoded = Base64.strict_encode64(str)
      "Base64.decode64('#{encoded}')"
    end
  end
  
  def obfuscate_variables(code)
    # –ó–∞–º—ñ–Ω—é—î–º–æ –Ω–∞–∑–≤–∏ –ª–æ–∫–∞–ª—å–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö
    # –û–±–µ—Ä–µ–∂–Ω–æ –∑ –∫–ª—é—á–æ–≤–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ —Ç–∞ –º–µ—Ç–æ–¥–∞–º–∏ API
    
    # –°–ø–∏—Å–æ–∫ –¥–ª—è –∑–∞–º—ñ–Ω–∏ (–ø—Ä–∏–∫–ª–∞–¥)
    replacements = {
      # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
    }
    
    # –î–ª—è production –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Å–∫–ª–∞–¥–Ω—ñ—à–∏–π –∞–Ω–∞–ª—ñ–∑
    code
  end
  
  def add_junk_code(code)
    # –î–æ–¥–∞—î–º–æ "–º–µ—Ä—Ç–≤–∏–π" –∫–æ–¥ –¥–ª—è —É—Å–∫–ª–∞–¥–Ω–µ–Ω–Ω—è –∞–Ω–∞–ª—ñ–∑—É
    junk = "\n# #{rand(100000..999999)}\n"
    junk + code + junk
  end
  
  def generate_key
    Digest::SHA256.hexdigest("#{PLUGIN_NAME}-#{VERSION}-#{Time.now.to_i}")
  end
  
  def should_exclude?(file)
    [/\.git/, /\.rbz$/, /production_test\.rb$/].any? { |p| file =~ p }
  end
  
  def print_instructions
    puts "\n" + "=" * 70
    puts "üìñ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê –û–ë–§–£–°–ö–ê–¶–Ü–Ø"
    puts "=" * 70
    puts "\nüîê –ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ:"
    puts "  ‚Ä¢ –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤"
    puts "  ‚Ä¢ –ú—ñ–Ω—ñ–º—ñ–∑–∞—Ü—ñ—è –∫–æ–¥—É"
    puts "  ‚Ä¢ Base64 –∫–æ–¥—É–≤–∞–Ω–Ω—è —Ä—è–¥–∫—ñ–≤"
    puts "  ‚Ä¢ –û–±—Ñ—É—Å–∫–∞—Ü—ñ—è –∑–º—ñ–Ω–Ω–∏—Ö (—á–∞—Å—Ç–∫–æ–≤–∞)"
    puts "  ‚Ä¢ –î–æ–¥–∞–≤–∞–Ω–Ω—è junk –∫–æ–¥—É"
    puts "\n‚ö†Ô∏è –û–ë–ú–ï–ñ–ï–ù–ù–Ø:"
    puts "  ‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è (SketchUp –≤–∏–º–æ–≥–∞)"
    puts "  ‚Ä¢ –ù–∞–∑–≤–∏ –º–æ–¥—É–ª—ñ–≤ —Ç–∞ –∫–ª–∞—Å—ñ–≤ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è (Ruby –≤–∏–º–æ–≥–∞)"
    puts "  ‚Ä¢ –î–ª—è –ü–û–í–ù–û–á –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ RubyEncoder"
    puts "\n" + "=" * 70
  end
end

if __FILE__ == $0
  builder = AdvancedObfuscator.new
  builder.build
end

