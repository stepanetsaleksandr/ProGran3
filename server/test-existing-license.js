// –¢–µ—Å—Ç –∑ —ñ—Å–Ω—É—é—á–æ—é –ª—ñ—Ü–µ–Ω–∑—ñ—î—é –∑ create_tables.sql
const https = require('https');

const API_BASE = 'https://progran3-tracking-server-cuy1q2xn9-provis3ds-projects.vercel.app';

async function makeRequest(path, method = 'GET', data = null) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'progran3-tracking-server-cuy1q2xn9-provis3ds-projects.vercel.app',
      port: 443,
      path: path,
      method: method,
      headers: {
        'Content-Type': 'application/json',
      }
    };

    const req = https.request(options, (res) => {
      let body = '';
      res.on('data', (chunk) => {
        body += chunk;
      });
      res.on('end', () => {
        try {
          const result = JSON.parse(body);
          resolve({ status: res.statusCode, data: result });
        } catch (e) {
          resolve({ status: res.statusCode, data: body });
        }
      });
    });

    req.on('error', (err) => {
      reject(err);
    });

    if (data) {
      req.write(JSON.stringify(data));
    }
    req.end();
  });
}

async function testExistingLicense() {
  console.log('üß™ –¢–µ—Å—Ç –∑ —ñ—Å–Ω—É—é—á–∏–º–∏ –ª—ñ—Ü–µ–Ω–∑—ñ—è–º–∏ –∑ create_tables.sql');
  console.log('=' * 60);
  
  // –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤–∏—Ö –ª—ñ—Ü–µ–Ω–∑—ñ–π –∑ create_tables.sql
  const testLicenses = [
    'TQ58-IKVR-9X2M-7N4P',
    'DEMO-1234-5678-9ABC', 
    'FULL-ABCD-EFGH-IJKL'
  ];
  
  for (const licenseKey of testLicenses) {
    console.log(`\nüîë –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ª—ñ—Ü–µ–Ω–∑—ñ—ó: ${licenseKey}`);
    
    try {
      const activationData = {
        email: 'test@progran3.com',
        license_key: licenseKey,
        hardware_id: 'test-hardware-id-123'
      };
      
      const response = await makeRequest('/api/license/register-simple', 'POST', activationData);
      
      console.log(`   –°—Ç–∞—Ç—É—Å: ${response.status}`);
      console.log(`   –í—ñ–¥–ø–æ–≤—ñ–¥—å: ${JSON.stringify(response.data, null, 2)}`);
      
      if (response.status === 200) {
        console.log(`   ‚úÖ –õ—ñ—Ü–µ–Ω–∑—ñ—è ${licenseKey} –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!`);
        break; // –Ø–∫—â–æ –∑–Ω–∞–π—à–ª–∏ —Ä–æ–±–æ—á—É –ª—ñ—Ü–µ–Ω–∑—ñ—é, –∑—É–ø–∏–Ω—è—î–º–æ—Å—è
      } else {
        console.log(`   ‚ùå –õ—ñ—Ü–µ–Ω–∑—ñ—è ${licenseKey} –Ω–µ –ø—Ä–∞—Ü—é—î`);
      }
    } catch (error) {
      console.log(`   ‚ùå –ü–æ–º–∏–ª–∫–∞: ${error.message}`);
    }
  }
  
  console.log('\n' + '=' * 60);
  console.log('‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  console.log('\nüìã –î–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤ SketchUp –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ:');
  console.log('   Email: test@progran3.com');
  console.log('   –ö–ª—é—á: TQ58-IKVR-9X2M-7N4P (–∞–±–æ —ñ–Ω—à–∏–π –∑ —Å–ø–∏—Å–∫—É –≤–∏—â–µ)');
}

testExistingLicense();
