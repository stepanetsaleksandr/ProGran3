import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.STORAGE_SUPABASE_URL || process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseKey = process.env.STORAGE_SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_SERVICE_ROLE_KEY!;
const supabase = createClient(supabaseUrl, supabaseKey);

export async function POST(request: NextRequest) {
  try {
    const { email, license_key, hardware_id } = await request.json();
    
    console.log('üî¨ [DEBUG] –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –ª—ñ—Ü–µ–Ω–∑—ñ—ó:', {
      email,
      license_key: license_key?.substring(0, 8) + '...',
      hardware_id
    });

    // 1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –ª—ñ—Ü–µ–Ω–∑—ñ—è
    const { data: license, error: licenseError } = await supabase
      .from('licenses')
      .select('*')
      .eq('license_key', license_key)
      .single();

    console.log('üî¨ [DEBUG] –õ—ñ—Ü–µ–Ω–∑—ñ—è –≤ –ë–î:', license ? '–∑–Ω–∞–π–¥–µ–Ω–∞' : '–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞', licenseError?.message);

    if (!license) {
      return NextResponse.json({
        success: false,
        step: 'license_check',
        error: 'License not found',
        details: licenseError?.message
      });
    }

    // 2. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó
    const { data: existingActivations, error: activationsError } = await supabase
      .from('user_licenses')
      .select('*')
      .eq('license_key', license_key);

    console.log('üî¨ [DEBUG] –ü–æ—Ç–æ—á–Ω—ñ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó:', existingActivations?.length || 0, '–∑ –º–∞–∫—Å–∏–º—É–º', license.max_activations);

    // 3. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –Ω–∞ —Ü—å–æ–º—É –ø—Ä–∏—Å—Ç—Ä–æ—ó
    const { data: existingDevice, error: deviceError } = await supabase
      .from('user_licenses')
      .select('*')
      .eq('license_key', license_key)
      .eq('hardware_id', hardware_id)
      .single();

    console.log('üî¨ [DEBUG] –ê–∫—Ç–∏–≤–∞—Ü—ñ—è –Ω–∞ —Ü—å–æ–º—É –ø—Ä–∏—Å—Ç—Ä–æ—ó:', existingDevice ? '—ñ—Å–Ω—É—î' : '–Ω–µ —ñ—Å–Ω—É—î');

    if (existingDevice) {
      return NextResponse.json({
        success: false,
        step: 'device_check',
        error: 'Already activated on this device',
        existing_activation: existingDevice
      });
    }

    // 4. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª—ñ–º—ñ—Ç –∞–∫—Ç–∏–≤–∞—Ü—ñ–π
    const activationCount = existingActivations?.length || 0;
    if (activationCount >= license.max_activations) {
      return NextResponse.json({
        success: false,
        step: 'activation_limit_check',
        error: 'Activation limit exceeded',
        current_count: activationCount,
        max_activations: license.max_activations
      });
    }

    // 5. –°–ø—Ä–æ–±—É—î–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∞–∫—Ç–∏–≤–∞—Ü—ñ—é
    const { data: newActivation, error: createError } = await supabase
      .from('user_licenses')
      .insert({
        email: email,
        license_key: license_key,
        hardware_id: hardware_id,
        activated_at: new Date().toISOString(),
        is_active: true,
        last_heartbeat: new Date().toISOString(),
        offline_count: 0,
        max_offline_hours: 24
      })
      .select()
      .single();

    if (createError) {
      console.error('üî¨ [DEBUG] –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó:', createError);
      return NextResponse.json({
        success: false,
        step: 'activation_creation',
        error: 'Failed to create activation',
        details: createError.message
      });
    }

    // 6. –û–Ω–æ–≤–ª—é—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –∞–∫—Ç–∏–≤–∞—Ü—ñ–π –≤ –ª—ñ—Ü–µ–Ω–∑—ñ—ó
    const { error: updateError } = await supabase
      .from('licenses')
      .update({ 
        activation_count: activationCount + 1,
        updated_at: new Date().toISOString()
      })
      .eq('id', license.id);

    if (updateError) {
      console.error('üî¨ [DEBUG] –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞:', updateError);
    }

    console.log('üî¨ [DEBUG] –ê–∫—Ç–∏–≤–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞:', newActivation.id);

    return NextResponse.json({
      success: true,
      step: 'completed',
      activation: newActivation,
      license_info: {
        id: license.id,
        license_key: license.license_key,
        activation_count: activationCount + 1,
        max_activations: license.max_activations
      }
    });

  } catch (error) {
    console.error('üî¨ [DEBUG] –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó:', error);
    return NextResponse.json({
      success: false,
      step: 'unexpected_error',
      error: 'Internal server error',
      details: (error as Error).message
    }, { status: 500 });
  }
}
