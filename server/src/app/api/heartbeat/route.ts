import { NextRequest, NextResponse } from 'next/server';
import { upsertPlugin, markPluginInactive } from '@/lib/database';
import { HeartbeatRequest, HeartbeatResponse, ErrorResponse } from '@/lib/types';
import { ErrorHandler } from '@/lib/error-handler';
import { SecureLogger } from '@/lib/secure-logger';
import { LicenseValidator } from '@/lib/license-validator';
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.SB_SUPABASE_URL || process.env.STORAGE_SUPABASE_URL || process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseKey = process.env.SB_SUPABASE_SERVICE_ROLE_KEY || process.env.STORAGE_SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_SERVICE_ROLE_KEY!;
const supabase = createClient(supabaseUrl, supabaseKey);

export async function POST(request: NextRequest) {
  try {
    // –û—Ç—Ä–∏–º—É—î–º–æ IP –∞–¥—Ä–µ—Å—É –∫–ª—ñ—î–Ω—Ç–∞
    const ipAddress = request.headers.get('x-forwarded-for') || 
                     request.headers.get('x-real-ip') || 
                     '127.0.0.1';

    // –ü–∞—Ä—Å–∏–º–æ –¥–∞–Ω—ñ –∑ –∑–∞–ø–∏—Ç—É
    const data: HeartbeatRequest = await request.json();
    
    // –ë–µ–∑–ø–µ—á–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è heartbeat
    SecureLogger.logHeartbeat(data);

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
    ErrorHandler.validateRequiredFields(data, [
      'plugin_id', 'plugin_name', 'version', 'user_id', 'computer_name'
    ]);

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è plugin_id —Ñ–æ—Ä–º–∞—Ç—É
    ErrorHandler.validatePluginId(data.plugin_id);

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è timestamp —Ñ–æ—Ä–º–∞—Ç—É
    ErrorHandler.validateTimestamp(data.timestamp);

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∏–ø –¥—ñ—ó
    const action = data.action || 'heartbeat_update';
    
    let result;
    let message;
    let isBlocked: boolean | undefined = false;
    
    if (action === 'plugin_shutdown') {
      // –û–±—Ä–æ–±–ª—è—î–º–æ —Å–∏–≥–Ω–∞–ª –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–ª–∞–≥—ñ–Ω–∞
      result = await markPluginInactive(data.plugin_id);
      message = 'Plugin shutdown signal received';
    } else {
      // –ó–≤–∏—á–∞–π–Ω–∏–π heartbeat
      message = 'Heartbeat updated successfully';
      
      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ—Ü–µ–Ω–∑—ñ—ó –≤ –Ω–æ–≤—ñ–π —Å–∏—Å—Ç–µ–º—ñ (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î –¥–∞–Ω—ñ –ª—ñ—Ü–µ–Ω–∑—ñ—ó)
      if (data.license_info && data.license_info.email && data.license_info.license_key && data.license_info.hardware_id) {
        // –í–∞–ª—ñ–¥—É—î–º–æ –ª—ñ—Ü–µ–Ω–∑—ñ—é
        const licenseValidation = await LicenseValidator.validateLicense({
          email: data.license_info.email,
          license_key: data.license_info.license_key,
          hardware_id: data.license_info.hardware_id
        });

        console.log('üîç [HEARTBEAT] License validation result:', {
          isValid: licenseValidation.isValid,
          reason: licenseValidation.reason,
          email: data.license_info.email,
          hardware_id: data.license_info.hardware_id
        });
        
        if (!licenseValidation.isValid) {
          SecureLogger.warn('License validation failed', {
            email: data.license_info.email,
            reason: licenseValidation.reason
          }, 'HEARTBEAT');
          isBlocked = true;
        } else {
          // –û–Ω–æ–≤–ª—é—î–º–æ heartbeat
          await LicenseValidator.updateHeartbeat({
            email: data.license_info.email,
            license_key: data.license_info.license_key,
            hardware_id: data.license_info.hardware_id
          });
          // –Ø–∫—â–æ –ª—ñ—Ü–µ–Ω–∑—ñ—è –≤–∞–ª—ñ–¥–Ω–∞, –ù–ï –±–ª–æ–∫—É—î–º–æ –ø–ª–∞–≥—ñ–Ω
          isBlocked = false;
        }
      } else {
        // –ù–ï –±–ª–æ–∫—É—î–º–æ –ø–ª–∞–≥—ñ–Ω —è–∫—â–æ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –ª—ñ—Ü–µ–Ω–∑—ñ—ó –≤ heartbeat
        // –¶–µ –º–æ–∂–µ –±—É—Ç–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–∞ —Å–∏—Ç—É–∞—Ü—ñ—è (–ø–ª–∞–≥—ñ–Ω —â–µ –Ω–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏–π –∞–±–æ heartbeat –±–µ–∑ –ª—ñ—Ü–µ–Ω–∑—ñ—ó)
        console.log('‚ÑπÔ∏è [API] –í—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ –ª—ñ—Ü–µ–Ω–∑—ñ—ó –≤ heartbeat - –∑–∞–ª–∏—à–∞—î–º–æ –ø–ª–∞–≥—ñ–Ω –∞–∫—Ç–∏–≤–Ω–∏–º');
        // –Ø–≤–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ false —â–æ–± –Ω–µ –±–ª–æ–∫—É–≤–∞—Ç–∏ –ø–ª–∞–≥—ñ–Ω
        isBlocked = false;
      }
      
      // –û–Ω–æ–≤–ª—é—î–º–æ –ø–ª–∞–≥—ñ–Ω –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Å—Ç–∞—Ç—É—Å—É –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
      result = await upsertPlugin(data, ipAddress, isBlocked);
      
      // –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      console.log('üîç [HEARTBEAT] Debug info:', {
        plugin_id: data.plugin_id,
        has_license: !!(data.license_info && data.license_info.email),
        isBlocked,
        result_is_active: result.is_active,
        result_is_blocked: result.is_blocked
      });
      
      // –ö–†–ò–¢–ò–ß–ù–û: –Ø–∫—â–æ –ø–ª–∞–≥—ñ–Ω –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π –≤ –±–∞–∑—ñ, –∞–ª–µ –º–∏ –Ω–µ —Ö–æ—á–µ–º–æ –π–æ–≥–æ –±–ª–æ–∫—É–≤–∞—Ç–∏ - —Ä–æ–∑–±–ª–æ–∫–æ–≤—É—î–º–æ
      if (result.is_blocked && !isBlocked) {
        console.log('üîì [HEARTBEAT] –†–æ–∑–±–ª–æ–∫–æ–≤—É—î–º–æ –ø–ª–∞–≥—ñ–Ω –≤ –±–∞–∑—ñ...');
        const { error: unblockError } = await supabase
          .from('plugins')
          .update({
            is_blocked: false,
            is_active: true,
            updated_at: new Date().toISOString()
          })
          .eq('plugin_id', data.plugin_id);
        
        if (!unblockError) {
          result.is_blocked = false;
          result.is_active = true;
          console.log('‚úÖ [HEARTBEAT] –ü–ª–∞–≥—ñ–Ω —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ –≤ –±–∞–∑—ñ');
        }
      }
    }

    // –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    const response: HeartbeatResponse = {
      success: true,
      message: message,
      plugin: {
        id: result.id,
        plugin_id: result.plugin_id,
        last_heartbeat: result.last_heartbeat,
        is_active: result.is_active,
        is_blocked: false // –ó–ê–í–ñ–î–ò false –¥–ª—è heartbeat - –Ω–µ –±–ª–æ–∫—É—î–º–æ –ø–ª–∞–≥—ñ–Ω
      }
    };

    // –î–æ–¥–∞—Ç–∫–æ–≤–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è (—Ç—ñ–ª—å–∫–∏ –≤ development)
    if (process.env.NODE_ENV === 'development') {
      console.log('Heartbeat response:', JSON.stringify({
        plugin_id: result.plugin_id,
        is_active: result.is_active,
        is_blocked: (result as any).is_blocked,
        full_result: result
      }, null, 2));
    }

    // –î–æ–¥–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –∫–µ—à—É–≤–∞–Ω–Ω—è
    const nextResponse = NextResponse.json(response);
    nextResponse.headers.set('Cache-Control', 'no-cache, no-store, must-revalidate');
    nextResponse.headers.set('Pragma', 'no-cache');
    nextResponse.headers.set('Expires', '0');

    return nextResponse;

  } catch (error) {
    return ErrorHandler.handle(error, 'HEARTBEAT');
  }
}

// –û–±—Ä–æ–±–∫–∞ OPTIONS –∑–∞–ø–∏—Ç—É –¥–ª—è CORS
export async function OPTIONS() {
  return new NextResponse(null, {
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'POST, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    },
  });
}
