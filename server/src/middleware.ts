import { NextRequest, NextResponse } from 'next/server';

// Rate limiting storage (–≤ –ø—Ä–æ–¥–∞–∫—à–Ω—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ Redis)
const rateLimit = new Map<string, { count: number; resetTime: number }>();

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è rate limiting
const RATE_LIMIT_CONFIG = {
  windowMs: 60 * 1000, // 1 —Ö–≤–∏–ª–∏–Ω–∞
  maxRequests: 100, // –ú–∞–∫—Å–∏–º—É–º 100 –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ —Ö–≤–∏–ª–∏–Ω—É
  heartbeatMaxRequests: 60, // –ú–∞–∫—Å–∏–º—É–º 60 heartbeat –Ω–∞ —Ö–≤–∏–ª–∏–Ω—É (1 –Ω–∞ —Å–µ–∫—É–Ω–¥—É)
  licenseMaxRequests: 20, // –ú–∞–∫—Å–∏–º—É–º 20 —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π –ª—ñ—Ü–µ–Ω–∑—ñ–π –Ω–∞ —Ö–≤–∏–ª–∏–Ω—É
};

// –û—á–∏—â–µ–Ω–Ω—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω
setInterval(() => {
  const now = Date.now();
  const entries = Array.from(rateLimit.entries());
  for (const [ip, data] of entries) {
    if (now > data.resetTime) {
      rateLimit.delete(ip);
    }
  }
}, 5 * 60 * 1000);

function getRateLimitKey(request: NextRequest): string {
  const ip = request.headers.get('x-forwarded-for') || 
             request.headers.get('x-real-ip') || 
             request.ip || 
             '127.0.0.1';
  return ip.split(',')[0].trim();
}

function checkRateLimit(ip: string, maxRequests: number): { allowed: boolean; remaining: number; resetTime: number } {
  const now = Date.now();
  const windowMs = RATE_LIMIT_CONFIG.windowMs;
  
  if (!rateLimit.has(ip)) {
    rateLimit.set(ip, { count: 1, resetTime: now + windowMs });
    return { allowed: true, remaining: maxRequests - 1, resetTime: now + windowMs };
  }
  
  const userLimit = rateLimit.get(ip)!;
  
  if (now > userLimit.resetTime) {
    // –û–∫–Ω–æ —Å–±—Ä–æ—à–µ–Ω–æ
    userLimit.count = 1;
    userLimit.resetTime = now + windowMs;
    return { allowed: true, remaining: maxRequests - 1, resetTime: now + windowMs };
  }
  
  if (userLimit.count >= maxRequests) {
    return { allowed: false, remaining: 0, resetTime: userLimit.resetTime };
  }
  
  userLimit.count++;
  return { allowed: true, remaining: maxRequests - userLimit.count, resetTime: userLimit.resetTime };
}

export function middleware(request: NextRequest) {
  const ip = getRateLimitKey(request);
  const pathname = request.nextUrl.pathname;
  
  // –í–∏–∑–Ω–∞—á–∞—î–º–æ –ª—ñ–º—ñ—Ç–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ endpoint
  let maxRequests = RATE_LIMIT_CONFIG.maxRequests;
  
  if (pathname.startsWith('/api/heartbeat')) {
    maxRequests = RATE_LIMIT_CONFIG.heartbeatMaxRequests;
  } else if (pathname.startsWith('/api/license/register')) {
    maxRequests = RATE_LIMIT_CONFIG.licenseMaxRequests;
  }
  
  const rateLimitResult = checkRateLimit(ip, maxRequests);
  
  if (!rateLimitResult.allowed) {
    // –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    console.log(`üö´ [RATE_LIMIT] IP: ${ip}, Path: ${pathname}, Limit: ${maxRequests}, Reset: ${new Date(rateLimitResult.resetTime).toISOString()}`);
    
    const response = NextResponse.json(
      {
        success: false,
        error: 'Too Many Requests',
        code: 'RATE_LIMIT_EXCEEDED',
        retryAfter: Math.ceil((rateLimitResult.resetTime - Date.now()) / 1000)
      },
      { status: 429 }
    );
    
    response.headers.set('Retry-After', Math.ceil((rateLimitResult.resetTime - Date.now()) / 1000).toString());
    response.headers.set('X-RateLimit-Limit', maxRequests.toString());
    response.headers.set('X-RateLimit-Remaining', '0');
    response.headers.set('X-RateLimit-Reset', rateLimitResult.resetTime.toString());
    
    return response;
  }
  
  // –î–æ–¥–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ rate limiting –¥–æ –≤—Å—ñ—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
  const response = NextResponse.next();
  response.headers.set('X-RateLimit-Limit', maxRequests.toString());
  response.headers.set('X-RateLimit-Remaining', rateLimitResult.remaining.toString());
  response.headers.set('X-RateLimit-Reset', rateLimitResult.resetTime.toString());
  
  // –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è license endpoints)
  if (pathname.startsWith('/api/license/register')) {
    console.log(`‚úÖ [RATE_LIMIT] IP: ${ip}, Path: ${pathname}, Remaining: ${rateLimitResult.remaining}/${maxRequests}`);
  }
  
  return response;
}

export const config = {
  matcher: [
    '/api/:path*',
  ],
};
