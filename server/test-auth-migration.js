/**
 * –¢–µ—Å—Ç –º—ñ–≥—Ä–∞—Ü—ñ—ó –∑ –ø—É–±–ª—ñ—á–Ω–∏—Ö API –∫–ª—é—á—ñ–≤ –Ω–∞ JWT
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –ø—Ä–∞—Ü—é—î –Ω–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
 */

const BASE_URL = 'http://localhost:3000';

async function testAuthMigration() {
  console.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º—ñ–≥—Ä–∞—Ü—ñ—ó –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó...\n');
  
  try {
    // –ö—Ä–æ–∫ 1: –¢–µ—Å—Ç –ª–æ–≥—ñ–Ω—É
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–Ω—É...');
    const loginResponse = await fetch(`${BASE_URL}/api/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        username: 'admin',
        password: 'admin123'
      })
    });
    
    const loginData = await loginResponse.json();
    
    if (!loginData.success) {
      throw new Error(`Login failed: ${loginData.error}`);
    }
    
    console.log('‚úÖ –õ–æ–≥—ñ–Ω —É—Å–ø—ñ—à–Ω–∏–π');
    console.log(`   Token: ${loginData.data.token.substring(0, 20)}...`);
    console.log(`   Expires: ${loginData.data.expires_in} seconds\n`);
    
    const token = loginData.data.token;
    
    // –ö—Ä–æ–∫ 2: –¢–µ—Å—Ç –∑–∞—Ö–∏—â–µ–Ω–æ–≥–æ endpoint
    console.log('2Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞—Ö–∏—â–µ–Ω–æ–≥–æ endpoint...');
    const protectedResponse = await fetch(`${BASE_URL}/api/licenses`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    const protectedData = await protectedResponse.json();
    
    if (!protectedResponse.ok) {
      throw new Error(`Protected endpoint failed: ${protectedData.error}`);
    }
    
    console.log('‚úÖ –ó–∞—Ö–∏—â–µ–Ω–∏–π endpoint –ø—Ä–∞—Ü—é—î');
    console.log(`   Licenses found: ${protectedData.data?.length || 0}\n`);
    
    // –ö—Ä–æ–∫ 3: –¢–µ—Å—Ç –±–µ–∑ —Ç–æ–∫–µ–Ω—É (–º–∞—î –Ω–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏)
    console.log('3Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑ —Ç–æ–∫–µ–Ω—É...');
    const noTokenResponse = await fetch(`${BASE_URL}/api/licenses`);
    
    if (noTokenResponse.ok) {
      console.log('‚ö†Ô∏è  WARNING: Endpoint –¥–æ—Å—Ç—É–ø–Ω–∏–π –±–µ–∑ —Ç–æ–∫–µ–Ω—É!');
    } else {
      console.log('‚úÖ Endpoint –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞—Ö–∏—â–µ–Ω–∏–π –±–µ–∑ —Ç–æ–∫–µ–Ω—É');
    }
    
    // –ö—Ä–æ–∫ 4: –¢–µ—Å—Ç –∑ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–º —Ç–æ–∫–µ–Ω–æ–º
    console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–º —Ç–æ–∫–µ–Ω–æ–º...');
    const invalidTokenResponse = await fetch(`${BASE_URL}/api/licenses`, {
      headers: {
        'Authorization': 'Bearer invalid-token'
      }
    });
    
    if (invalidTokenResponse.ok) {
      console.log('‚ö†Ô∏è  WARNING: Endpoint –ø—Ä–∏–π–º–∞—î –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ç–æ–∫–µ–Ω!');
    } else {
      console.log('‚úÖ Endpoint –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ñ–¥—Ö–∏–ª—è—î –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ç–æ–∫–µ–Ω');
    }
    
    console.log('\nüéâ –ú—ñ–≥—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!');
    console.log('‚úÖ JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è –ø—Ä–∞—Ü—é—î');
    console.log('‚úÖ –ü—É–±–ª—ñ—á–Ω—ñ API –∫–ª—é—á—ñ –∑–∞–º—ñ–Ω–µ–Ω—ñ');
    console.log('‚úÖ –ë–µ–∑–ø–µ–∫–∞ –ø–æ–∫—Ä–∞—â–µ–Ω–∞');
    
  } catch (error) {
    console.error('\n‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:', error.message);
    console.log('\nüîß –ú–æ–∂–ª–∏–≤—ñ —Ä—ñ—à–µ–Ω–Ω—è:');
    console.log('1. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —á–∏ –∑–∞–ø—É—â–µ–Ω–∏–π —Å–µ—Ä–≤–µ—Ä –Ω–∞ localhost:3000');
    console.log('2. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —á–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ environment variables');
    console.log('3. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —á–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π jsonwebtoken –ø–∞–∫–µ—Ç');
  }
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç
testAuthMigration();
