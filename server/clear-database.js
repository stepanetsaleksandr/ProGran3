// –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö ProGran3
// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è –≤—Å—ñ—Ö –ª—ñ—Ü–µ–Ω–∑—ñ–π

const { createClient } = require('@supabase/supabase-js');

// –û—Ç—Ä–∏–º—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ SUPABASE');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function clearDatabase() {
  try {
    console.log('üßπ –û—á–∏—â–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö ProGran3...');
    
    // 1. –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    console.log('üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–Ω—è user_licenses...');
    const { error: userLicensesError } = await supabase
      .from('user_licenses')
      .delete()
      .neq('id', 0); // –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –∑–∞–ø–∏—Å–∏
    
    if (userLicensesError) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è user_licenses:', userLicensesError);
    } else {
      console.log('‚úÖ user_licenses –æ—á–∏—â–µ–Ω–æ');
    }
    
    // 2. –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –ª—ñ—Ü–µ–Ω–∑—ñ—ó
    console.log('üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–Ω—è licenses...');
    const { error: licensesError } = await supabase
      .from('licenses')
      .delete()
      .neq('id', 0); // –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –∑–∞–ø–∏—Å–∏
    
    if (licensesError) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è licenses:', licensesError);
    } else {
      console.log('‚úÖ licenses –æ—á–∏—â–µ–Ω–æ');
    }
    
    // 3. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤...');
    
    const { count: userLicensesCount } = await supabase
      .from('user_licenses')
      .select('*', { count: 'exact', head: true });
    
    const { count: licensesCount } = await supabase
      .from('licenses')
      .select('*', { count: 'exact', head: true });
    
    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:`);
    console.log(`   user_licenses: ${userLicensesCount} –∑–∞–ø–∏—Å—ñ–≤`);
    console.log(`   licenses: ${licensesCount} –∑–∞–ø–∏—Å—ñ–≤`);
    
    if (userLicensesCount === 0 && licensesCount === 0) {
      console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —É—Å–ø—ñ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!');
    } else {
      console.log('‚ö†Ô∏è –î–µ—è–∫—ñ –∑–∞–ø–∏—Å–∏ –∑–∞–ª–∏—à–∏–ª–∏—Å—è');
    }
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ—á–∏—â–µ–Ω–Ω—è
clearDatabase();
