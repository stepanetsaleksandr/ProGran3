'use client';

import { useState } from 'react';
import { useLicenses } from '../hooks/useLicenses';
import { useDashboardContext } from '../context/DashboardContext';
import { useToast } from './Toast';

export default function LicenseManager() {
  const { licenses, loading, error, createLicense, deleteLicense } = useLicenses();
  const { refreshDashboard } = useDashboardContext();
  const { showToast } = useToast();
  const [showCreateForm, setShowCreateForm] = useState(false);
  const [newLicense, setNewLicense] = useState({
    duration_days: 30,
    description: ''
  });
  const [dbStatus, setDbStatus] = useState<string>('');

  // ‚úÖ –ë–ï–ó–ü–ï–ß–ù–û: –û—Ç—Ä–∏–º–∞–Ω–Ω—è JWT —Ç–æ–∫–µ–Ω—É
  const getAuthToken = async (): Promise<string> => {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Ç–æ–∫–µ–Ω
    const savedToken = localStorage.getItem('admin_token');
    const tokenExpiry = localStorage.getItem('admin_token_expiry');
    
    // –Ø–∫—â–æ —Ç–æ–∫–µ–Ω —î —ñ –Ω–µ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π
    if (savedToken && tokenExpiry && parseInt(tokenExpiry) > Date.now()) {
      return savedToken;
    }
    
    // –õ–æ–≥—ñ–Ω–∏–º–æ—Å—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω—É
    try {
      const response = await fetch('/api/auth/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          username: 'admin', // TODO: –û—Ç—Ä–∏–º–∞—Ç–∏ –∑ —Ñ–æ—Ä–º–∏ –ª–æ–≥—ñ–Ω—É
          password: 'admin123' // TODO: –û—Ç—Ä–∏–º–∞—Ç–∏ –∑ —Ñ–æ—Ä–º–∏ –ª–æ–≥—ñ–Ω—É
        })
      });
      
      const data = await response.json();
      
      if (data.success && data.data.token) {
        const token = data.data.token;
        const expiresIn = data.data.expires_in * 1000; // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∏
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–æ–∫–µ–Ω
        localStorage.setItem('admin_token', token);
        localStorage.setItem('admin_token_expiry', (Date.now() + expiresIn).toString());
        
        return token;
      } else {
        throw new Error(data.error || 'Login failed');
      }
    } catch (error) {
      console.error('Auth token error:', error);
      throw new Error('Failed to get authentication token');
    }
  };

  const testConnection = async () => {
    try {
      setDbStatus('üîÑ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è...');
      // Simple test by fetching licenses
      const response = await fetch('/api/licenses');
      const data = await response.json();
      
      if (data.success) {
        setDbStatus('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø—Ä–∞—Ü—é—î');
        showToast(`–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Supabase –ø—Ä–∞—Ü—é—î –Ω–æ—Ä–º–∞–ª—å–Ω–æ! –ó–Ω–∞–π–¥–µ–Ω–æ ${data.data.length} –ª—ñ—Ü–µ–Ω–∑—ñ–π`, 'success');
      } else {
        setDbStatus(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: ${data.error}`);
        showToast(`–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: ${data.error}`, 'error');
      }
    } catch (error) {
      console.error('Error testing connection:', error);
      setDbStatus('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è');
      showToast('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—ñ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è', 'error');
    }
  };


  const handleCreateLicense = async (e: React.FormEvent) => {
    e.preventDefault();
    
    const success = await createLicense(newLicense);
    
    if (success) {
      setShowCreateForm(false);
      setNewLicense({ duration_days: 30, description: '' });
      // Refresh dashboard stats after creating license
      await refreshDashboard();
      showToast('–ö–ª—é—á –ª—ñ—Ü–µ–Ω–∑—ñ—ó —É—Å–ø—ñ—à–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ!', 'success');
    }
  };

  // v3.2: –°—Ç–∞—Ç—É—Å–∏ —Ç–µ–ø–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ - —Ä—É—á–Ω–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ
  
  const handleDeleteLicense = async (id: string) => {
    if (!confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü—é –ª—ñ—Ü–µ–Ω–∑—ñ—é?')) return;
    
    const success = await deleteLicense(id);
    
    if (success) {
      // Refresh dashboard stats after deleting license
      await refreshDashboard();
      showToast('–õ—ñ—Ü–µ–Ω–∑—ñ—é —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!', 'success');
    }
  };

  if (loading) {
    return (
      <div className="text-center py-8">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
        <p className="mt-2 text-gray-600">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ª—ñ—Ü–µ–Ω–∑—ñ–π...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-white rounded-lg shadow">
        <div className="px-6 py-4 border-b border-gray-200">
          <h2 className="text-lg font-medium text-gray-900">–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ª—ñ—Ü–µ–Ω–∑—ñ—è–º–∏</h2>
        </div>
        <div className="px-6 py-8 text-center">
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
            <p className="font-bold">–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ª—ñ—Ü–µ–Ω–∑—ñ–π</p>
            <p className="text-sm mt-1">{error}</p>
            <button 
              onClick={() => window.location.reload()}
              className="mt-3 bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700"
            >
              –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="bg-white rounded-lg shadow">
      <div className="px-6 py-4 border-b border-gray-200">
        <div className="flex justify-between items-center">
          <h2 className="text-lg font-medium text-gray-900">–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ª—ñ—Ü–µ–Ω–∑—ñ—è–º–∏</h2>
          <div className="flex space-x-2">
            <button
              onClick={testConnection}
              className="bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700"
            >
              –¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
            </button>
            <button
              onClick={() => setShowCreateForm(true)}
              className="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700"
            >
              –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∫–ª—é—á –ª—ñ—Ü–µ–Ω–∑—ñ—ó
            </button>
          </div>
        </div>
        {dbStatus && (
          <div className="mt-2 text-sm text-gray-600">
            {dbStatus}
          </div>
        )}
      </div>

      {showCreateForm && (
        <div className="px-6 py-4 border-b border-gray-200 bg-gray-50">
          <form onSubmit={handleCreateLicense} className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700">–¢–µ—Ä–º—ñ–Ω –¥—ñ—ó (–¥–Ω—ñ–≤)</label>
                <input
                  type="number"
                  min="1"
                  value={newLicense.duration_days}
                  onChange={(e) => setNewLicense({ ...newLicense, duration_days: parseInt(e.target.value) || 1 })}
                  className="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
                  required
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700">–û–ø–∏—Å</label>
                <input
                  type="text"
                  value={newLicense.description}
                  onChange={(e) => setNewLicense({ ...newLicense, description: e.target.value })}
                  placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –†—ñ—á–Ω–∞ –ª—ñ—Ü–µ–Ω–∑—ñ—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"
                  className="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
                />
              </div>
            </div>
            <div className="flex justify-end space-x-3">
              <button
                type="button"
                onClick={() => setShowCreateForm(false)}
                className="px-4 py-2 text-gray-700 bg-gray-200 rounded-md hover:bg-gray-300"
              >
                –°–∫–∞—Å—É–≤–∞—Ç–∏
              </button>
              <button
                type="submit"
                className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
              >
                –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∫–ª—é—á
              </button>
            </div>
          </form>
        </div>
      )}

      {licenses.length === 0 ? (
        <div className="px-6 py-8 text-center">
          <div className="text-gray-500">
            <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 7a2 2 0 012 2m0 0a2 2 0 012 2m-2-2v6m0 0a2 2 0 01-2 2H9a2 2 0 01-2-2V9a2 2 0 012-2h6z" />
            </svg>
            <h3 className="mt-2 text-sm font-medium text-gray-900">–ù–µ–º–∞—î –ª—ñ—Ü–µ–Ω–∑—ñ–π</h3>
            <p className="mt-1 text-sm text-gray-500">–°—Ç–≤–æ—Ä—ñ—Ç—å –ø–µ—Ä—à—É –ª—ñ—Ü–µ–Ω–∑—ñ—é, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É "–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∫–ª—é—á –ª—ñ—Ü–µ–Ω–∑—ñ—ó"</p>
            <div className="mt-6">
              <button
                onClick={() => setShowCreateForm(true)}
                className="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700"
              >
                –°—Ç–≤–æ—Ä–∏—Ç–∏ –ª—ñ—Ü–µ–Ω–∑—ñ—é
              </button>
            </div>
          </div>
        </div>
      ) : (
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–ö–ª—é—á –ª—ñ—Ü–µ–Ω–∑—ñ—ó</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–¢–µ—Ä–º—ñ–Ω</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–û–ø–∏—Å</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–°—Ç–∞—Ç—É—Å</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–ó–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–°—Ç–≤–æ—Ä–µ–Ω–æ</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–î—ñ—ó</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {licenses.map((license) => (
                <tr key={license.id}>
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-mono text-gray-900">
                    {license.license_key}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-blue-100 text-blue-800">
                      {license.duration_days} –¥–Ω—ñ–≤
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {license.description || 'N/A'}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                      license.status === 'active' ? 'bg-green-100 text-green-800' :
                      license.status === 'generated' ? 'bg-yellow-100 text-yellow-800' :
                      license.status === 'expired' ? 'bg-red-100 text-red-800' :
                      'bg-gray-100 text-gray-800'
                    }`}>
                      {license.status === 'active' ? '–ê–∫—Ç–∏–≤–Ω–∞' :
                       license.status === 'generated' ? '–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∞' :
                       license.status === 'expired' ? '–ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∞' :
                       license.status}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {license.expires_at ? 
                      new Date(license.expires_at).toLocaleDateString() : 
                      license.activated_at && license.duration_days ? 
                        new Date(new Date(license.activated_at).getTime() + license.duration_days * 24 * 60 * 60 * 1000).toLocaleDateString() :
                        'N/A'
                    }
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {license.users?.email || 'N/A'}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {new Date(license.created_at).toLocaleDateString()}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    <div className="flex space-x-2">
                      <button
                        onClick={() => {
                          navigator.clipboard.writeText(license.license_key);
                          showToast('–ö–ª—é—á —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É!', 'info');
                        }}
                        className="text-blue-600 hover:text-blue-800 text-xs px-2 py-1 border border-blue-300 rounded"
                        title="–ö–æ–ø—ñ—é–≤–∞—Ç–∏ –∫–ª—é—á"
                      >
                        üìã
                      </button>
                      <button
                        onClick={() => handleDeleteLicense(license.id)}
                        className="text-red-600 hover:text-red-800 text-xs px-2 py-1 border border-red-300 rounded"
                        title="–í–∏–¥–∞–ª–∏—Ç–∏ –ª—ñ—Ü–µ–Ω–∑—ñ—é"
                      >
                        üóëÔ∏è
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
    </div>
  );
}
