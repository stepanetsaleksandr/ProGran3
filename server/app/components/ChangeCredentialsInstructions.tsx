'use client';

import { useState } from 'react';

interface InstructionsProps {
  instructions: {
    step1: string;
    step2: string;
    step3: string;
    step4: string;
    newCredentials: {
      username: string;
      password: string;
    };
  };
  code: {
    typescript: string;
  };
}

export default function ChangeCredentialsInstructions({ instructions, code }: InstructionsProps) {
  const [showCode, setShowCode] = useState(false);
  const [copied, setCopied] = useState('');

  const copyToClipboard = async (text: string, type: string) => {
    try {
      await navigator.clipboard.writeText(text);
      setCopied(type);
      setTimeout(() => setCopied(''), 2000);
    } catch (err) {
      console.error('Failed to copy:', err);
    }
  };

  return (
    <div className="mt-6 bg-blue-50 border border-blue-200 rounded-lg p-6">
      <h3 className="text-lg font-semibold text-blue-900 mb-4">
        üìã –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–±–ª—ñ–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
      </h3>
      
      <div className="space-y-4">
        <div className="bg-white p-4 rounded border">
          <h4 className="font-medium text-gray-900 mb-2">üîß –ö—Ä–æ–∫ 1: –û–Ω–æ–≤—ñ—Ç—å Environment Variables</h4>
          <div className="space-y-2">
            <div className="flex items-center justify-between bg-gray-100 p-2 rounded">
              <code className="text-sm">{instructions.step2}</code>
              <button
                onClick={() => copyToClipboard(instructions.step2, 'step2')}
                className="ml-2 px-2 py-1 bg-blue-500 text-white text-xs rounded hover:bg-blue-600"
              >
                {copied === 'step2' ? '‚úÖ' : 'üìã'}
              </button>
            </div>
            <div className="flex items-center justify-between bg-gray-100 p-2 rounded">
              <code className="text-sm">{instructions.step3}</code>
              <button
                onClick={() => copyToClipboard(instructions.step3, 'step3')}
                className="ml-2 px-2 py-1 bg-blue-500 text-white text-xs rounded hover:bg-blue-600"
              >
                {copied === 'step3' ? '‚úÖ' : 'üìã'}
              </button>
            </div>
          </div>
        </div>

        <div className="bg-white p-4 rounded border">
          <h4 className="font-medium text-gray-900 mb-2">üöÄ –ö—Ä–æ–∫ 2: –î–µ–ø–ª–æ–π</h4>
          <div className="flex items-center justify-between bg-gray-100 p-2 rounded">
            <code className="text-sm">{instructions.step4}</code>
            <button
              onClick={() => copyToClipboard(instructions.step4, 'step4')}
              className="ml-2 px-2 py-1 bg-blue-500 text-white text-xs rounded hover:bg-blue-600"
            >
              {copied === 'step4' ? '‚úÖ' : 'üìã'}
            </button>
          </div>
        </div>

        <div className="bg-white p-4 rounded border">
          <h4 className="font-medium text-gray-900 mb-2">üîë –ù–æ–≤—ñ –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ</h4>
          <div className="space-y-2">
            <div className="flex items-center justify-between">
              <span className="text-sm text-gray-600">–õ–æ–≥—ñ–Ω:</span>
              <div className="flex items-center">
                <code className="text-sm font-mono bg-gray-100 px-2 py-1 rounded">
                  {instructions.newCredentials.username}
                </code>
                <button
                  onClick={() => copyToClipboard(instructions.newCredentials.username, 'username')}
                  className="ml-2 px-2 py-1 bg-blue-500 text-white text-xs rounded hover:bg-blue-600"
                >
                  {copied === 'username' ? '‚úÖ' : 'üìã'}
                </button>
              </div>
            </div>
            <div className="flex items-center justify-between">
              <span className="text-sm text-gray-600">–ü–∞—Ä–æ–ª—å:</span>
              <div className="flex items-center">
                <code className="text-sm font-mono bg-gray-100 px-2 py-1 rounded">
                  {'*'.repeat(instructions.newCredentials.password.length)}
                </code>
                <button
                  onClick={() => copyToClipboard(instructions.newCredentials.password, 'password')}
                  className="ml-2 px-2 py-1 bg-blue-500 text-white text-xs rounded hover:bg-blue-600"
                >
                  {copied === 'password' ? '‚úÖ' : 'üìã'}
                </button>
              </div>
            </div>
          </div>
        </div>

        <div className="bg-white p-4 rounded border">
          <div className="flex items-center justify-between mb-2">
            <h4 className="font-medium text-gray-900">üíª –ö–æ–¥ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è</h4>
            <button
              onClick={() => setShowCode(!showCode)}
              className="px-3 py-1 bg-gray-500 text-white text-xs rounded hover:bg-gray-600"
            >
              {showCode ? '–°—Ö–æ–≤–∞—Ç–∏' : '–ü–æ–∫–∞–∑–∞—Ç–∏'}
            </button>
          </div>
          
          {showCode && (
            <div className="relative">
              <pre className="bg-gray-900 text-green-400 p-4 rounded text-sm overflow-x-auto">
                <code>{code.typescript}</code>
              </pre>
              <button
                onClick={() => copyToClipboard(code.typescript, 'code')}
                className="absolute top-2 right-2 px-2 py-1 bg-blue-500 text-white text-xs rounded hover:bg-blue-600"
              >
                {copied === 'code' ? '‚úÖ' : 'üìã'}
              </button>
            </div>
          )}
        </div>

        <div className="bg-yellow-50 border border-yellow-200 p-4 rounded">
          <h4 className="font-medium text-yellow-900 mb-2">‚ö†Ô∏è –í–∞–∂–ª–∏–≤–æ!</h4>
          <ul className="text-sm text-yellow-800 space-y-1">
            <li>‚Ä¢ –ó–±–µ—Ä–µ–∂—ñ—Ç—å –Ω–æ–≤—ñ –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ –≤ –±–µ–∑–ø–µ—á–Ω–æ–º—É –º—ñ—Å—Ü—ñ</li>
            <li>‚Ä¢ –ü—ñ—Å–ª—è –¥–µ–ø–ª–æ—é –ø—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ –Ω–æ–≤—ñ –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ</li>
            <li>‚Ä¢ –°—Ç–∞—Ä—ñ –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ –ø–µ—Ä–µ—Å—Ç–∞–Ω—É—Ç—å –ø—Ä–∞—Ü—é–≤–∞—Ç–∏</li>
            <li>‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –ø–∞—Ä–æ–ª—ñ —Ä–µ–≥—É–ª—è—Ä–Ω–æ</li>
          </ul>
        </div>
      </div>
    </div>
  );
}
