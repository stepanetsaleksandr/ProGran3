'use client';

import { useState } from 'react';
import { useAuth } from '../../context/AuthContext';
import ChangeCredentialsInstructions from '../../components/ChangeCredentialsInstructions';

export default function ChangeCredentialsPage() {
  const [currentPassword, setCurrentPassword] = useState('');
  const [newUsername, setNewUsername] = useState('');
  const [newPassword, setNewPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [instructions, setInstructions] = useState<any>(null);
  const { logout } = useAuth();

  const validatePassword = (password: string) => {
    const checks = {
      length: password.length >= 20,
      uppercase: /[A-Z]/.test(password),
      lowercase: /[a-z]/.test(password),
      numbers: /[0-9]/.test(password),
      symbols: /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(password)
    };
    
    const passed = Object.values(checks).filter(Boolean).length;
    
    return {
      valid: passed >= 4,
      checks,
      score: passed
    };
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    setSuccess('');

    try {
      // –í–∞–ª—ñ–¥–∞—Ü—ñ—è
      if (newPassword !== confirmPassword) {
        setError('–ü–∞—Ä–æ–ª—ñ –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å');
        return;
      }

      const validation = validatePassword(newPassword);
      if (!validation.valid) {
        setError('–ü–∞—Ä–æ–ª—å –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –≤–∏–º–æ–≥–∞–º –±–µ–∑–ø–µ–∫–∏');
        return;
      }

      if (newUsername.length < 8) {
        setError('–õ–æ–≥—ñ–Ω –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 8 —Å–∏–º–≤–æ–ª—ñ–≤');
        return;
      }

      // API –∑–∞–ø–∏—Ç –¥–ª—è –∑–º—ñ–Ω–∏ –æ–±–ª—ñ–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
      const response = await fetch('/api/admin/change-credentials', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('admin_token')}`
        },
        body: JSON.stringify({
          currentPassword,
          newUsername,
          newPassword,
          confirmPassword
        })
      });

      const data = await response.json();

      if (data.success) {
        setSuccess('–û–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ –≥–æ—Ç–æ–≤—ñ –¥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –Ω–∏–∂—á–µ.');
        setInstructions(data.data);
      } else {
        setError(data.error || '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –æ–±–ª—ñ–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö');
      }
      
    } catch (err) {
      setError('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –æ–±–ª—ñ–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö');
    } finally {
      setLoading(false);
    }
  };

  const passwordValidation = validatePassword(newPassword);

  return (
    <div className="min-h-screen bg-gray-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        <div>
          <div className="mx-auto h-12 w-12 flex items-center justify-center rounded-full bg-red-100">
            <svg className="h-6 w-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
            </svg>
          </div>
          <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
            –ó–º—ñ–Ω–∞ –æ–±–ª—ñ–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
          </h2>
          <p className="mt-2 text-center text-sm text-gray-600">
            –û–Ω–æ–≤—ñ—Ç—å –ª–æ–≥—ñ–Ω —Ç–∞ –ø–∞—Ä–æ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
          </p>
        </div>

        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
          <div className="space-y-4">
            <div>
              <label htmlFor="currentPassword" className="block text-sm font-medium text-gray-700">
                –ü–æ—Ç–æ—á–Ω–∏–π –ø–∞—Ä–æ–ª—å
              </label>
              <input
                id="currentPassword"
                name="currentPassword"
                type="password"
                required
                className="mt-1 relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-md focus:outline-none focus:ring-red-500 focus:border-red-500 focus:z-10 sm:text-sm"
                placeholder="–í–≤–µ–¥—ñ—Ç—å –ø–æ—Ç–æ—á–Ω–∏–π –ø–∞—Ä–æ–ª—å"
                value={currentPassword}
                onChange={(e) => setCurrentPassword(e.target.value)}
                disabled={loading}
              />
            </div>

            <div>
              <label htmlFor="newUsername" className="block text-sm font-medium text-gray-700">
                –ù–æ–≤–∏–π –ª–æ–≥—ñ–Ω
              </label>
              <input
                id="newUsername"
                name="newUsername"
                type="text"
                required
                className="mt-1 relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-md focus:outline-none focus:ring-red-500 focus:border-red-500 focus:z-10 sm:text-sm"
                placeholder="–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –ª–æ–≥—ñ–Ω (–º—ñ–Ω. 8 —Å–∏–º–≤–æ–ª—ñ–≤)"
                value={newUsername}
                onChange={(e) => setNewUsername(e.target.value)}
                disabled={loading}
              />
            </div>

            <div>
              <label htmlFor="newPassword" className="block text-sm font-medium text-gray-700">
                –ù–æ–≤–∏–π –ø–∞—Ä–æ–ª—å
              </label>
              <input
                id="newPassword"
                name="newPassword"
                type="password"
                required
                className="mt-1 relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-md focus:outline-none focus:ring-red-500 focus:border-red-500 focus:z-10 sm:text-sm"
                placeholder="–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å (–º—ñ–Ω. 20 —Å–∏–º–≤–æ–ª—ñ–≤)"
                value={newPassword}
                onChange={(e) => setNewPassword(e.target.value)}
                disabled={loading}
              />
              
              {/* –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–∞—Ä–æ–ª—é */}
              {newPassword && (
                <div className="mt-2 text-xs">
                  <div className="grid grid-cols-2 gap-2">
                    <div className={`flex items-center ${passwordValidation.checks.length ? 'text-green-600' : 'text-red-600'}`}>
                      <span className="mr-1">{passwordValidation.checks.length ? '‚úÖ' : '‚ùå'}</span>
                      –î–æ–≤–∂–∏–Ω–∞ ‚â•20
                    </div>
                    <div className={`flex items-center ${passwordValidation.checks.uppercase ? 'text-green-600' : 'text-red-600'}`}>
                      <span className="mr-1">{passwordValidation.checks.uppercase ? '‚úÖ' : '‚ùå'}</span>
                      –í–µ–ª–∏–∫—ñ –ª—ñ—Ç–µ—Ä–∏
                    </div>
                    <div className={`flex items-center ${passwordValidation.checks.lowercase ? 'text-green-600' : 'text-red-600'}`}>
                      <span className="mr-1">{passwordValidation.checks.lowercase ? '‚úÖ' : '‚ùå'}</span>
                      –ú–∞–ª—ñ –ª—ñ—Ç–µ—Ä–∏
                    </div>
                    <div className={`flex items-center ${passwordValidation.checks.numbers ? 'text-green-600' : 'text-red-600'}`}>
                      <span className="mr-1">{passwordValidation.checks.numbers ? '‚úÖ' : '‚ùå'}</span>
                      –¶–∏—Ñ—Ä–∏
                    </div>
                    <div className={`flex items-center ${passwordValidation.checks.symbols ? 'text-green-600' : 'text-red-600'}`}>
                      <span className="mr-1">{passwordValidation.checks.symbols ? '‚úÖ' : '‚ùå'}</span>
                      –°–∏–º–≤–æ–ª–∏
                    </div>
                    <div className="flex items-center">
                      <span className="mr-1">üìä</span>
                      –ë–∞–ª: {passwordValidation.score}/5
                    </div>
                  </div>
                </div>
              )}
            </div>

            <div>
              <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700">
                –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—é
              </label>
              <input
                id="confirmPassword"
                name="confirmPassword"
                type="password"
                required
                className="mt-1 relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-md focus:outline-none focus:ring-red-500 focus:border-red-500 focus:z-10 sm:text-sm"
                placeholder="–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å"
                value={confirmPassword}
                onChange={(e) => setConfirmPassword(e.target.value)}
                disabled={loading}
              />
            </div>
          </div>

          {error && (
            <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-md text-sm">
              {error}
            </div>
          )}

          {success && (
            <div className="bg-green-50 border border-green-200 text-green-600 px-4 py-3 rounded-md text-sm">
              {success}
            </div>
          )}

          <div className="flex space-x-4">
            <button
              type="submit"
              disabled={loading}
              className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {loading ? '–ó–º—ñ–Ω–∞...' : '–ó–º—ñ–Ω–∏—Ç–∏ –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ'}
            </button>
            
            <button
              type="button"
              onClick={logout}
              className="group relative w-full flex justify-center py-2 px-4 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
            >
              –í–∏–π—Ç–∏
            </button>
          </div>
        </form>

        <div className="text-center">
          <p className="text-xs text-gray-500">
            ‚ö†Ô∏è –ó–º—ñ–Ω–∞ –æ–±–ª—ñ–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –ø–æ—Ç—Ä–µ–±—É—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–¥—É —Ç–∞ environment variables
          </p>
        </div>
      </div>

      {/* –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –∑–º—ñ–Ω–∏ */}
      {instructions && (
        <ChangeCredentialsInstructions 
          instructions={instructions.instructions}
          code={instructions.code}
        />
      )}
    </div>
  );
}
