// –¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤'—è —Å–µ—Ä–≤–µ—Ä–∞
const https = require('https');

const API_BASE = 'https://progran3-tracking-server-cuy1q2xn9-provis3ds-projects.vercel.app';

async function makeRequest(path, method = 'GET', data = null) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'progran3-tracking-server-cuy1q2xn9-provis3ds-projects.vercel.app',
      port: 443,
      path: path,
      method: method,
      headers: {
        'Content-Type': 'application/json',
      }
    };

    const req = https.request(options, (res) => {
      let body = '';
      res.on('data', (chunk) => {
        body += chunk;
      });
      res.on('end', () => {
        try {
          const result = JSON.parse(body);
          resolve({ status: res.statusCode, data: result });
        } catch (e) {
          resolve({ status: res.statusCode, data: body });
        }
      });
    });

    req.on('error', (err) => {
      reject(err);
    });

    if (data) {
      req.write(JSON.stringify(data));
    }
    req.end();
  });
}

async function testServerHealth() {
  console.log('üè• –¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—è —Å–µ—Ä–≤–µ—Ä–∞ ProGran3');
  console.log('=' * 50);
  
  // –¢–µ—Å—Ç 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤–µ—Ä–∞
  console.log('\n1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤–µ—Ä–∞:');
  try {
    const initResponse = await makeRequest('/api/init', 'GET');
    console.log(`   –°—Ç–∞—Ç—É—Å: ${initResponse.status}`);
    console.log(`   –í—ñ–¥–ø–æ–≤—ñ–¥—å: ${JSON.stringify(initResponse.data, null, 2)}`);
  } catch (error) {
    console.log(`   ‚ùå –ü–æ–º–∏–ª–∫–∞: ${error.message}`);
  }
  
  // –¢–µ—Å—Ç 2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ heartbeat API
  console.log('\n2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ heartbeat API:');
  try {
    const heartbeatData = {
      plugin_id: 'test-plugin-id',
      plugin_name: 'TestPlugin',
      version: '1.0.0',
      user_id: 'test@example.com',
      computer_name: 'TEST-COMPUTER',
      system_info: {
        os: 'test',
        ruby_version: '3.0.0',
        sketchup_version: '24.0.0',
        architecture: '64-bit'
      },
      timestamp: new Date().toISOString(),
      action: 'heartbeat_update',
      source: 'sketchup_plugin',
      update_existing: true,
      force_update: false,
      license_info: null
    };
    
    const heartbeatResponse = await makeRequest('/api/heartbeat', 'POST', heartbeatData);
    console.log(`   –°—Ç–∞—Ç—É—Å: ${heartbeatResponse.status}`);
    console.log(`   –í—ñ–¥–ø–æ–≤—ñ–¥—å: ${JSON.stringify(heartbeatResponse.data, null, 2)}`);
  } catch (error) {
    console.log(`   ‚ùå –ü–æ–º–∏–ª–∫–∞: ${error.message}`);
  }
  
  // –¢–µ—Å—Ç 3: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ license API –∑ –≤–∞–ª—ñ–¥–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
  console.log('\n3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ license API:');
  try {
    const licenseData = {
      email: 'test@progran3.com',
      license_key: 'TQ58-IKVR-9X2M-7N4P', // –Ü—Å–Ω—É—é—á–∞ –ª—ñ—Ü–µ–Ω–∑—ñ—è
      hardware_id: 'test-hardware-id-123'
    };
    
    const licenseResponse = await makeRequest('/api/license/register-simple', 'POST', licenseData);
    console.log(`   –°—Ç–∞—Ç—É—Å: ${licenseResponse.status}`);
    console.log(`   –í—ñ–¥–ø–æ–≤—ñ–¥—å: ${JSON.stringify(licenseResponse.data, null, 2)}`);
  } catch (error) {
    console.log(`   ‚ùå –ü–æ–º–∏–ª–∫–∞: ${error.message}`);
  }
  
  // –¢–µ—Å—Ç 4: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ admin API
  console.log('\n4. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ admin API:');
  try {
    const adminResponse = await makeRequest('/api/admin/licenses', 'GET');
    console.log(`   –°—Ç–∞—Ç—É—Å: ${adminResponse.status}`);
    console.log(`   –í—ñ–¥–ø–æ–≤—ñ–¥—å: ${JSON.stringify(adminResponse.data, null, 2)}`);
  } catch (error) {
    console.log(`   ‚ùå –ü–æ–º–∏–ª–∫–∞: ${error.message}`);
  }
  
  console.log('\n' + '=' * 50);
  console.log('‚úÖ –¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—è —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  
  console.log('\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á:');
  console.log('1. –Ø–∫—â–æ –≤—Å—ñ API –ø–æ–≤–µ—Ä—Ç–∞—é—Ç—å 500 - –ø—Ä–æ–±–ª–µ–º–∞ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö');
  console.log('2. –Ø–∫—â–æ —Ç—ñ–ª—å–∫–∏ license API –ø–æ–≤–µ—Ä—Ç–∞—î 500 - –ø—Ä–æ–±–ª–µ–º–∞ –∑ Supabase');
  console.log('3. –Ø–∫—â–æ admin API –ø–æ–≤–µ—Ä—Ç–∞—î 500 - –ø—Ä–æ–±–ª–µ–º–∞ –∑ –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø—É');
  console.log('4. –Ø–∫—â–æ heartbeat –ø—Ä–∞—Ü—é—î - —Å–µ—Ä–≤–µ—Ä –≤ —Ü—ñ–ª–æ–º—É –ø—Ä–∞—Ü—é—î');
}

testServerHealth();
