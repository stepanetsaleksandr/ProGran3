/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥—É–ª—è –≤ Supabase
 * Usage: node scripts/upload-module.js
 */

const fs = require('fs');
const path = require('path');
const crypto = require('crypto');

// –ß–∏—Ç–∞—î–º–æ .env.local –¥–ª—è Supabase credentials
require('dotenv').config({ path: path.join(__dirname, '..', '.env.local') });

const { createClient } = require('@supabase/supabase-js');

async function uploadModule() {
  console.log('üöÄ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥—É–ª—è –≤ Supabase...\n');
  
  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ env vars
  const supabaseUrl = process.env.SUPABASE_URL;
  const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
  
  if (!supabaseUrl || !supabaseKey) {
    console.error('‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ SUPABASE_URL –∞–±–æ SUPABASE_SERVICE_ROLE_KEY –≤ .env.local');
    process.exit(1);
  }
  
  // –°—Ç–≤–æ—Ä—é—î–º–æ Supabase client
  const supabase = createClient(supabaseUrl, supabaseKey);
  
  // –ß–∏—Ç–∞—î–º–æ –∫–æ–¥ –º–æ–¥—É–ª—è
  const modulePath = path.join(__dirname, '..', 'modules', 'report-generator.js');
  
  if (!fs.existsSync(modulePath)) {
    console.error(`‚ùå –§–∞–π–ª –º–æ–¥—É–ª—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: ${modulePath}`);
    process.exit(1);
  }
  
  const moduleCode = fs.readFileSync(modulePath, 'utf8');
  console.log(`üìÑ –§–∞–π–ª –∑—á–∏—Ç–∞–Ω–æ: ${modulePath}`);
  console.log(`üìè –†–æ–∑–º—ñ—Ä: ${moduleCode.length} —Å–∏–º–≤–æ–ª—ñ–≤\n`);
  
  // –ì–µ–Ω–µ—Ä—É—î–º–æ signature
  const signature = crypto
    .createHash('sha256')
    .update(moduleCode)
    .digest('hex');
  
  console.log(`üîê Signature: ${signature.substring(0, 16)}...`);
  
  // –î–∞–Ω—ñ –º–æ–¥—É–ª—è
  const moduleData = {
    name: 'report-generator',
    version: '3.2.1',
    description: '–ú–æ–¥—É–ª—å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó HTML –∑–≤—ñ—Ç—ñ–≤ –¥–ª—è ProGran3',
    code: moduleCode,
    code_signature: signature,
    module_type: 'javascript',
    is_active: true,
    cache_ttl: 86400,  // 24 –≥–æ–¥–∏–Ω–∏
    min_plugin_version: '3.2.0',
    metadata: {
      functions: ['generateReportHTML', 'generateCategoryRows', 'generatePreviewSection'],
      size_bytes: moduleCode.length,
      uploaded_by: 'script'
    }
  };
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º–æ–¥—É–ª—å –≤–∂–µ —ñ—Å–Ω—É—î
  const { data: existing } = await supabase
    .from('modules')
    .select('id, version')
    .eq('name', 'report-generator')
    .single();
  
  if (existing) {
    console.log(`\nüìù –ú–æ–¥—É–ª—å —ñ—Å–Ω—É—î (id: ${existing.id}, version: ${existing.version})`);
    console.log('   –û–Ω–æ–≤–ª—é—î–º–æ...');
    
    // Update
    const { data, error } = await supabase
      .from('modules')
      .update(moduleData)
      .eq('name', 'report-generator')
      .select();
    
    if (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:', error.message);
      process.exit(1);
    }
    
    console.log('‚úÖ –ú–æ–¥—É–ª—å —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!');
    
  } else {
    console.log('\nüìù –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –º–æ–¥—É–ª—å...');
    
    // Insert
    const { data, error } = await supabase
      .from('modules')
      .insert([moduleData])
      .select();
    
    if (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è:', error.message);
      process.exit(1);
    }
    
    console.log('‚úÖ –ú–æ–¥—É–ª—å —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!');
  }
  
  // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
  const { data: moduleInfo } = await supabase
    .from('modules')
    .select('*')
    .eq('name', 'report-generator')
    .single();
  
  console.log('\n' + '='.repeat(60));
  console.log('üì¶ –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –ú–û–î–£–õ–¨');
  console.log('='.repeat(60));
  console.log(`–ù–∞–∑–≤–∞:           ${moduleInfo.name}`);
  console.log(`–í–µ—Ä—Å—ñ—è:          ${moduleInfo.version}`);
  console.log(`–¢–∏–ø:             ${moduleInfo.module_type}`);
  console.log(`–ê–∫—Ç–∏–≤–Ω–∏–π:        ${moduleInfo.is_active ? '–¢–∞–∫' : '–ù—ñ'}`);
  console.log(`Cache TTL:       ${moduleInfo.cache_ttl}s (${moduleInfo.cache_ttl/3600}h)`);
  console.log(`–†–æ–∑–º—ñ—Ä –∫–æ–¥—É:     ${moduleInfo.code.length} —Å–∏–º–≤–æ–ª—ñ–≤`);
  console.log(`Signature:       ${moduleInfo.code_signature.substring(0, 32)}...`);
  console.log(`–°—Ç–≤–æ—Ä–µ–Ω–æ:        ${moduleInfo.created_at}`);
  console.log(`–û–Ω–æ–≤–ª–µ–Ω–æ:        ${moduleInfo.updated_at}`);
  console.log('='.repeat(60));
  
  console.log('\n‚úÖ –ì–æ—Ç–æ–≤–æ! –ú–æ–¥—É–ª—å –¥–æ—Å—Ç—É–ø–Ω–∏–π —á–µ—Ä–µ–∑:');
  console.log(`   GET ${supabaseUrl.replace('https://', 'https://your-app.')}/api/modules/report-generator`);
}

// –ó–∞–ø—É—Å–∫
uploadModule().catch(error => {
  console.error('\n‚ùå Fatal error:', error);
  process.exit(1);
});

