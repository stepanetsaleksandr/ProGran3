#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–º—ñ–Ω–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—Å—å–∫–∏—Ö –æ–±–ª—ñ–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
 * –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: node scripts/change-admin-credentials.js
 */

const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

function hideInput() {
  const stdin = process.stdin;
  stdin.setRawMode(true);
  stdin.resume();
  stdin.setEncoding('utf8');
  
  let input = '';
  
  stdin.on('data', (key) => {
    if (key === '\r' || key === '\n') {
      stdin.setRawMode(false);
      stdin.pause();
      process.stdout.write('\n');
      resolve(input);
    } else if (key === '\u0003') { // Ctrl+C
      process.exit();
    } else if (key === '\u007f') { // Backspace
      if (input.length > 0) {
        input = input.slice(0, -1);
        process.stdout.write('\b \b');
      }
    } else {
      input += key;
      process.stdout.write('*');
    }
  });
  
  return new Promise((resolve) => {
    stdin.on('data', (key) => {
      if (key === '\r' || key === '\n') {
        stdin.setRawMode(false);
        stdin.pause();
        process.stdout.write('\n');
        resolve(input);
      } else if (key === '\u0003') { // Ctrl+C
        process.exit();
      } else if (key === '\u007f') { // Backspace
        if (input.length > 0) {
          input = input.slice(0, -1);
          process.stdout.write('\b \b');
        }
      } else {
        input += key;
        process.stdout.write('*');
      }
    });
  });
}

async function validatePassword(password) {
  const checks = {
    length: password.length >= 20,
    uppercase: /[A-Z]/.test(password),
    lowercase: /[a-z]/.test(password),
    numbers: /[0-9]/.test(password),
    symbols: /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(password)
  };
  
  const passed = Object.values(checks).filter(Boolean).length;
  
  return {
    valid: passed >= 4,
    checks,
    score: passed
  };
}

async function main() {
  console.log('üîê –ó–ú–Ü–ù–ê –ê–î–ú–Ü–ù–Ü–°–¢–†–ê–¢–û–†–°–¨–ö–ò–• –û–ë–õ–Ü–ö–û–í–ò–• –î–ê–ù–ò–•\n');
  
  try {
    // –ü–æ—Ç–æ—á–Ω—ñ –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ
    console.log('üìã –ü–æ—Ç–æ—á–Ω—ñ –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ:');
    console.log('–õ–æ–≥—ñ–Ω: progran3_admin_2025');
    console.log('–ü–∞—Ä–æ–ª—å: Pr0Gr@n3_S3cur3_@dm1n_2025!\n');
    
    // –ù–æ–≤–∏–π –ª–æ–≥—ñ–Ω
    const newUsername = await question('üîë –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –ª–æ–≥—ñ–Ω: ');
    
    if (newUsername.length < 8) {
      console.log('‚ùå –õ–æ–≥—ñ–Ω –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 8 —Å–∏–º–≤–æ–ª—ñ–≤');
      process.exit(1);
    }
    
    // –ù–æ–≤–∏–π –ø–∞—Ä–æ–ª—å
    console.log('üîí –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å (–º—ñ–Ω—ñ–º—É–º 20 —Å–∏–º–≤–æ–ª—ñ–≤, –≤–µ–ª–∏–∫—ñ/–º–∞–ª—ñ –ª—ñ—Ç–µ—Ä–∏, —Ü–∏—Ñ—Ä–∏, —Å–∏–º–≤–æ–ª–∏):');
    const newPassword = await hideInput();
    
    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–∞—Ä–æ–ª—é
    const validation = await validatePassword(newPassword);
    
    if (!validation.valid) {
      console.log('\n‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –≤–∏–º–æ–≥–∞–º –±–µ–∑–ø–µ–∫–∏:');
      console.log(`   –î–æ–≤–∂–∏–Ω–∞ (‚â•20): ${validation.checks.length ? '‚úÖ' : '‚ùå'}`);
      console.log(`   –í–µ–ª–∏–∫—ñ –ª—ñ—Ç–µ—Ä–∏: ${validation.checks.uppercase ? '‚úÖ' : '‚ùå'}`);
      console.log(`   –ú–∞–ª—ñ –ª—ñ—Ç–µ—Ä–∏: ${validation.checks.lowercase ? '‚úÖ' : '‚ùå'}`);
      console.log(`   –¶–∏—Ñ—Ä–∏: ${validation.checks.numbers ? '‚úÖ' : '‚ùå'}`);
      console.log(`   –°–∏–º–≤–æ–ª–∏: ${validation.checks.symbols ? '‚úÖ' : '‚ùå'}`);
      console.log(`   –ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª: ${validation.score}/5`);
      process.exit(1);
    }
    
    // –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    console.log('\n‚úÖ –ü–∞—Ä–æ–ª—å –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –≤–∏–º–æ–≥–∞–º –±–µ–∑–ø–µ–∫–∏!');
    console.log(`\nüìã –ù–æ–≤—ñ –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ:`);
    console.log(`–õ–æ–≥—ñ–Ω: ${newUsername}`);
    console.log(`–ü–∞—Ä–æ–ª—å: ${'*'.repeat(newPassword.length)}`);
    
    const confirm = await question('\n‚ùì –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–º—ñ–Ω—É? (y/N): ');
    
    if (confirm.toLowerCase() !== 'y' && confirm.toLowerCase() !== 'yes') {
      console.log('‚ùå –ó–º—ñ–Ω–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞');
      process.exit(0);
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ–¥—É
    console.log('\nüîß –ö–æ–¥ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:');
    console.log('```typescript');
    console.log('// –í —Ñ–∞–π–ª—ñ server/app/api/auth/login/route.ts');
    console.log('const validCredentials = {');
    console.log(`  username: process.env.ADMIN_USERNAME || '${newUsername}',`);
    console.log(`  password: process.env.ADMIN_PASSWORD || '${newPassword}'`);
    console.log('};');
    console.log('```');
    
    console.log('\nüåê Environment Variables –¥–ª—è Vercel:');
    console.log(`ADMIN_USERNAME=${newUsername}`);
    console.log(`ADMIN_PASSWORD=${newPassword}`);
    
    console.log('\nüìù –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó:');
    console.log('1. –û–Ω–æ–≤—ñ—Ç—å –∫–æ–¥ –≤ server/app/api/auth/login/route.ts');
    console.log('2. –î–æ–¥–∞–π—Ç–µ environment variables –≤ Vercel:');
    console.log('   vercel env add ADMIN_USERNAME');
    console.log('   vercel env add ADMIN_PASSWORD');
    console.log('3. –î–µ–ø–ª–æ–π—Ç–µ –∑–º—ñ–Ω–∏: vercel --prod');
    console.log('4. –ü—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ –Ω–æ–≤—ñ –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ');
    
    console.log('\nüéâ –û–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ –≥–æ—Ç–æ–≤—ñ –¥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è!');
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error.message);
    process.exit(1);
  } finally {
    rl.close();
  }
}

main();
