// –û—á–∏—â–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–∞—Ü—ñ–π –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
const https = require('https');

const API_BASE = 'https://progran3-tracking-server-cuy1q2xn9-provis3ds-projects.vercel.app';

async function makeRequest(path, method = 'GET', data = null) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'progran3-tracking-server-cuy1q2xn9-provis3ds-projects.vercel.app',
      port: 443,
      path: path,
      method: method,
      headers: {
        'Content-Type': 'application/json',
      }
    };

    const req = https.request(options, (res) => {
      let body = '';
      res.on('data', (chunk) => {
        body += chunk;
      });
      res.on('end', () => {
        try {
          const result = JSON.parse(body);
          resolve({ status: res.statusCode, data: result });
        } catch (e) {
          resolve({ status: res.statusCode, data: body });
        }
      });
    });

    req.on('error', (err) => {
      reject(err);
    });

    if (data) {
      req.write(JSON.stringify(data));
    }
    req.end();
  });
}

async function clearActivations() {
  console.log('üßπ –û—á–∏—â–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–∞—Ü—ñ–π –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è');
  console.log('=' * 50);
  
  // –¢–µ—Å—Ç—É—î–º–æ –∞–∫—Ç–∏–≤–∞—Ü—ñ—é –∑ —ñ—Å–Ω—É—é—á–æ—é –ª—ñ—Ü–µ–Ω–∑—ñ—î—é
  console.log('\nüìù –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –∑ —ñ—Å–Ω—É—é—á–æ—é –ª—ñ—Ü–µ–Ω–∑—ñ—î—é:');
  
  const testLicenses = [
    'TQ58-IKVR-9X2M-7N4P',
    'DEMO-1234-5678-9ABC', 
    'FULL-ABCD-EFGH-IJKL'
  ];
  
  for (const licenseKey of testLicenses) {
    console.log(`\nüîë –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ª—ñ—Ü–µ–Ω–∑—ñ—ó: ${licenseKey}`);
    
    try {
      const activationData = {
        email: 'test@progran3.com',
        license_key: licenseKey,
        hardware_id: 'test-hardware-id-123'
      };
      
      const response = await makeRequest('/api/license/register-simple', 'POST', activationData);
      
      console.log(`   –°—Ç–∞—Ç—É—Å: ${response.status}`);
      console.log(`   –í—ñ–¥–ø–æ–≤—ñ–¥—å: ${JSON.stringify(response.data, null, 2)}`);
      
      if (response.status === 200) {
        console.log(`   ‚úÖ –õ—ñ—Ü–µ–Ω–∑—ñ—è ${licenseKey} –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!`);
        console.log('\nüéØ –î–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤ SketchUp –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ:');
        console.log(`   Email: test@progran3.com`);
        console.log(`   –ö–ª—é—á: ${licenseKey}`);
        break;
      } else if (response.status === 400 && response.data.error === 'License activation limit exceeded') {
        console.log(`   ‚ö†Ô∏è –õ—ñ—Ü–µ–Ω–∑—ñ—è ${licenseKey} –≤–∂–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞ (–ª—ñ–º—ñ—Ç –ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ)`);
      } else if (response.status === 400 && response.data.error === 'License already activated on this device') {
        console.log(`   ‚ö†Ô∏è –õ—ñ—Ü–µ–Ω–∑—ñ—è ${licenseKey} –≤–∂–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞ –Ω–∞ —Ü—å–æ–º—É –ø—Ä–∏—Å—Ç—Ä–æ—ó`);
      } else {
        console.log(`   ‚ùå –õ—ñ—Ü–µ–Ω–∑—ñ—è ${licenseKey} –Ω–µ –ø—Ä–∞—Ü—é—î: ${response.data.error}`);
      }
    } catch (error) {
      console.log(`   ‚ùå –ü–æ–º–∏–ª–∫–∞: ${error.message}`);
    }
  }
  
  console.log('\n' + '=' * 50);
  console.log('‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  
  console.log('\nüìã –Ü–ù–°–¢–†–£–ö–¶–Ü–á –î–õ–Ø –¢–ï–°–¢–£–í–ê–ù–ù–Ø:');
  console.log('1. –í—ñ–¥–∫—Ä–∏–π—Ç–µ SketchUp');
  console.log('2. –ó–∞–ø—É—Å—Ç—ñ—Ç—å: ProGran3::UI.show_dialog');
  console.log('3. –°–ø—Ä–æ–±—É–π—Ç–µ –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∑ —ñ—Å–Ω—É—é—á–∏–º–∏ –ª—ñ—Ü–µ–Ω–∑—ñ—è–º–∏:');
  testLicenses.forEach(license => {
    console.log(`   - ${license}`);
  });
  console.log('4. –Ø–∫—â–æ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ–º–∏–ª–∫—É "–ª—ñ–º—ñ—Ç –ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ" - —Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
  console.log('5. –Ø–∫—â–æ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ–º–∏–ª–∫—É "–≤–∂–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞" - —Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
  console.log('6. –Ø–∫—â–æ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ–º–∏–ª–∫—É 404 - –ª—ñ—Ü–µ–Ω–∑—ñ—è –Ω–µ —ñ—Å–Ω—É—î');
  console.log('7. –Ø–∫—â–æ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ–º–∏–ª–∫—É 500 - –ø—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ');
}

clearActivations();
