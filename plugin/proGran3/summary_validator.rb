# progran3/summary_validator.rb
# –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ —Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å

module ProGran3
  module SummaryValidator
    extend self
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —î –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–∏–º –µ–ª–µ–º–µ–Ω—Ç–æ–º
    def is_decorative?(name)
      # –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ (ball.skp, pancake.skp, ball2.skp —Ç–æ—â–æ)
      decorative_patterns = [
        /ball/i,
        /pancake/i,
        /\.skp$/i,
        /decor/i
      ]
      
      decorative_patterns.any? { |pattern| name =~ pattern }
    end
    
    # –í–∞–ª—ñ–¥—É—î —Ä–æ–∑–º—ñ—Ä–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    def validate_dimensions(width, depth, height, name)
      warnings = []
      
      # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
      return warnings if is_decorative?(name)
      
      # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏—Ö —Ä–æ–∑–º—ñ—Ä—ñ–≤
      if width < 1 || depth < 1 || height < 1
        warnings << "#{name}: –ó–∞–Ω–∞–¥—Ç–æ –º–∞–ª—ñ —Ä–æ–∑–º—ñ—Ä–∏ (< 1 —Å–º)"
      end
      
      # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏—Ö —Ä–æ–∑–º—ñ—Ä—ñ–≤ (> 10 –º–µ—Ç—Ä—ñ–≤ –ø—ñ–¥–æ–∑—Ä—ñ–ª–æ)
      if width > 1000 || depth > 1000 || height > 1000
        warnings << "#{name}: –ü—ñ–¥–æ–∑—Ä—ñ–ª–æ –≤–µ–ª–∏–∫—ñ —Ä–æ–∑–º—ñ—Ä–∏ (> 10 –º)"
      end
      
      # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ–ø–æ—Ä—Ü—ñ–π
      max_dim = [width, depth, height].max
      min_dim = [width, depth, height].min
      
      if max_dim / min_dim > 100
        warnings << "#{name}: –ù–µ–∑–≤–∏—á–∞–π–Ω—ñ –ø—Ä–æ–ø–æ—Ä—Ü—ñ—ó (—Å–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è > 100:1)"
      end
      
      warnings
    end
    
    # –í–∞–ª—ñ–¥—É—î –ø–ª–æ—â—É
    def validate_area(area_m2, name)
      warnings = []
      
      # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
      return warnings if is_decorative?(name)
      
      if area_m2 <= 0
        warnings << "#{name}: –ü–ª–æ—â–∞ –Ω–µ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∞ –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î 0"
      elsif area_m2 > 100
        warnings << "#{name}: –î—É–∂–µ –≤–µ–ª–∏–∫–∞ –ø–ª–æ—â–∞ (> 100 –º¬≤)"
      end
      
      warnings
    end
    
    # –í–∞–ª—ñ–¥—É—î –æ–±'—î–º
    def validate_volume(volume_m3, name)
      warnings = []
      
      # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
      return warnings if is_decorative?(name)
      
      if volume_m3 <= 0
        warnings << "#{name}: –û–±'—î–º –Ω–µ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∏–π –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î 0"
      elsif volume_m3 > 50
        warnings << "#{name}: –î—É–∂–µ –≤–µ–ª–∏–∫–∏–π –æ–±'—î–º (> 50 –º¬≥)"
      end
      
      warnings
    end
    
    # –í–∞–ª—ñ–¥—É—î –≤–µ—Å—å –ø—ñ–¥—Å—É–º–æ–∫
    def validate_summary(summary)
      all_warnings = []
      skipped_decorative = []
      
      summary.each do |category, items|
        items.each do |item|
          item_name = item[:name] || category.to_s
          
          # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
          if is_decorative?(item_name)
            skipped_decorative << item_name
            next
          end
          
          # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ä–æ–∑–º—ñ—Ä—ñ–≤
          if item[:width] && item[:depth] && item[:height]
            warnings = validate_dimensions(item[:width], item[:depth], item[:height], item_name)
            all_warnings.concat(warnings)
          end
          
          # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–ª–æ—â—ñ
          if item[:area_m2]
            warnings = validate_area(item[:area_m2], item_name)
            all_warnings.concat(warnings)
          end
          
          # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –æ–±'—î–º—É
          if item[:volume_m3]
            warnings = validate_volume(item[:volume_m3], item_name)
            all_warnings.concat(warnings)
          end
        end
      end
      
      # –õ–æ–≥—É—î–º–æ –ø—Ä–æ–ø—É—â–µ–Ω—ñ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
      if skipped_decorative.any?
        require_relative 'logger'
        ProGran3::Logger.info("üé® –ü—Ä–æ–ø—É—â–µ–Ω–æ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é –¥–ª—è –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ (#{skipped_decorative.count}): #{skipped_decorative.uniq.join(', ')}", "Validator")
      end
      
      # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–≤–Ω–æ—Ç–∏ –ø—Ä–æ–µ–∫—Ç—É
      required = [:foundation, :tiles, :stands, :steles]
      missing = required.select { |cat| summary[cat].nil? || summary[cat].empty? }
      
      if missing.any?
        all_warnings << "–í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏: #{missing.join(', ')}"
      end
      
      all_warnings
    end
    
    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î –ø–æ–≤–Ω–æ—Ç—É –ø—Ä–æ–µ–∫—Ç—É (%)
    def calculate_completeness(summary)
      required = [:foundation, :tiles, :blind_area, :stands, :steles]
      
      completed = required.count { |cat| summary[cat] && !summary[cat].empty? }
      
      percentage = (completed.to_f / required.count * 100).round(0)
      
      {
        percentage: percentage,
        completed: completed,
        total: required.count,
        is_complete: percentage == 100,
        missing: required.select { |cat| summary[cat].nil? || summary[cat].empty? }
      }
    end
  end
end

