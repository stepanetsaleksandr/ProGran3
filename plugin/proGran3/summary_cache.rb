# progran3/summary_cache.rb
# –°–∏—Å—Ç–µ–º–∞ –∫–µ—à—É–≤–∞–Ω–Ω—è –¥–ª—è –ø—ñ–¥—Å—É–º–∫—É –ø—Ä–æ–µ–∫—Ç—É

require 'digest/sha2'

module ProGran3
  module SummaryCache
    extend self
    
    @cache = {}
    @model_hash = nil
    
    # –ì–µ–Ω–µ—Ä—É—î hash –º–æ–¥–µ–ª—ñ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
    def get_model_hash
      model = Sketchup.active_model
      components = model.active_entities.grep(Sketchup::ComponentInstance)
      
      # –°—Ç–≤–æ—Ä—é—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π hash –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ —Ç–∞ —ó—Ö —Ä–æ–∑–º—ñ—Ä—ñ–≤
      hash_data = components.map do |c|
        b = c.bounds
        "#{c.definition.name}_#{b.width.to_mm.round(0)}_#{b.height.to_mm.round(0)}_#{b.depth.to_mm.round(0)}"
      end.sort.join('|')
      
      # –Ø–∫—â–æ –Ω–µ–º–∞—î –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
      return "empty" if hash_data.empty?
      
      # SHA256 hash
      Digest::SHA256.hexdigest(hash_data)[0..16]
    end
    
    # –û—Ç—Ä–∏–º—É—î –∫–µ—à–æ–≤–∞–Ω–∏–π –ø—ñ–¥—Å—É–º–æ–∫
    def get_cached_summary
      current_hash = get_model_hash
      
      if @model_hash == current_hash && @cache[:summary]
        ProGran3::Logger.info("‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –∫–µ—à–æ–≤–∞–Ω–∏–π –ø—ñ–¥—Å—É–º–æ–∫ (hash: #{current_hash})", "Cache")
        return @cache[:summary]
      end
      
      ProGran3::Logger.info("üîÑ –ö–µ—à –∑–∞—Å—Ç–∞—Ä—ñ–≤ –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π (hash: #{current_hash})", "Cache")
      nil
    end
    
    # –ó–±–µ—Ä—ñ–≥–∞—î –ø—ñ–¥—Å—É–º–æ–∫ –≤ –∫–µ—à
    def cache_summary(summary)
      @model_hash = get_model_hash
      @cache[:summary] = summary
      @cache[:cached_at] = Time.now
      
      ProGran3::Logger.info("üíæ –ü—ñ–¥—Å—É–º–æ–∫ –∑–∞–∫–µ—à–æ–≤–∞–Ω–æ (hash: #{@model_hash})", "Cache")
    end
    
    # –û—á–∏—â—É—î –∫–µ—à
    def clear_cache
      @cache = {}
      @model_hash = nil
      ProGran3::Logger.info("üóëÔ∏è –ö–µ—à –æ—á–∏—â–µ–Ω–æ", "Cache")
    end
    
    # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–µ—à
    def cache_info
      {
        has_cache: !@cache.empty?,
        model_hash: @model_hash,
        cached_at: @cache[:cached_at],
        age_seconds: @cache[:cached_at] ? (Time.now - @cache[:cached_at]).to_i : nil
      }
    end
  end
end

