// modules/ui/SummaryTable.js
// –°–∏—Å—Ç–µ–º–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –ø—ñ–¥—Å—É–º–∫—É –¥–ª—è ProGran3

(function(global) {
  'use strict';
  
  // –°—Ç–≤–æ—Ä—é—î–º–æ namespace
  global.ProGran3 = global.ProGran3 || {};
  global.ProGran3.UI = global.ProGran3.UI || {};
  
  // –ü—Ä–∏–≤–∞—Ç–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
  function logSummaryAction(message, type = 'info') {
    if (global.ProGran3.Core.Logger) {
      global.ProGran3.Core.Logger.debugLog(message, type, 'SummaryTable');
    }
  }
  
  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—ñ–≤ –∑ –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è–º (–≤—ñ–¥ –Ω–∞–π–±—ñ–ª—å—à–æ–≥–æ –¥–æ –Ω–∞–π–º–µ–Ω—à–æ–≥–æ)
  function formatDimensions(depth, width, height) {
    console.log(`üìê [formatDimensions] –í—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ: depth=${depth}, width=${width}, height=${height}`);
    const dimensions = [depth, width, height].map(Number).sort((a, b) => b - a); // –í—ñ–¥ –Ω–∞–π–±—ñ–ª—å—à–æ–≥–æ –¥–æ –Ω–∞–π–º–µ–Ω—à–æ–≥–æ
    console.log(`üìê [formatDimensions] –í—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ: [${dimensions.join(', ')}]`);
    
    // –ü—Ä–æ—Å—Ç–∏–π —Ç–µ–∫—Å—Ç –±–µ–∑ HTML —Ç–∞–±–ª–∏—Ü—ñ
    const result = `${dimensions[0]}  ${dimensions[1]}  ${dimensions[2]}`;
    
    console.log(`üìê [formatDimensions] –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π –ø—Ä–æ—Å—Ç–∏–π —Ç–µ–∫—Å—Ç: ${result}`);
    return result;
  }
  
  function safeGetElement(id) {
    const element = document.getElementById(id);
    if (!element) {
      logSummaryAction(`–ï–ª–µ–º–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: ${id}`, 'warn');
    }
    return element;
  }
  
  function safeSetTextContent(element, text) {
    if (element) {
      element.textContent = text;
      return true;
    }
    return false;
  }
  
  function updateFoundationSummary(addedElements, currentUnit) {
    const unitText = currentUnit === 'mm' ? '–º–º' : '—Å–º';
    
    if (addedElements.foundation) {
      const foundationDepthEl = safeGetElement('foundation-depth');
      const foundationWidthEl = safeGetElement('foundation-width');
      const foundationHeightEl = safeGetElement('foundation-height');
      const summaryFoundationEl = safeGetElement('summary-foundation');
      
      if (foundationDepthEl && foundationWidthEl && foundationHeightEl && summaryFoundationEl) {
        const foundationDepth = foundationDepthEl.value;
        const foundationWidth = foundationWidthEl.value;
        const foundationHeight = foundationHeightEl.value;
        safeSetTextContent(summaryFoundationEl, 
          `${foundationDepth}√ó${foundationWidth}√ó${foundationHeight} ${unitText}`);
      }
    } else {
      safeSetTextContent(safeGetElement('summary-foundation'), '--');
    }
  }
  
  function updateTilingSummary(addedElements) {
    // –ù–µ –æ–Ω–æ–≤–ª—é—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ - —Ç—ñ–ª—å–∫–∏ —á–µ—Ä–µ–∑ –¥–µ—Ç–∞–ª—å–Ω—É —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—é
    // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É, –ø–æ–∫–∞–∑—É—î–º–æ –±–∞–∑–æ–≤—É —ñ–Ω—Ñ–æ
    if (addedElements.tiling) {
      const summaryTilingEl = safeGetElement('summary-tiling');
      if (summaryTilingEl && summaryTilingEl.textContent === '--') {
        const activeButton = document.querySelector('.tiling-mode-btn.active');
        if (activeButton) {
          safeSetTextContent(summaryTilingEl, activeButton.textContent + ' (–æ–Ω–æ–≤—ñ—Ç—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π)');
        }
      }
    } else {
      const summaryTilingEl = safeGetElement('summary-tiling');
      if (summaryTilingEl && !summaryTilingEl.textContent.includes('—Å–º')) {
        safeSetTextContent(summaryTilingEl, '--');
      }
    }
  }
  
  function updateCladdingSummary(addedElements, currentUnit) {
    const unitText = currentUnit === 'mm' ? '–º–º' : '—Å–º';
    
    if (addedElements.cladding) {
      const claddingThicknessEl = safeGetElement('cladding-thickness');
      const summaryCladdingEl = safeGetElement('summary-cladding');
      if (claddingThicknessEl && summaryCladdingEl) {
        const claddingThickness = claddingThicknessEl.value;
        safeSetTextContent(summaryCladdingEl, 
          `–¢–æ–≤—â–∏–Ω–∞: ${claddingThickness} ${unitText}`);
      }
    } else {
      safeSetTextContent(safeGetElement('summary-cladding'), '--');
    }
  }
  
  function updateBlindAreaSummary(addedElements, currentUnit) {
    const unitText = currentUnit === 'mm' ? '–º–º' : '—Å–º';
    
    if (addedElements.blindArea) {
      const blindAreaThicknessEl = safeGetElement('blind-area-thickness');
      const blindAreaModeEl = safeGetElement('blind-area-mode');
      const summaryBlindAreaEl = safeGetElement('summary-blind-area');
      
      if (blindAreaThicknessEl && blindAreaModeEl && summaryBlindAreaEl) {
        const blindAreaThickness = blindAreaThicknessEl.value;
        const blindAreaMode = blindAreaModeEl.value;
        
        if (blindAreaMode === 'uniform') {
          const uniformWidthEl = safeGetElement('blind-area-uniform-width');
          if (uniformWidthEl) {
            const uniformWidth = uniformWidthEl.value;
            safeSetTextContent(summaryBlindAreaEl, 
              `–®–∏—Ä–∏–Ω–∞: ${uniformWidth} ${unitText}, –¢–æ–≤—â–∏–Ω–∞: ${blindAreaThickness} ${unitText}`);
          }
        } else {
          const blindAreaNorthEl = safeGetElement('blind-area-north');
          const blindAreaSouthEl = safeGetElement('blind-area-south');
          const blindAreaEastEl = safeGetElement('blind-area-east');
          const blindAreaWestEl = safeGetElement('blind-area-west');
          
          if (blindAreaNorthEl && blindAreaSouthEl && blindAreaEastEl && blindAreaWestEl) {
            const blindAreaNorth = blindAreaNorthEl.value;
            const blindAreaSouth = blindAreaSouthEl.value;
            const blindAreaEast = blindAreaEastEl.value;
            const blindAreaWest = blindAreaWestEl.value;
            safeSetTextContent(summaryBlindAreaEl, 
              `–ü:${blindAreaNorth} –ü–¥:${blindAreaSouth} –°:${blindAreaEast} –ó:${blindAreaWest} ${unitText}, –¢:${blindAreaThickness} ${unitText}`);
          }
        }
      }
    } else {
      safeSetTextContent(safeGetElement('summary-blind-area'), '--');
    }
  }
  
  function updateCarouselItemSummary(addedElements, carouselState, modelLists, elementType, summaryId) {
    if (addedElements[elementType] && carouselState[elementType] && modelLists[elementType]) {
      const filename = modelLists[elementType][carouselState[elementType].index];
      const summaryEl = safeGetElement(summaryId);
      if (summaryEl) {
        safeSetTextContent(summaryEl, 
          filename ? filename.replace('.skp', '') : '--');
      }
    } else {
      safeSetTextContent(safeGetElement(summaryId), '--');
    }
  }
  
  function updateFenceCornerSummary(addedElements, currentUnit) {
    const unitText = currentUnit === 'mm' ? '–º–º' : '—Å–º';
    
    if (addedElements.fence_corner) {
      const postHeightEl = safeGetElement('fence-corner-post-height');
      const postSizeEl = safeGetElement('fence-corner-post-size');
      const sideHeightEl = safeGetElement('fence-corner-side-height');
      const sideLengthEl = safeGetElement('fence-corner-side-length');
      const summaryFenceCornerEl = safeGetElement('summary-fence-corner');
      
      if (postHeightEl && postSizeEl && sideHeightEl && sideLengthEl && summaryFenceCornerEl) {
        const postHeight = postHeightEl.value;
        const postSize = postSizeEl.value;
        const sideHeight = sideHeightEl.value;
        const sideLength = sideLengthEl.value;
        const decorativeSize = 100; // –§—ñ–∫—Å–æ–≤–∞–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
        
        safeSetTextContent(summaryFenceCornerEl, 
          `–°—Ç–æ–≤–ø: ${postHeight}√ó${postSize}√ó${postSize}${unitText}, –ü–∞–Ω–µ–ª—å: ${sideHeight}√ó${sideLength}${unitText}, –î–µ–∫–æ—Ä: ${decorativeSize}${unitText}`);
      }
    } else {
      safeSetTextContent(safeGetElement('summary-fence-corner'), '--');
    }
  }
  
  function updateFencePerimeterSummary(addedElements, currentUnit) {
    const unitText = currentUnit === 'mm' ? '–º–º' : '—Å–º';
    
    if (addedElements.fence_perimeter) {
      const postHeightEl = safeGetElement('fence-perimeter-post-height');
      const postSizeEl = safeGetElement('fence-perimeter-post-size');
      const northCountEl = safeGetElement('fence-perimeter-north-count');
      const southCountEl = safeGetElement('fence-perimeter-south-count');
      const eastWestCountEl = safeGetElement('fence-perimeter-east-west-count');
      const summaryFencePerimeterEl = safeGetElement('summary-fence-perimeter');
      
      if (postHeightEl && postSizeEl && northCountEl && southCountEl && eastWestCountEl && summaryFencePerimeterEl) {
        const postHeight = postHeightEl.value;
        const postSize = postSizeEl.value;
        const northCount = northCountEl.value;
        const southCount = southCountEl.value;
        const eastWestCount = eastWestCountEl.value;
        const decorativeHeight = 100; // –§—ñ–∫—Å–æ–≤–∞–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
        const decorativeThickness = 100; // –§—ñ–∫—Å–æ–≤–∞–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
        
        safeSetTextContent(summaryFencePerimeterEl, 
          `–°—Ç–æ–≤–ø: ${postHeight}√ó${postSize}√ó${postSize}${unitText}, –°—Ç–æ—Ä–æ–Ω–∏: –ó${northCount} –í${southCount} –ë${eastWestCount}, –î–µ–∫–æ—Ä: ${decorativeHeight}√ó${decorativeThickness}${unitText}`);
      }
    } else {
      safeSetTextContent(safeGetElement('summary-fence-perimeter'), '--');
    }
  }
  
  function updateStandsSummary(addedElements, currentUnit) {
    const unitText = currentUnit === 'mm' ? '–º–º' : '—Å–º';
    const summaryStands = safeGetElement('summary-stands');
    
    if (summaryStands) {
      if (addedElements.stands) {
        const heightEl = safeGetElement('stands-height');
        const widthEl = safeGetElement('stands-width');
        const depthEl = safeGetElement('stands-depth');
        
        if (heightEl && widthEl && depthEl) {
          const height = heightEl.value;
          const width = widthEl.value;
          const depth = depthEl.value;
          safeSetTextContent(summaryStands, `${height}√ó${width}√ó${depth} ${unitText}`);
        } else {
          safeSetTextContent(summaryStands, '–î–æ–¥–∞–Ω–æ');
        }
      } else {
        safeSetTextContent(summaryStands, '--');
      }
    }
  }
  
  // –ü—É–±–ª—ñ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
  function updateSummaryTable() {
    try {
      logSummaryAction('updateSummaryTable() –≤–∏–∫–ª–∏–∫–∞–Ω–æ', 'info');
      
      // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
      const addedElements = global.ProGran3.Core.StateManager ? 
        global.ProGran3.Core.StateManager.getAddedElements() : 
        global.addedElements || {};
      
      const currentUnit = global.ProGran3.Utils.Units ? 
        global.ProGran3.Utils.Units.getCurrentUnit() : 
        global.currentUnit || 'mm';
      
      const carouselState = global.ProGran3.Core.StateManager ? 
        global.ProGran3.Core.StateManager.getCarouselState() : 
        global.carouselState || {};
      
      const modelLists = global.ProGran3.Core.StateManager ? 
        global.ProGran3.Core.StateManager.getModelLists() : 
        global.modelLists || {};
      
      // –û–Ω–æ–≤–ª—é—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç—ñ —Å–µ–∫—Ü—ñ—ó —â–æ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—é
      // Foundation —Ç–∞ BlindArea –ù–ï –æ–Ω–æ–≤–ª—é—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ - —Ç—ñ–ª—å–∫–∏ —á–µ—Ä–µ–∑ –¥–µ—Ç–∞–ª—å–Ω—É —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—é (–∫–Ω–æ–ø–∫–∞ "–û–Ω–æ–≤–∏—Ç–∏")
      // updateFoundationSummary(addedElements, currentUnit);
      // updateBlindAreaSummary(addedElements, currentUnit);
      updateFenceCornerSummary(addedElements, currentUnit);
      updateFencePerimeterSummary(addedElements, currentUnit);
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–ø–∏—Ç—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—é –¥–ª—è –≤—Å—ñ—Ö –æ—Å–Ω–æ–≤–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
      if (addedElements.foundation || addedElements.blindArea || addedElements.tiling || 
          addedElements.cladding || addedElements.stands || addedElements.steles || 
          addedElements.flowerbeds || addedElements.gravestones) {
        logSummaryAction('–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –∑–∞–ø–∏—Ç –¥–µ—Ç–∞–ª—å–Ω–æ—ó —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó', 'info');
        setTimeout(() => refreshDetailedSummary(), 100);
      }
      
      logSummaryAction('updateSummaryTable() –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ', 'success');
      
    } catch (error) {
      logSummaryAction(`–ü–æ–º–∏–ª–∫–∞ –≤ updateSummaryTable(): ${error.message}`, 'error');
      logSummaryAction(`Stack trace: ${error.stack}`, 'error');
    }
  }
  
  function getSummaryData() {
    const summaryData = {};
    
    const summaryElements = [
      'summary-foundation', 'summary-tiling', 'summary-cladding', 'summary-blind-area',
      'summary-stand', 'summary-flowerbed', 'summary-gravestone', 'summary-stele',
      'summary-fence-corner', 'summary-fence-perimeter', 'summary-fence-decor', 'summary-stands'
    ];
    
    summaryElements.forEach(id => {
      const element = safeGetElement(id);
      if (element) {
        summaryData[id] = element.textContent;
      }
    });
    
    return summaryData;
  }
  
  function clearSummaryTable() {
    const summaryElements = [
      'summary-foundation', 'summary-tiling', 'summary-cladding', 'summary-blind-area',
      'summary-stand', 'summary-flowerbed', 'summary-gravestone', 'summary-stele',
      'summary-fence-corner', 'summary-fence-perimeter', 'summary-fence-decor', 'summary-stands'
    ];
    
    summaryElements.forEach(id => {
      safeSetTextContent(safeGetElement(id), '--');
    });
    
    logSummaryAction('SummaryTable –æ—á–∏—â–µ–Ω–æ', 'info');
  }
  
  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∑ Ruby
  function updateDetailedSummary(data) {
    try {
      logSummaryAction('updateDetailedSummary() –≤–∏–∫–ª–∏–∫–∞–Ω–æ', 'info');
      console.log('üìä –î–µ—Ç–∞–ª—å–Ω–∞ —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—è:', data);
      
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –∑–≤—ñ—Ç—É
      window.lastSummaryData = data;
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–∏—Ö (v3.0 - –∑ metadata)
      const summaryData = data.summary || data;  // –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É
      const metadata = data.metadata || null;
      
      // –û–Ω–æ–≤–ª—é—î–º–æ –º–µ—Ç–∞–¥–∞–Ω—ñ (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–≥–æ—Ä—ñ)
      if (metadata) {
        updateSummaryMetadata(metadata);
      }
      
      // –û–Ω–æ–≤–ª—é—î–º–æ Foundation –æ–∫—Ä–µ–º–æ (–∑ –ø–ª–æ—â–µ—é —Ç–∞ –æ–±'—î–º–æ–º)
      if (summaryData.foundation && summaryData.foundation.length > 0) {
        const foundation = summaryData.foundation[0];
        console.log('üìê Foundation –¥–∞–Ω—ñ:', foundation);
        
        const foundationEl = safeGetElement('summary-foundation');
        if (foundationEl) {
          const area = foundation.area_m2 !== undefined ? foundation.area_m2 : 'N/A';
          const volume = foundation.volume_m3 !== undefined ? foundation.volume_m3 : 'N/A';
          const text = `${foundation.depth} √ó ${foundation.width} √ó ${foundation.height} —Å–º\n–ü–ª–æ—â–∞: ${area} –º¬≤\n–û–±'—î–º: ${volume} –º¬≥`;
          safeSetTextContent(foundationEl, text);
          console.log('‚úÖ Foundation –æ–Ω–æ–≤–ª–µ–Ω–æ:', text);
        }
      }
      
      // –û–Ω–æ–≤–ª—é—î–º–æ BlindArea –æ–∫—Ä–µ–º–æ (–∑ –ø–ª–æ—â–µ—é —Ç–∞ –æ–±'—î–º–æ–º)
      if (summaryData.blind_area && summaryData.blind_area.length > 0) {
        const blindArea = summaryData.blind_area[0];
        console.log('üìê BlindArea –¥–∞–Ω—ñ:', blindArea);
        
        const blindAreaEl = safeGetElement('summary-blind-area');
        if (blindAreaEl) {
          const area = blindArea.area_m2 !== undefined ? blindArea.area_m2 : 'N/A';
          const volume = blindArea.volume_m3 !== undefined ? blindArea.volume_m3 : 'N/A';
          const text = `${blindArea.depth} √ó ${blindArea.width} √ó ${blindArea.height} —Å–º\n–ü–ª–æ—â–∞: ${area} –º¬≤\n–û–±'—î–º: ${volume} –º¬≥`;
          safeSetTextContent(blindAreaEl, text);
          console.log('‚úÖ BlindArea –æ–Ω–æ–≤–ª–µ–Ω–æ:', text);
        }
      }
      
      // –û–Ω–æ–≤–ª—é—î–º–æ Stands –æ–∫—Ä–µ–º–æ (–∑ –ø–ª–æ—â–µ—é —Ç–∞ –æ–±'—î–º–æ–º, + –ø—Ä–æ–º—ñ–∂–Ω–∞ –¥–µ—Ç–∞–ª—å)
      if (summaryData.stands && summaryData.stands.length > 0) {
        console.log('üìê Stands –¥–∞–Ω—ñ:', summaryData.stands);
        
        const standEl = safeGetElement('summary-stand');
        if (standEl) {
          const lines = summaryData.stands.map(stand => {
            const area = stand.area_m2 !== undefined ? stand.area_m2 : 'N/A';
            const volume = stand.volume_m3 !== undefined ? stand.volume_m3 : 'N/A';
            const standType = stand.stand_type === '–ø—Ä–æ–º—ñ–∂–Ω–∞' ? '–ü—Ä–æ–º—ñ–∂–Ω–∞ –¥–µ—Ç–∞–ª—å' : '–ü—ñ–¥—Å—Ç–∞–≤–∫–∞';
            return `${standType}: ${stand.depth} √ó ${stand.width} √ó ${stand.height} —Å–º\n–ü–ª–æ—â–∞: ${area} –º¬≤\n–û–±'—î–º: ${volume} –º¬≥`;
          });
          
          const text = lines.join('\n\n');
          safeSetTextContent(standEl, text);
          console.log('‚úÖ Stands –æ–Ω–æ–≤–ª–µ–Ω–æ:', text);
        }
      }
      
      // –û–Ω–æ–≤–ª—é—î–º–æ Tiles –æ–∫—Ä–µ–º–æ (–≥—Ä—É–ø—É—î–º–æ –∑–∞ —Ä–æ–∑–º—ñ—Ä–∞–º–∏)
      if (summaryData.tiles && summaryData.tiles.length > 0) {
        console.log('üìê Tiles –¥–∞–Ω—ñ:', summaryData.tiles);
        
        const tilesEl = safeGetElement('summary-tiling');
        if (tilesEl) {
          // –ì—Ä—É–ø—É—î–º–æ –ø–ª–∏—Ç–∫–∏ –∑–∞ —Ä–æ–∑–º—ñ—Ä–∞–º–∏
          const grouped = {};
          
          summaryData.tiles.forEach(tile => {
            const key = `${tile.depth}√ó${tile.width}√ó${tile.height}√ó${tile.tile_type || 'horizontal'}`;
            
            if (!grouped[key]) {
              grouped[key] = {
                depth: tile.depth,
                width: tile.width,
                height: tile.height,
                tile_type: tile.tile_type || 'horizontal',
                count: 0,
                totalArea: 0,
                totalVolume: 0
              };
            }
            
            grouped[key].count++;
            grouped[key].totalArea += (tile.area_m2 || 0);
            grouped[key].totalVolume += (tile.volume_m3 || 0);
          });
          
          // –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç
          const tileLines = [];
          let grandTotalArea = 0;
          let grandTotalVolume = 0;
          
          Object.values(grouped).forEach((group, index) => {
            grandTotalArea += group.totalArea;
            grandTotalVolume += group.totalVolume;
            
            const typeLabel = group.tile_type === '–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞' ? '–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞ –ø–ª–∏—Ç–∫–∞' : '–ü–ª–∏—Ç–∫–∞';
            
            tileLines.push(
              `${typeLabel} ${group.depth} √ó ${group.width} √ó ${group.height} —Å–º - ${group.count} —à—Ç\n` +
              `  –ü–ª–æ—â–∞: ${group.totalArea.toFixed(3)} –º¬≤, –û–±'—î–º: ${group.totalVolume.toFixed(4)} –º¬≥`
            );
          });
          
          tileLines.push(
            `\n–ó–ê–ì–ê–õ–û–ú:\n` +
            `  –ü–ª–æ—â–∞: ${grandTotalArea.toFixed(2)} –º¬≤\n` +
            `  –û–±'—î–º: ${grandTotalVolume.toFixed(3)} –º¬≥`
          );
          
          const text = tileLines.join('\n\n');
          safeSetTextContent(tilesEl, text);
          console.log('‚úÖ Tiles –æ–Ω–æ–≤–ª–µ–Ω–æ:', text);
        }
      }
      
      // –û–Ω–æ–≤–ª—é—î–º–æ –°—Ç–µ–ª–∏ (–≥—Ä—É–ø—É—î–º–æ –∑–∞ —Ä–æ–∑–º—ñ—Ä–∞–º–∏)
      if (summaryData.steles && summaryData.steles.length > 0) {
        console.log('üìê Steles –¥–∞–Ω—ñ:', summaryData.steles);
        
        const steleEl = safeGetElement('summary-stele');
        if (steleEl) {
          const grouped = {};
          
          summaryData.steles.forEach(stele => {
            const key = `${stele.depth}√ó${stele.width}√ó${stele.height}`;
            
            if (!grouped[key]) {
              grouped[key] = {
                depth: stele.depth,
                width: stele.width,
                height: stele.height,
                count: 0,
                totalArea: 0,
                totalVolume: 0
              };
            }
            
            grouped[key].count++;
            grouped[key].totalArea += (stele.area_m2 || 0);
            grouped[key].totalVolume += (stele.volume_m3 || 0);
          });
          
          const steleLines = [];
          let totalArea = 0;
          let totalVolume = 0;
          
          Object.values(grouped).forEach(group => {
            totalArea += group.totalArea;
            totalVolume += group.totalVolume;
            
            steleLines.push(
              `–°—Ç–µ–ª–∞ ${group.depth} √ó ${group.width} √ó ${group.height} —Å–º - ${group.count} —à—Ç\n` +
              `  –ü–ª–æ—â–∞: ${group.totalArea.toFixed(3)} –º¬≤, –û–±'—î–º: ${group.totalVolume.toFixed(4)} –º¬≥`
            );
          });
          
          if (Object.keys(grouped).length > 1) {
            steleLines.push(`\n–ó–ê–ì–ê–õ–û–ú:\n  –ü–ª–æ—â–∞: ${totalArea.toFixed(2)} –º¬≤\n  –û–±'—î–º: ${totalVolume.toFixed(3)} –º¬≥`);
          }
          
          const text = steleLines.join('\n\n');
          safeSetTextContent(steleEl, text);
          console.log('‚úÖ Steles –æ–Ω–æ–≤–ª–µ–Ω–æ:', text);
        }
      }
      
      // –û–Ω–æ–≤–ª—é—î–º–æ –ö–≤—ñ—Ç–Ω–∏–∫–∏ (–≥—Ä—É–ø—É—î–º–æ –∑–∞ —Ä–æ–∑–º—ñ—Ä–∞–º–∏)
      if (summaryData.flowerbeds && summaryData.flowerbeds.length > 0) {
        console.log('üìê Flowerbeds –¥–∞–Ω—ñ:', summaryData.flowerbeds);
        
        const flowerbedEl = safeGetElement('summary-flowerbed');
        if (flowerbedEl) {
          const grouped = {};
          
          summaryData.flowerbeds.forEach(flowerbed => {
            const key = `${flowerbed.depth}√ó${flowerbed.width}√ó${flowerbed.height}`;
            
            if (!grouped[key]) {
              grouped[key] = {
                depth: flowerbed.depth,
                width: flowerbed.width,
                height: flowerbed.height,
                count: 0,
                totalArea: 0,
                totalVolume: 0
              };
            }
            
            grouped[key].count++;
            grouped[key].totalArea += (flowerbed.area_m2 || 0);
            grouped[key].totalVolume += (flowerbed.volume_m3 || 0);
          });
          
          const flowerbedLines = [];
          let totalArea = 0;
          let totalVolume = 0;
          
          Object.values(grouped).forEach(group => {
            totalArea += group.totalArea;
            totalVolume += group.totalVolume;
            
            flowerbedLines.push(
              `–ö–≤—ñ—Ç–Ω–∏–∫ ${group.depth} √ó ${group.width} √ó ${group.height} —Å–º - ${group.count} —à—Ç\n` +
              `  –ü–ª–æ—â–∞: ${group.totalArea.toFixed(3)} –º¬≤, –û–±'—î–º: ${group.totalVolume.toFixed(4)} –º¬≥`
            );
          });
          
          if (Object.keys(grouped).length > 1) {
            flowerbedLines.push(`\n–ó–ê–ì–ê–õ–û–ú:\n  –ü–ª–æ—â–∞: ${totalArea.toFixed(2)} –º¬≤\n  –û–±'—î–º: ${totalVolume.toFixed(3)} –º¬≥`);
          }
          
          const text = flowerbedLines.join('\n\n');
          safeSetTextContent(flowerbedEl, text);
          console.log('‚úÖ Flowerbeds –æ–Ω–æ–≤–ª–µ–Ω–æ:', text);
        }
      }
      
      // –û–Ω–æ–≤–ª—é—î–º–æ –ö—É—Ç–æ–≤—É –æ–≥–æ—Ä–æ–∂—É (–≥—Ä—É–ø—É—î–º–æ –∑–∞ —Ç–∏–ø–æ–º)
      if (summaryData.fence_corner && summaryData.fence_corner.length > 0) {
        console.log('üìê Fence Corner –¥–∞–Ω—ñ:', summaryData.fence_corner);
        
        const fenceCornerEl = safeGetElement('summary-fence-corner');
        if (fenceCornerEl) {
          // –ì—Ä—É–ø—É—î–º–æ –∑–∞ –Ω–∞–∑–≤–æ—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
          const grouped = {};
          
          summaryData.fence_corner.forEach(item => {
            const key = item.name;
            
            if (!grouped[key]) {
              grouped[key] = {
                name: item.name,
                depth: item.depth,
                width: item.width,
                height: item.height,
                count: 0,
                totalArea: 0,
                totalVolume: 0
              };
            }
            
            grouped[key].count++;
            grouped[key].totalArea += (item.area_m2 || 0);
            grouped[key].totalVolume += (item.volume_m3 || 0);
          });
          
          const fenceLines = [];
          let grandTotalArea = 0;
          let grandTotalVolume = 0;
          
          Object.values(grouped).forEach(group => {
            grandTotalArea += group.totalArea;
            grandTotalVolume += group.totalVolume;
            
            // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø (Post, Panel_X, Panel_Y)
            const componentName = group.name.replace('CornerFence_', '');
            
            fenceLines.push(
              `${componentName}: ${group.depth} √ó ${group.width} √ó ${group.height} —Å–º - ${group.count} —à—Ç\n` +
              `  –ü–ª–æ—â–∞: ${group.totalArea.toFixed(3)} –º¬≤, –û–±'—î–º: ${group.totalVolume.toFixed(4)} –º¬≥`
            );
          });
          
          fenceLines.push(`\n–ó–ê–ì–ê–õ–û–ú:\n  –ü–ª–æ—â–∞: ${grandTotalArea.toFixed(2)} –º¬≤\n  –û–±'—î–º: ${grandTotalVolume.toFixed(3)} –º¬≥`);
          
          const text = fenceLines.join('\n\n');
          safeSetTextContent(fenceCornerEl, text);
          console.log('‚úÖ Fence Corner –æ–Ω–æ–≤–ª–µ–Ω–æ:', text);
        }
      }
      
      // –û–Ω–æ–≤–ª—é—î–º–æ –î–µ–∫–æ—Ä –æ–≥–æ—Ä–æ–∂—ñ (ball.skp —Ç–∞ —ñ–Ω—à—ñ)
      if (summaryData.fence_decor && summaryData.fence_decor.length > 0) {
        console.log('üìê Fence Decor –¥–∞–Ω—ñ:', summaryData.fence_decor);
        
        const fenceDecorEl = safeGetElement('summary-fence-decor');
        if (fenceDecorEl) {
          const grouped = {};
          
          summaryData.fence_decor.forEach(item => {
            const key = item.name;
            
            if (!grouped[key]) {
              grouped[key] = {
                name: item.name,
                depth: item.depth,
                width: item.width,
                height: item.height,
                count: 0,
                totalArea: 0,
                totalVolume: 0
              };
            }
            
            grouped[key].count++;
            grouped[key].totalArea += (item.area_m2 || 0);
            grouped[key].totalVolume += (item.volume_m3 || 0);
          });
          
          const decorLines = [];
          let totalArea = 0;
          let totalVolume = 0;
          
          Object.values(grouped).forEach(group => {
            totalArea += group.totalArea;
            totalVolume += group.totalVolume;
            
            decorLines.push(
              `${group.name}: ${group.depth} √ó ${group.width} √ó ${group.height} —Å–º - ${group.count} —à—Ç\n` +
              `  –ü–ª–æ—â–∞: ${group.totalArea.toFixed(3)} –º¬≤, –û–±'—î–º: ${group.totalVolume.toFixed(4)} –º¬≥`
            );
          });
          
          if (Object.keys(grouped).length > 1) {
            decorLines.push(`\n–ó–ê–ì–ê–õ–û–ú:\n  –ü–ª–æ—â–∞: ${totalArea.toFixed(2)} –º¬≤\n  –û–±'—î–º: ${totalVolume.toFixed(3)} –º¬≥`);
          }
          
          const text = decorLines.join('\n\n');
          safeSetTextContent(fenceDecorEl, text);
          console.log('‚úÖ Fence Decor –æ–Ω–æ–≤–ª–µ–Ω–æ:', text);
        }
      }
      
      const categories = [
        { key: 'gravestones', id: 'summary-gravestone', label: '–ù–∞–¥–≥—Ä–æ–±–Ω–∞ –ø–ª–∏—Ç–∞' },
        { key: 'lamps', id: 'summary-lamp', label: '–õ–∞–º–ø–∞' }
      ];
      
      categories.forEach(category => {
        const element = safeGetElement(category.id);
        const items = summaryData[category.key];
        
        console.log(`üìå –ö–∞—Ç–µ–≥–æ—Ä—ñ—è ${category.label}:`, items);
        
        if (!element) {
          console.warn(`‚ö†Ô∏è –ï–ª–µ–º–µ–Ω—Ç ${category.id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!`);
          return;
        }
        
        if (!items || items.length === 0) {
          console.log(`‚ÑπÔ∏è ${category.label}: –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö`);
          return;
        }
        
        // –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó (–≤–∏–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ—Ä—è–¥–æ–∫ —Ä–æ–∑–º—ñ—Ä—ñ–≤)
        const lines = items.map(item => {
          return `${item.depth}√ó${item.width}√ó${item.height} —Å–º (${item.material}) - ${item.count} —à—Ç`;
        });
        
        const text = lines.join('\n');
        console.log(`‚úÖ ${category.label}: ${text}`);
        safeSetTextContent(element, text);
      });
      
      logSummaryAction('–î–µ—Ç–∞–ª—å–Ω–∞ —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–∞', 'success');
      
    } catch (error) {
      logSummaryAction(`–ü–æ–º–∏–ª–∫–∞ –≤ updateDetailedSummary(): ${error.message}`, 'error');
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ—ó —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó:', error);
    }
  }
  
  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø–∏—Ç—É –¥–µ—Ç–∞–ª—å–Ω–æ—ó —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
  function refreshDetailedSummary() {
    try {
      logSummaryAction('–ó–∞–ø–∏—Ç –¥–µ—Ç–∞–ª—å–Ω–æ—ó —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó', 'info');
      console.log('üîÑ –í–∏–∫–ª–∏–∫–∞—é window.sketchup.get_detailed_summary()');
      
      if (window.sketchup && window.sketchup.get_detailed_summary) {
        window.sketchup.get_detailed_summary();
        console.log('‚úÖ Callback –≤–∏–∫–ª–∏–∫–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
      } else {
        console.error('‚ùå window.sketchup.get_detailed_summary –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π');
        logSummaryAction('SketchUp bridge –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π', 'warn');
      }
      
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error);
      logSummaryAction(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó: ${error.message}`, 'error');
    }
  }
  
  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ—Ç–∞–¥–∞–Ω–∏—Ö (—Ç—ñ–ª—å–∫–∏ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è —Ç–∞ timestamp)
  function updateSummaryMetadata(metadata) {
    console.log('üìä –û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ—Ç–∞–¥–∞–Ω–∏—Ö:', metadata);
    
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–∏—Ö
    let metadataContainer = document.getElementById('summary-metadata');
    
    if (!metadataContainer) {
      // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—ñ—Å–ª—è —Ç–∞–±–ª–∏—Ü—ñ –ø—ñ–¥—Å—É–º–∫—É
      const summarySection = document.querySelector('.summary-table');
      if (summarySection) {
        metadataContainer = document.createElement('div');
        metadataContainer.id = 'summary-metadata';
        metadataContainer.className = 'summary-metadata';
        summarySection.parentNode.insertBefore(metadataContainer, summarySection.nextSibling);
      } else {
        console.warn('‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ .summary-table –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–∏—Ö');
        return;
      }
    }
    
    let html = '';
    
    // –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è (—è–∫—â–æ —î)
    if (metadata.warnings && metadata.warnings.length > 0) {
      html += '<div class="summary-warnings">';
      html += '<div class="warnings-title">‚ö†Ô∏è –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è:</div>';
      html += '<ul class="warnings-list">';
      metadata.warnings.forEach(warning => {
        html += `<li>${warning}</li>`;
      });
      html += '</ul>';
      html += '</div>';
    }
    
    // Timestamp –∑ –∫–Ω–æ–ø–∫–æ—é-—ñ–∫–æ–Ω–∫–æ—é –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è
    if (metadata.timestamp) {
      const date = new Date(metadata.timestamp);
      const formattedTime = date.toLocaleString('uk-UA', {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
      });
      
      html += `<div class="summary-footer">
        <span class="summary-timestamp">–û–Ω–æ–≤–ª–µ–Ω–æ: ${formattedTime}</span>
        <div class="summary-actions">
          <button class="summary-icon-btn" onclick="window.ProGran3.UI.SummaryTable.generateReport()" title="–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–≤—ñ—Ç">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
              <polyline points="14 2 14 8 20 8"></polyline>
              <line x1="16" y1="13" x2="8" y2="13"></line>
              <line x1="16" y1="17" x2="8" y2="17"></line>
              <polyline points="10 9 9 9 8 9"></polyline>
            </svg>
          </button>
          <button class="summary-icon-btn" onclick="window.ProGran3.UI.SummaryTable.copySummaryToClipboard()" title="–ö–æ–ø—ñ—é–≤–∞—Ç–∏ –ø—ñ–¥—Å—É–º–æ–∫">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
              <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
            </svg>
          </button>
        </div>
      </div>`;
    }
    
    metadataContainer.innerHTML = html;
    console.log('‚úÖ –ú–µ—Ç–∞–¥–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ');
  }
  
  // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ–≥–æ –∑–≤—ñ—Ç—É
  async function generateReport() {
    console.log('üìÑ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—É...');
    
    try {
      let reportData = null;
      
      // 1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ
      if (window.lastSummaryData && Object.keys(window.lastSummaryData).length > 0) {
        console.log('‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –∑–≤—ñ—Ç—É');
        reportData = window.lastSummaryData;
      } 
      // 2. Fallback –¥–æ StateManager
      else if (global.ProGran3.Core.StateManager) {
        console.log('üîÑ –û—Ç—Ä–∏–º—É—é –¥–∞–Ω—ñ –∑ StateManager...');
        const addedElements = global.ProGran3.Core.StateManager.getAddedElements();
        const currentUnit = global.ProGran3.Utils.Units ? 
          global.ProGran3.Utils.Units.getCurrentUnit() : 'mm';
        
        // –ì–µ–Ω–µ—Ä—É—î–º–æ –±–∞–∑–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è –∑–≤—ñ—Ç—É
        reportData = {
          summary: generateSummaryData(addedElements, currentUnit),
          metadata: {
            plugin_version: '3.2.1',
            generated_at: new Date().toISOString(),
            unit: currentUnit
          }
        };
        console.log('‚úÖ –î–∞–Ω—ñ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –∑ StateManager:', reportData);
      }
      // 3. Fallback –¥–æ –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö
      else if (global.addedElements) {
        console.log('üîÑ –û—Ç—Ä–∏–º—É—é –¥–∞–Ω—ñ –∑ –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö...');
        const addedElements = global.addedElements;
        const currentUnit = global.currentUnit || 'mm';
        
        reportData = {
          summary: generateSummaryData(addedElements, currentUnit),
          metadata: {
            plugin_version: '3.2.1',
            generated_at: new Date().toISOString(),
            unit: currentUnit
          }
        };
        console.log('‚úÖ –î–∞–Ω—ñ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –∑ –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö:', reportData);
      }
      // 4. –ó–∞–ø–∏—Ç –∑ Ruby
      else if (window.sketchup) {
        console.log('üîÑ –ó–∞–ø–∏—Ç –¥–∞–Ω–∏—Ö –∑ Ruby...');
        window.sketchup.generate_report();
        return; // –ü—ñ—Å–ª—è –∑–∞–ø–∏—Ç—É –¥–∞–Ω–∏—Ö –∑ Ruby, callback –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∫–ª–∏—á–µ showReportModal
      }
      
      if (reportData) {
        await showReportModal(reportData);
      } else {
        console.error('‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∑–≤—ñ—Ç—É');
        alert('–°–ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å "–û–Ω–æ–≤–∏—Ç–∏" —É –ø—ñ–¥—Å—É–º–∫—É –ø—Ä–æ–µ–∫—Ç—É –∞–±–æ –¥–æ–¥–∞–π—Ç–µ –µ–ª–µ–º–µ–Ω—Ç–∏ –¥–æ –º–æ–¥–µ–ª—ñ');
      }
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—É:', error);
      
      // –ü–æ–∫–∞–∑—É—î–º–æ –∑—Ä–æ–∑—É–º—ñ–ª–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
      let userMessage = '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—É';
      
      if (error.message.includes('–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É') || error.message.includes('–ù–µ–º–∞—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è')) {
        userMessage = '–ù–µ–º–∞—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É.\n\n–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—É –ø–æ—Ç—Ä—ñ–±–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞.\n–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –º–µ—Ä–µ–∂–µ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.';
      } else if (error.message.includes('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π')) {
        userMessage = '–°–µ—Ä–≤–µ—Ä —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.\n\n–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.';
      } else if (error.message.includes('–¢–∞–π–º–∞—É—Ç')) {
        userMessage = '–¢–∞–π–º–∞—É—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞.\n\n–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —à–≤–∏–¥–∫—ñ—Å—Ç—å —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.';
      } else {
        userMessage = `–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—É:\n${error.message}`;
      }
      
      alert(userMessage);
    }
  }
  
  // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –¥–ª—è –∑–≤—ñ—Ç—É –∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
  function generateSummaryData(addedElements, currentUnit) {
    console.log('üìä –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –¥–ª—è –∑–≤—ñ—Ç—É –∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É');
    console.log('üìä addedElements:', addedElements);
    console.log('üìä currentUnit:', currentUnit);
    
    const summaryData = {};
    
    // –ì–µ–Ω–µ—Ä—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    Object.keys(addedElements).forEach(category => {
      if (addedElements[category]) {
        const elementData = addedElements[category];
        
        if (typeof elementData === 'object' && elementData !== null) {
          // –Ø–∫—â–æ —Ü–µ –æ–±'—î–∫—Ç –∑ —Ä–æ–∑–º—ñ—Ä–∞–º–∏
          if (elementData.height && elementData.width && elementData.depth) {
            summaryData[category] = [{
              height: elementData.height,
              width: elementData.width,
              depth: elementData.depth,
              count: 1,
              area_m2: calculateArea(elementData.height, elementData.width, currentUnit),
              volume_m3: calculateVolume(elementData.height, elementData.width, elementData.depth, currentUnit)
            }];
          }
          // –Ø–∫—â–æ —Ü–µ –ø—Ä–æ—Å—Ç–∏–π –æ–±'—î–∫—Ç
          else {
            summaryData[category] = [{
              count: 1,
              area_m2: 0,
              volume_m3: 0
            }];
          }
        }
        // –Ø–∫—â–æ —Ü–µ –ø—Ä–æ—Å—Ç–æ true/false
        else if (elementData === true) {
          summaryData[category] = [{
            count: 1,
            area_m2: 0,
            volume_m3: 0
          }];
        }
      }
    });
    
    console.log('üìä –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –∑–≤—ñ—Ç—É:', summaryData);
    return summaryData;
  }
  
  // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–ª–æ—â—ñ
  function calculateArea(height, width, unit) {
    const h = parseFloat(height) || 0;
    const w = parseFloat(width) || 0;
    
    if (unit === 'cm') {
      return (h * w) / 10000; // —Å–º¬≤ –≤ –º¬≤
    } else {
      return (h * w) / 1000000; // –º–º¬≤ –≤ –º¬≤
    }
  }
  
  // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –æ–±'—î–º—É
  function calculateVolume(height, width, depth, unit) {
    const h = parseFloat(height) || 0;
    const w = parseFloat(width) || 0;
    const d = parseFloat(depth) || 0;
    
    if (unit === 'cm') {
      return (h * w * d) / 1000000; // —Å–º¬≥ –≤ –º¬≥
    } else {
      return (h * w * d) / 1000000000; // –º–º¬≥ –≤ –º¬≥
    }
  }
  
  // –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –∑—ñ –∑–≤—ñ—Ç–æ–º
  async function showReportModal(data) {
    console.log('üìä –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–≤—ñ—Ç—É:', data);
    
    // –†–æ–∑—à–∏—Ä—é—î–º–æ –æ—Å–Ω–æ–≤–Ω–µ –≤—ñ–∫–Ω–æ –í–õ–Ü–í–û
    if (window.sketchup && window.sketchup.expand_window_for_report) {
      console.log('üìê –†–æ–∑—à–∏—Ä–µ–Ω–Ω—è –≤—ñ–∫–Ω–∞ –≤–ª—ñ–≤–æ...');
      window.sketchup.expand_window_for_report();
    }
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
    let modal = document.getElementById('report-modal');
    if (!modal) {
      modal = document.createElement('div');
      modal.id = 'report-modal';
      modal.className = 'report-modal';
      document.body.appendChild(modal);
    }
    
    // –ü–æ–∫–∞–∑—É—î–º–æ loading
    modal.innerHTML = `
      <div class="report-modal-overlay"></div>
      <div class="report-modal-content" style="display:flex; align-items:center; justify-content:center; min-height:400px;">
        <div style="text-align:center;">
          <div class="loading-spinner" style="margin:0 auto 20px;"></div>
          <div>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥—É–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—É...</div>
        </div>
      </div>
    `;
    modal.style.display = 'flex';
    
    try {
      // –ì–µ–Ω–µ—Ä—É—î–º–æ HTML –∑–≤—ñ—Ç—É (async, –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î –º–æ–¥—É–ª—å)
      const reportHTML = await generateReportHTML(data);
    
    modal.innerHTML = `
      <div class="report-modal-overlay" onclick="window.ProGran3.UI.SummaryTable.closeReportModal()"></div>
      <div class="report-modal-content">
        <div class="report-modal-header">
          <div class="report-header-buttons">
            <button class="report-print-btn-icon" onclick="window.ProGran3.UI.SummaryTable.printReport()" title="–î—Ä—É–∫ –∑–≤—ñ—Ç—É">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <polyline points="6 9 6 2 18 2 18 9"></polyline>
                <path d="M6 18H4a2 2 0 0 1-2-2v-5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1 2 2h-2"></path>
                <rect x="6" y="14" width="12" height="8"></rect>
              </svg>
              –î—Ä—É–∫
            </button>
            <button class="report-pdf-btn-icon" onclick="window.ProGran3.UI.SummaryTable.exportToPDF()" title="–ó–±–µ—Ä–µ–≥—Ç–∏ —è–∫ PDF (–æ–±–µ—Ä—ñ—Ç—å –ø—Ä–∏–Ω—Ç–µ—Ä 'Save as PDF' –≤ –¥—ñ–∞–ª–æ–∑—ñ –¥—Ä—É–∫—É)">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                <polyline points="14,2 14,8 20,8"></polyline>
                <line x1="16" y1="13" x2="8" y2="13"></line>
                <line x1="16" y1="17" x2="8" y2="17"></line>
                <polyline points="10,9 9,9 8,9"></polyline>
              </svg>
              PDF
            </button>
          </div>
          <h2>–ó–≤—ñ—Ç –ø—Ä–æ–µ–∫—Ç—É</h2>
          <button class="report-close-btn" onclick="window.ProGran3.UI.SummaryTable.closeReportModal()">
            <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <line x1="18" y1="6" x2="6" y2="18"></line>
              <line x1="6" y1="6" x2="18" y2="18"></line>
            </svg>
          </button>
        </div>
        <div class="report-modal-body">
          <div class="report-pages-container" id="report-pages-container">
            ${reportHTML}
          </div>
        </div>
      </div>
    `;
    
      // –ü–æ–∫–∞–∑—É—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
      modal.style.display = 'flex';
      document.body.style.overflow = 'hidden';
      
      console.log('‚úÖ –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –≤—ñ–¥–∫—Ä–∏—Ç–æ');
      
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—É:', error);
      
      // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–º–∏–ª–∫—É –≤ modal
      modal.innerHTML = `
        <div class="report-modal-overlay" onclick="window.ProGran3.UI.SummaryTable.closeReportModal()"></div>
        <div class="report-modal-content" style="padding:40px; text-align:center;">
          <h2 style="color:#ff6b6b; margin-bottom:20px;">‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—É</h2>
          <p style="margin-bottom:20px;">${error.message}</p>
          <p style="color:#666; font-size:14px;">–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—É –ø–æ—Ç—Ä—ñ–±–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É</p>
          <button onclick="window.ProGran3.UI.SummaryTable.closeReportModal()" 
                  style="margin-top:20px; padding:10px 20px; cursor:pointer;">
            –ó–∞–∫—Ä–∏—Ç–∏
          </button>
        </div>
      `;
      modal.style.display = 'flex';
    }
    
    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–ª–∞–≤—ñ—à—ñ ESC
    const handleEscape = (event) => {
      if (event.key === 'Escape') {
        closeReportModal();
      }
    };
    document.addEventListener('keydown', handleEscape);
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è
    modal._escapeHandler = handleEscape;
    
    // –ü—ñ—Å–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –≤—ñ–∫–Ω–∞, —Ä–æ–∑–±–∏–≤–∞—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    setTimeout(() => {
      paginateReport();
    }, 100);
  }
  
  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑–±–∏–≤–∞–Ω–Ω—è –∑–≤—ñ—Ç—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ A4
  function paginateReport() {
    const container = document.getElementById('report-pages-container');
    if (!container) return;
    
    console.log('üìÑ –†–æ–∑–±–∏—Ç—Ç—è –∑–≤—ñ—Ç—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ A4...');
    
    // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É
    const content = container.innerHTML;
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è
    const tempDiv = document.createElement('div');
    tempDiv.style.position = 'absolute';
    tempDiv.style.visibility = 'hidden';
    tempDiv.style.width = '190mm'; // 210mm - 2*10mm padding
    document.body.appendChild(tempDiv);
    tempDiv.innerHTML = content;
    
    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ A4 (–∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º padding 10mm –∑ –∫–æ–∂–Ω–æ—ó —Å—Ç–æ—Ä–æ–Ω–∏)
    const A4_HEIGHT_MM = 297;
    const PAGE_PADDING_MM = 10; // –ó–º–µ–Ω—à–µ–Ω–æ –∑ 15mm
    const USABLE_HEIGHT_MM = A4_HEIGHT_MM - (PAGE_PADDING_MM * 2); // 277mm
    const MM_TO_PX = 3.7795275591; // 1mm = 3.78px at 96 DPI
    const MAX_PAGE_HEIGHT_PX = USABLE_HEIGHT_MM * MM_TO_PX; // ~1047px
    
    console.log(`üìê –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –≤–∏—Å–æ—Ç–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏: ${MAX_PAGE_HEIGHT_PX}px (~${USABLE_HEIGHT_MM}mm)`);
    
    // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –±–ª–æ–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É
    const header = tempDiv.querySelector('.report-header');
    const table = tempDiv.querySelector('.report-table');
    const preview = tempDiv.querySelector('.report-preview-section');
    const footer = tempDiv.querySelector('.report-footer');
    
    const headerHeight = header ? header.offsetHeight : 0;
    const footerHeight = footer ? footer.offsetHeight : 0;
    const previewHeight = preview ? preview.offsetHeight : 0;
    
    console.log(`üìä –í–∏—Å–æ—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤: header=${headerHeight}px, footer=${footerHeight}px, preview=${previewHeight}px`);
    
    // –û–±—á–∏—Å–ª—é—î–º–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π –ø—Ä–æ—Å—Ç—ñ—Ä –¥–ª—è —Ç–∞–±–ª–∏—Ü—ñ –Ω–∞ –ø–µ—Ä—à—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
    let availableHeight = MAX_PAGE_HEIGHT_PX - headerHeight - footerHeight - 40; // 40px –∑–∞–ø–∞—Å
    
    const tableRows = table ? table.querySelectorAll('tbody tr') : [];
    console.log(`üìä –ó–Ω–∞–π–¥–µ–Ω–æ ${tableRows.length} —Ä—è–¥–∫—ñ–≤ —Ç–∞–±–ª–∏—Ü—ñ`);
    
    // –Ø–∫—â–æ –≤—Å–µ –≤–º—ñ—â—É—î—Ç—å—Å—è –Ω–∞ –æ–¥–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
    const totalContentHeight = headerHeight + (table ? table.offsetHeight : 0) + previewHeight + footerHeight;
    console.log(`üìä –ó–∞–≥–∞–ª—å–Ω–∞ –≤–∏—Å–æ—Ç–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É: ${totalContentHeight}px`);
    
    if (totalContentHeight <= MAX_PAGE_HEIGHT_PX) {
      console.log('‚úÖ –í–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç –≤–º—ñ—â—É—î—Ç—å—Å—è –Ω–∞ –æ–¥–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É');
      container.innerHTML = `
        <div class="report-page-single">
          ${content}
          <div class="report-page-number">–°—Ç–æ—Ä—ñ–Ω–∫–∞ 1 –∑ 1</div>
        </div>
      `;
      document.body.removeChild(tempDiv);
      return;
    }
    
    console.log('üìÑ –ü–æ—Ç—Ä—ñ–±–Ω–æ —Ä–æ–∑–±–∏—Ç–∏ –Ω–∞ –∫—ñ–ª—å–∫–∞ —Å—Ç–æ—Ä—ñ–Ω–æ–∫');
    
    // –ì–µ–Ω–µ—Ä—É—î–º–æ –±–∞–≥–∞—Ç–æ—Å—Ç–æ—Ä—ñ–Ω–∫–æ–≤–∏–π –∑–≤—ñ—Ç
    const pages = generateMultiPageReport(header, table, tableRows, preview, footer, MAX_PAGE_HEIGHT_PX);
    
    container.innerHTML = pages;
    document.body.removeChild(tempDiv);
    
    console.log('‚úÖ –ó–≤—ñ—Ç —Ä–æ–∑–±–∏—Ç–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏');
  }
  
  // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –±–∞–≥–∞—Ç–æ—Å—Ç–æ—Ä—ñ–Ω–∫–æ–≤–æ–≥–æ –∑–≤—ñ—Ç—É
  function generateMultiPageReport(header, table, tableRows, preview, footer, maxHeight) {
    const pages = [];
    let currentPage = 1;
    
    // –ü–µ—Ä—à–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∑ header —Ç–∞ –ø–æ—á–∞—Ç–∫–æ–º —Ç–∞–±–ª–∏—Ü—ñ
    let pageContent = header ? header.outerHTML : '';
    
    if (table) {
      const thead = table.querySelector('thead');
      pageContent += `<div class="report-main"><table class="report-table">${thead.outerHTML}<tbody>`;
      
      let currentHeight = 100; // –ó–º–µ–Ω—à–µ–Ω–∞ –ø—Ä–∏–±–ª–∏–∑–Ω–∞ –≤–∏—Å–æ—Ç–∞ header + thead (–æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ)
      let rowIndex = 0;
      
      // –î–æ–¥–∞—î–º–æ —Ä—è–¥–∫–∏ –ø–æ–∫–∏ –≤–º—ñ—â—É—é—Ç—å—Å—è (–±—ñ–ª—å—à–µ —Ä—è–¥–∫—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É)
      while (rowIndex < tableRows.length && currentHeight < maxHeight - 80) { // –ó–º–µ–Ω—à–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤ –∑ 150 –¥–æ 80
        const row = tableRows[rowIndex];
        pageContent += row.outerHTML;
        currentHeight += row.offsetHeight || 25; // –ó–º–µ–Ω—à–µ–Ω–æ –∑ 30 –¥–æ 25
        rowIndex++;
      }
      
      pageContent += `</tbody></table></div>`;
      
      // –Ø–∫—â–æ —î —â–µ —Ä—è–¥–∫–∏, –¥–æ–¥–∞—î–º–æ —ó—Ö –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
      while (rowIndex < tableRows.length) {
        pages.push(`
          <div class="report-page-single">
            ${pageContent}
            <div class="report-page-number">–°—Ç–æ—Ä—ñ–Ω–∫–∞ ${currentPage} –∑ ?</div>
          </div>
        `);
        
        currentPage++;
        pageContent = (header ? header.outerHTML : '') + 
                     `<div class="report-main"><table class="report-table">${thead.outerHTML}<tbody>`;
        
        currentHeight = 100; // –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ
        
        while (rowIndex < tableRows.length && currentHeight < maxHeight - 80) { // –ë—ñ–ª—å—à–µ –º—ñ—Å—Ü—è –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç—É
          const row = tableRows[rowIndex];
          pageContent += row.outerHTML;
          currentHeight += row.offsetHeight || 25;
          rowIndex++;
        }
        
        pageContent += `</tbody></table></div>`;
      }
    }
    
    // –î–æ–¥–∞—î–º–æ –ø—Ä–µ–≤—å—é —ñ footer –Ω–∞ –æ—Å—Ç–∞–Ω–Ω—é —Å—Ç–æ—Ä—ñ–Ω–∫—É –∞–±–æ –æ–∫—Ä–µ–º—É
    if (preview) {
      pageContent += preview.outerHTML;
    }
    if (footer) {
      pageContent += footer.outerHTML;
    }
    
    pages.push(`
      <div class="report-page-single">
        ${pageContent}
        <div class="report-page-number">–°—Ç–æ—Ä—ñ–Ω–∫–∞ ${currentPage} –∑ ${currentPage}</div>
      </div>
    `);
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –Ω–æ–º–µ—Ä–∏ —Å—Ç–æ—Ä—ñ–Ω–æ–∫
    return pages.map((page, index) => 
      page.replace('–°—Ç–æ—Ä—ñ–Ω–∫–∞ ? –∑ ?', `–°—Ç–æ—Ä—ñ–Ω–∫–∞ ${index + 1} –∑ ${pages.length}`)
          .replace(/–°—Ç–æ—Ä—ñ–Ω–∫–∞ \d+ –∑ \?/, `–°—Ç–æ—Ä—ñ–Ω–∫–∞ ${index + 1} –∑ ${pages.length}`)
          .replace(/–°—Ç–æ—Ä—ñ–Ω–∫–∞ \d+ –∑ \d+/, `–°—Ç–æ—Ä—ñ–Ω–∫–∞ ${index + 1} –∑ ${pages.length}`)
    ).join('');
  }
  
  // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è HTML –∑–≤—ñ—Ç—É (—Ñ–æ—Ä–º–∞—Ç A4)
  // v3.2: –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—ñ–≤ –∑ —Å–µ—Ä–≤–µ—Ä–∞ (–∑–∞—Ö–∏—Å—Ç IP)
  async function generateReportHTML(data) {
    console.log('üìÑ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—É –ª–æ–∫–∞–ª—å–Ω–æ (embedded –≤–µ—Ä—Å—ñ—è)...');
    
    try {
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ embedded –≤–µ—Ä—Å—ñ—é –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—ñ–≤
      const html = generateReportHTML_Embedded(data);
      console.log('‚úÖ Embedded –≤–µ—Ä—Å—ñ—è –∑–≤—ñ—Ç—É –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ');
      return html;
      
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ embedded –≤–µ—Ä—Å—ñ—ó:', error);
      throw new Error('–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—É: ' + error.message);
    }
  }
  
  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É
  async function checkInternetConnection() {
    try {
      console.log('üåê –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É...');
      
      // –®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–µ—Ä–µ–∑ fetch –¥–æ —Å–µ—Ä–≤–µ—Ä–∞
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 —Å–µ–∫—É–Ω–¥ timeout
      
      const response = await fetch('https://server-8hx1hwz27-provis3ds-projects.vercel.app/api/systems', {
        method: 'GET',
        signal: controller.signal,
        headers: {
          'Cache-Control': 'no-cache'
        }
      });
      
      clearTimeout(timeoutId);
      
      if (response.ok) {
        console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        return true;
      } else {
        throw new Error(`Server responded with status: ${response.status}`);
      }
      
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞:', error);
      
      if (error.name === 'AbortError') {
        throw new Error('–¢–∞–π–º–∞—É—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç –∑\'—î–¥–Ω–∞–Ω–Ω—è.');
      } else if (error.message.includes('Failed to fetch')) {
        throw new Error('–ù–µ–º–∞—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –º–µ—Ä–µ–∂–µ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.');
      } else {
        throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: ' + error.message);
      }
    }
  }
  
  // –û—á–∏—â–µ–Ω–Ω—è cache –º–æ–¥—É–ª—ñ–≤
  function clearModuleCache() {
    try {
      console.log('üóëÔ∏è –û—á–∏—â–µ–Ω–Ω—è cache –º–æ–¥—É–ª—ñ–≤...');
      
      // –û—á–∏—â–∞—î–º–æ ModuleLoader cache
      if (global.ProGran3.Core.ModuleLoader) {
        global.ProGran3.Core.ModuleLoader.clearAllModulesCache();
      }
      
      // –û—á–∏—â–∞—î–º–æ localStorage cache
      const keys = Object.keys(localStorage);
      keys.forEach(key => {
        if (key.startsWith('ProGran3_Module_')) {
          localStorage.removeItem(key);
        }
      });
      
      console.log('‚úÖ Cache –º–æ–¥—É–ª—ñ–≤ –æ—á–∏—â–µ–Ω–æ');
      
    } catch (error) {
      console.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è cache:', error);
    }
  }
  
  // Embedded –≤–µ—Ä—Å—ñ—è –í–ò–î–ê–õ–ï–ù–ê –¥–ª—è –∑–∞—Ö–∏—Å—Ç—É —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ—ó –≤–ª–∞—Å–Ω–æ—Å—Ç—ñ
  function generateReportHTML_Embedded(data) {
    // Embedded –≤–µ—Ä—Å—ñ—è –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞ —è–∫ fallback
    console.log('üìÑ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ embedded –≤–µ—Ä—Å—ñ—é —è–∫ fallback');
    
    const summaryData = data.summary || data;
    const metadata = data.metadata || {};
    
    const currentDate = new Date().toLocaleDateString('uk-UA', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
    
    // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    let totalComponents = 0;
    let totalArea = 0;
    let totalVolume = 0;
    
    Object.values(summaryData).forEach(category => {
      if (Array.isArray(category)) {
        category.forEach(item => {
          totalComponents += (item.count || 1);
          totalArea += (item.area_m2 || 0) * (item.count || 1);
          totalVolume += (item.volume_m3 || 0) * (item.count || 1);
        });
      }
    });
    
    let html = `
      <div class="report-header">
        <div class="report-title-row">
          <h1>–¢–µ—Ö–Ω—ñ—á–Ω–∏–π –∑–≤—ñ—Ç –ø—Ä–æ–µ–∫—Ç—É</h1>
          <div class="report-date">${currentDate}</div>
        </div>
      </div>
      
      <div class="report-main">
        <table class="report-table">
          <thead>
            <tr>
              <th>–ù–∞–∑–≤–∞</th>
              <th>–†–æ–∑–º—ñ—Ä–∏ (—Å–º)</th>
              <th class="text-center">–ö—ñ–ª—å–∫—ñ—Å—Ç—å</th>
              <th class="text-right">–ü–ª–æ—â–∞ (–º¬≤)</th>
              <th class="text-right">–û–±'—î–º (–º¬≥)</th>
            </tr>
          </thead>
          <tbody>
    `;
    
    // –î–æ–¥–∞—î–º–æ –≤—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤ –æ–¥–Ω—É —Ç–∞–±–ª–∏—Ü—é
    const categories = [
      { key: 'foundation', label: '–§—É–Ω–¥–∞–º–µ–Ω—Ç' },
      { key: 'blind_area', label: '–í—ñ–¥–º–æ—Å—Ç–∫–∞' },
      { key: 'stands', label: '–ü—ñ–¥—Å—Ç–∞–≤–∫–∞' },
      { key: 'tiles', label: '–ü–ª–∏—Ç–∫–∞' },
      { key: 'steles', label: '–°—Ç–µ–ª–∞' },
      { key: 'flowerbeds', label: '–ö–≤—ñ—Ç–Ω–∏–∫' },
      { key: 'fence_corner', label: '–ö—É—Ç–æ–≤–∞ –æ–≥–æ—Ä–æ–∂–∞' },
      { key: 'fence_decor', label: '–î–µ–∫–æ—Ä –æ–≥–æ—Ä–æ–∂—ñ' }
    ];
    
    let hasData = false;
    
    categories.forEach(category => {
      const items = summaryData[category.key];
      console.log(`üìã [generateReportHTML] –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: ${category.label} (${category.key})`);
      console.log(`üìã [generateReportHTML] Items:`, items);
      
      if (items && items.length > 0) {
        hasData = true;
        console.log(`‚úÖ [generateReportHTML] –ì–µ–Ω–µ—Ä—É—î–º–æ —Ä—è–¥–∫–∏ –¥–ª—è ${category.label}, –∫—ñ–ª—å–∫—ñ—Å—Ç—å: ${items.length}`);
        html += generateCategoryRows(category.label, items);
      } else {
        console.log(`‚ö†Ô∏è [generateReportHTML] –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è ${category.label}`);
      }
    });
    
    if (!hasData) {
      html += `
        <tr>
          <td colspan="5" class="text-center" style="padding: 20px; color: #999;">
            –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∑–≤—ñ—Ç—É
          </td>
        </tr>
      `;
    }
    
    html += `
          </tbody>
        </table>
        
        ${(() => {
          // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —É–≤—ñ–º–∫–Ω–µ–Ω–∏–π –ø–µ—Ä–µ–º–∏–∫–∞—á –ø—Ä–µ–≤—å—é
          const previewToggle = document.getElementById('include-preview-toggle');
          const includePreview = previewToggle ? previewToggle.checked : false;
          
          console.log('üìÑ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—É: –ø–µ—Ä–µ–º–∏–∫–∞—á –ø—Ä–µ–≤—å—é =', includePreview);
          
          if (includePreview) {
            console.log('   –í–∏–∫–ª–∏–∫–∞—î–º–æ generatePreviewSection()');
            return generatePreviewSection();
          } else {
            console.log('   –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø—Ä–µ–≤—å—é (–ø–µ—Ä–µ–º–∏–∫–∞—á –≤–∏–º–∫–Ω–µ–Ω–∏–π)');
            return '';
          }
        })()}
      </div>
      
      <div class="report-footer">
        <div class="report-footer-info">
          <div>–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: ${new Date().toLocaleString('uk-UA')}</div>
          <div>ProGran3 Plugin v3.1</div>
        </div>
    `;
    
    return html;
  }
  
  // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å–µ–∫—Ü—ñ—ó –ø—Ä–µ–≤—å—é
  function generatePreviewSection() {
    console.log('üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–µ–≤—å—é –¥–∞–Ω–∏—Ö:', window.currentPreviewData);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä—ñ–∑–Ω—ñ –º–æ–∂–ª–∏–≤—ñ –º—ñ—Å—Ü—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –ø—Ä–µ–≤—å—é –¥–∞–Ω–∏—Ö
    let previewData = null;
    
    // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ window.currentPreviewData
    if (window.currentPreviewData) {
      if (typeof window.currentPreviewData === 'string') {
        previewData = window.currentPreviewData;
        console.log('‚úÖ –ü—Ä–µ–≤—å—é –¥–∞–Ω—ñ –∑–Ω–∞–π–¥–µ–Ω—ñ –≤ window.currentPreviewData (string), –¥–æ–≤–∂–∏–Ω–∞:', previewData.length);
      } else if (typeof window.currentPreviewData === 'object' && window.currentPreviewData.base64) {
        previewData = window.currentPreviewData.base64;
        console.log('‚úÖ –ü—Ä–µ–≤—å—é –¥–∞–Ω—ñ –∑–Ω–∞–π–¥–µ–Ω—ñ –≤ window.currentPreviewData (object), –¥–æ–≤–∂–∏–Ω–∞:', previewData.length);
      }
    }
    
    // –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ global.currentPreviewData
    if (!previewData && global.currentPreviewData) {
      if (typeof global.currentPreviewData === 'string') {
        previewData = global.currentPreviewData;
        console.log('‚úÖ –ü—Ä–µ–≤—å—é –¥–∞–Ω—ñ –∑–Ω–∞–π–¥–µ–Ω—ñ –≤ global.currentPreviewData (string), –¥–æ–≤–∂–∏–Ω–∞:', previewData.length);
      } else if (typeof global.currentPreviewData === 'object' && global.currentPreviewData.base64) {
        previewData = global.currentPreviewData.base64;
        console.log('‚úÖ –ü—Ä–µ–≤—å—é –¥–∞–Ω—ñ –∑–Ω–∞–π–¥–µ–Ω—ñ –≤ global.currentPreviewData (object), –¥–æ–≤–∂–∏–Ω–∞:', previewData.length);
      }
    }
    
    // –Ø–∫—â–æ –≤—Å–µ —â–µ –Ω–µ –∑–Ω–∞–π—à–ª–∏, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–µ—Ä–µ–∑ GlobalState
    if (!previewData && global.ProGran3 && global.ProGran3.Core && global.ProGran3.Core.GlobalState) {
      const globalPreviewData = global.ProGran3.Core.GlobalState.getCurrentPreviewData();
      if (globalPreviewData) {
        if (typeof globalPreviewData === 'string') {
          previewData = globalPreviewData;
          console.log('‚úÖ –ü—Ä–µ–≤—å—é –¥–∞–Ω—ñ –∑–Ω–∞–π–¥–µ–Ω—ñ —á–µ—Ä–µ–∑ GlobalState (string), –¥–æ–≤–∂–∏–Ω–∞:', previewData.length);
        } else if (typeof globalPreviewData === 'object' && globalPreviewData.base64) {
          previewData = globalPreviewData.base64;
          console.log('‚úÖ –ü—Ä–µ–≤—å—é –¥–∞–Ω—ñ –∑–Ω–∞–π–¥–µ–Ω—ñ —á–µ—Ä–µ–∑ GlobalState (object), –¥–æ–≤–∂–∏–Ω–∞:', previewData.length);
        }
      }
    }
    
    if (!previewData) {
      console.log('‚ùå –ü—Ä–µ–≤—å—é –¥–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ –≤ —É—Å—ñ—Ö –º–æ–∂–ª–∏–≤–∏—Ö –º—ñ—Å—Ü—è—Ö');
      return '';
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –¥–∞–Ω—ñ –≤–∞–ª—ñ–¥–Ω—ñ
    if (typeof previewData !== 'string' || previewData.length < 100) {
      console.log('‚ùå –ü—Ä–µ–≤—å—é –¥–∞–Ω—ñ –Ω–µ–≤–∞–ª—ñ–¥–Ω—ñ, –¥–æ–≤–∂–∏–Ω–∞:', previewData ? previewData.length : 0);
      return '';
    }
    
    console.log('üé® –ì–µ–Ω–µ—Ä—É—î–º–æ HTML –¥–ª—è –ø—Ä–µ–≤—å—é —Å–µ–∫—Ü—ñ—ó, –¥–∞–Ω—ñ:', previewData.substring(0, 50) + '...');
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –¥–∞–Ω—ñ –≤–∂–µ –º—ñ—Å—Ç—è—Ç—å data:image prefix
    const imageSrc = previewData.startsWith('data:image') ? previewData : `data:image/png;base64,${previewData}`;
    console.log('üé® Image src –ø–µ—Ä—à—ñ 100 —Å–∏–º–≤–æ–ª—ñ–≤:', imageSrc.substring(0, 100));
    
    return `
      <div class="report-preview-section">
        <h2 class="report-section-title">–ü—Ä–µ–≤—å—é –º–æ–¥–µ–ª—ñ</h2>
        <div class="report-preview-container">
          <img src="${imageSrc}" 
               alt="–ü—Ä–µ–≤—å—é –º–æ–¥–µ–ª—ñ" 
               class="report-preview-image"
               onerror="console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–µ–≤—å—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:', this.src.substring(0, 100) + '...')"
               onload="console.log('‚úÖ –ü—Ä–µ–≤—å—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ')">
        </div>
      </div>
    `;
  }
  
  // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä—è–¥–∫—ñ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó (–±–µ–∑ –æ–∫—Ä–µ–º–æ—ó —Ç–∞–±–ª–∏—Ü—ñ)
  function generateCategoryRows(label, items) {
    console.log(`üìä [generateCategoryRows] –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: ${label}, –∫—ñ–ª—å–∫—ñ—Å—Ç—å items: ${items.length}`);
    console.log(`üìä [generateCategoryRows] Items:`, items);
    
    let html = '';
    
    // –ì—Ä—É–ø—É—î–º–æ –æ–¥–Ω–∞–∫–æ–≤—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
    const grouped = {};
    items.forEach((item, index) => {
      console.log(`  üì¶ Item ${index}:`, {
        name: item.name,
        depth: item.depth,
        width: item.width,
        height: item.height,
        count: item.count,
        area: item.area_m2,
        volume: item.volume_m3
      });
      
      const key = `${item.depth}√ó${item.width}√ó${item.height}`;
      if (!grouped[key]) {
        grouped[key] = {
          name: item.name || label,
          depth: item.depth,
          width: item.width,
          height: item.height,
          count: 0,
          totalArea: 0,
          totalVolume: 0
        };
      }
      grouped[key].count += (item.count || 1);
      grouped[key].totalArea += (item.area_m2 || 0) * (item.count || 1);
      grouped[key].totalVolume += (item.volume_m3 || 0) * (item.count || 1);
    });
    
    console.log(`üìä [generateCategoryRows] –ó–≥—Ä—É–ø–æ–≤–∞–Ω–æ:`, grouped);
    console.log(`üìä [generateCategoryRows] –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥—Ä—É–ø: ${Object.keys(grouped).length}`);
    
    // –†–æ–∑–¥—ñ–ª—é–≤–∞—á –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    html += `
      <tr class="report-category-divider">
        <td colspan="5"><strong>${label}</strong></td>
      </tr>
    `;
    
    // –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –∑–≥—Ä—É–ø–æ–≤–∞–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
    Object.values(grouped).forEach((group, index) => {
      console.log(`  ‚úÖ –ì–µ–Ω–µ—Ä—É—î–º–æ —Ä—è–¥–æ–∫ ${index} –¥–ª—è –≥—Ä—É–ø–∏:`, group);
      console.log(`  üìê –í—Ö—ñ–¥–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏: depth=${group.depth}, width=${group.width}, height=${group.height}`);
      const formattedDims = formatDimensions(group.depth, group.width, group.height);
      console.log(`  üìê –§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏:`, formattedDims);
      
      html += `
        <tr>
          <td>${group.name}</td>
          <td>${formattedDims}</td>
          <td class="text-center">${group.count}</td>
          <td class="text-center">${group.totalArea.toFixed(2)}</td>
          <td class="text-center">${group.totalVolume.toFixed(3)}</td>
        </tr>
      `;
    });
    
    // –ü—ñ–¥—Å—É–º–æ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    const categoryTotal = Object.values(grouped).reduce((acc, g) => ({
      count: acc.count + g.count,
      area: acc.area + g.totalArea,
      volume: acc.volume + g.totalVolume
    }), { count: 0, area: 0, volume: 0 });
    
    html += `
      <tr class="report-category-total">
        <td colspan="2">–†–∞–∑–æ–º ${label}:</td>
        <td class="text-center"><strong>${categoryTotal.count}</strong></td>
        <td class="text-center"><strong>${categoryTotal.area.toFixed(2)}</strong></td>
        <td class="text-center"><strong>${categoryTotal.volume.toFixed(3)}</strong></td>
      </tr>
    `;
    
    console.log(`‚úÖ [generateCategoryRows] –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ HTML –¥–ª—è ${label}, –¥–æ–≤–∂–∏–Ω–∞: ${html.length}`);
    
    return html;
  }
  
  // –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
  function closeReportModal() {
    const modal = document.getElementById('report-modal');
    if (modal) {
      modal.style.display = 'none';
      document.body.style.overflow = '';
      console.log('‚úÖ –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –∑–∞–∫—Ä–∏—Ç–æ');
      
      // –û—á–∏—â–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–ª–∞–≤—ñ—à—ñ ESC
      if (modal._escapeHandler) {
        document.removeEventListener('keydown', modal._escapeHandler);
        modal._escapeHandler = null;
      }
      
      // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä–æ–∑–º—ñ—Ä —Ç–∞ –ø–æ–∑–∏—Ü—ñ—é –≤—ñ–∫–Ω–∞ –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö
      if (window.sketchup && window.sketchup.restore_window_size) {
        console.log('üìê –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É —Ç–∞ –ø–æ–∑–∏—Ü—ñ—ó –≤—ñ–∫–Ω–∞...');
        console.log('   –í–∏–∫–ª–∏–∫–∞—î–º–æ window.sketchup.restore_window_size()');
        try {
          window.sketchup.restore_window_size();
          console.log('   ‚úÖ –í–∏–∫–ª–∏–∫ —É—Å–ø—ñ—à–Ω–∏–π');
        } catch (error) {
          console.error('   ‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–ª–∏–∫—É:', error);
        }
      } else {
        console.warn('‚ö†Ô∏è window.sketchup.restore_window_size –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');
      }
    }
  }
  
  // –î—Ä—É–∫ –∑–≤—ñ—Ç—É
  function printReport() {
    if (window.sketchup && window.sketchup.log_message) {
      window.sketchup.log_message('üñ®Ô∏è [JS] printReport –≤–∏–∫–ª–∏–∫–∞–Ω–æ');
    }
    
    const reportContent = document.getElementById('report-pages-container');
    if (!reportContent) {
      if (window.sketchup && window.sketchup.log_message) {
        window.sketchup.log_message('‚ùå [JS] report-pages-container –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
      }
      return;
    }
    
    if (window.sketchup && window.sketchup.log_message) {
      window.sketchup.log_message('   –ö–æ–Ω—Ç–µ–Ω—Ç –∑–Ω–∞–π–¥–µ–Ω–æ, –≥–æ—Ç—É—î–º–æ HTML...');
    }
    
    // –í–ê–ñ–õ–ò–í–û: –û—Ç—Ä–∏–º—É—î–º–æ HTML –∑ —É—Å—ñ–º–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞–º–∏, —è–∫ –≤–æ–Ω–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω—ñ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º—É –≤—ñ–∫–Ω—ñ
    const pages = reportContent.querySelectorAll('.report-page-single');
    let pagesHTML = '';
    
    if (pages.length > 0) {
      // –Ø–∫—â–æ —î —Ä–æ–∑–±–∏–≤–∫–∞ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏, –µ–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –∫–æ–∂–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É –æ–∫—Ä–µ–º–æ
      if (window.sketchup && window.sketchup.log_message) {
        window.sketchup.log_message(`   –ó–Ω–∞–π–¥–µ–Ω–æ ${pages.length} —Å—Ç–æ—Ä—ñ–Ω–æ–∫`);
      }
      
      pages.forEach((page, index) => {
        pagesHTML += `
          <div class="report-page" style="page-break-after: ${index < pages.length - 1 ? 'always' : 'auto'};">
            ${page.innerHTML}
          </div>
        `;
      });
    } else {
      // –Ø–∫—â–æ –Ω–µ–º–∞—î —Ä–æ–∑–±–∏–≤–∫–∏, –µ–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —è–∫ —î
      if (window.sketchup && window.sketchup.log_message) {
        window.sketchup.log_message('   –ù–µ–º–∞—î —Ä–æ–∑–±–∏–≤–∫–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏, –µ–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —è–∫ –æ–¥–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É');
      }
      pagesHTML = `<div class="report-page">${reportContent.innerHTML}</div>`;
    }
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤–Ω–∏–π HTML –¥–æ–∫—É–º–µ–Ω—Ç
    const htmlContent = `<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>–ó–≤—ñ—Ç –ø—Ä–æ–µ–∫—Ç—É ProGran3</title>
  <link href="https://fonts.googleapis.com/css2?family=Comfortaa:wght@600&display=swap" rel="stylesheet">
  <style>
    * { box-sizing: border-box; }
    body { 
      font-family: 'Comfortaa', Arial, sans-serif; 
      margin: 0; 
      padding: 20px; 
      background: white;
      color: #2c3e50;
    }
    
    /* Header –∑–≤—ñ—Ç—É */
    .report-header {
      text-align: center;
      margin-bottom: 3px;
      padding: 1px 0;
      border-bottom: 1px solid #3498db;
    }
    
    .report-header h1 {
      margin: 0;
      font-size: 1.1em;
      color: #2c3e50;
      font-weight: 600;
      font-family: 'Comfortaa', sans-serif;
    }
    
    .report-date {
      font-size: 0.8em;
      color: #95a5a6;
      font-style: italic;
    }
    
    /* –¢–∞–±–ª–∏—Ü—ñ */
    .report-table {
      width: 100%;
      border-collapse: collapse;
      margin: 3px 0;
      font-size: 0.9em;
      font-family: 'Comfortaa', sans-serif;
    }
    
    .report-table thead {
      background: #34495e;
      color: white;
    }
    
    .report-table th {
      padding: 5px 4px;
      font-weight: 600;
      font-size: 0.75em;
      text-transform: uppercase;
      letter-spacing: 0.2px;
      font-family: 'Comfortaa', sans-serif;
      white-space: nowrap;
    }
    
    .report-table th:nth-child(1) {
      text-align: left;
      width: 35%;
    }
    
    .report-table th:nth-child(2) {
      text-align: left;
      width: 20%;
    }
    
    .report-table th:nth-child(3),
    .report-table th:nth-child(4),
    .report-table th:nth-child(5) {
      text-align: center;
      width: 15%;
    }
    
    .report-table td {
      padding: 5px 4px;
      border-bottom: 1px solid #ecf0f1;
      font-family: 'Comfortaa', sans-serif;
      font-weight: 600;
      font-size: 0.9em;
    }
    
    .report-table td:nth-child(1) {
      text-align: left;
      width: 35%;
    }
    
    .report-table td:nth-child(2) {
      text-align: center;
      width: 20%;
      font-family: 'Comfortaa', sans-serif;
      padding: 0;
    }
    
    .report-table td:nth-child(3),
    .report-table td:nth-child(4),
    .report-table td:nth-child(5) {
      text-align: center;
      width: 15%;
    }
    
    /* –†–æ–∑–¥—ñ–ª—é–≤–∞—á—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π */
    .report-category-divider td {
      background: #3498db !important;
      color: white !important;
      font-weight: 600;
      font-size: 0.75em;
      padding: 3px 4px !important;
      letter-spacing: 0.3px;
      border-top: 2px solid #2980b9;
      font-family: 'Comfortaa', sans-serif;
    }
    
    /* –ü—ñ–¥—Å—É–º–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö */
    .report-category-total td {
      background: #ecf0f1 !important;
      font-weight: 600;
      font-size: 0.75em;
      color: #2c3e50;
      border-bottom: 2px solid #bdc3c7 !important;
      font-family: 'Comfortaa', sans-serif;
      padding: 3px 4px !important;
    }
    
    .report-category-total td:nth-child(1) {
      text-align: left;
    }
    
    .report-category-total td:nth-child(2),
    .report-category-total td:nth-child(3),
    .report-category-total td:nth-child(4),
    .report-category-total td:nth-child(5) {
      text-align: center;
    }
    
    /* –†–æ–∑–º—ñ—Ä–∏ - –∫–æ–º–ø–∞–∫—Ç–Ω–∏–π —Ç–∞–±–ª–∏—á–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç */
    .dimensions-table {
      border-collapse: collapse;
      margin: 0;
      padding: 0;
      display: inline-table;
      border: none;
    }
    
    .dimensions-table td {
      border: none;
      padding: 2px 6px;
      text-align: center;
      font-weight: 500;
      background-color: transparent;
      min-width: 35px;
      font-size: 0.9rem;
      white-space: nowrap;
    }
    
    /* –ü—Ä–µ–≤—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è */
    .report-preview-section {
      margin-top: 15px;
      padding-top: 10px;
      border-top: 1px solid #ddd;
      page-break-inside: avoid;
    }
    
    .report-section-title {
      font-size: 14pt;
      color: #2c3e50;
      margin-bottom: 8px;
      font-family: 'Comfortaa', sans-serif;
      font-weight: 600;
    }
    
    .report-preview-container {
      text-align: center;
      margin: 10px 0;
      page-break-inside: avoid;
    }
    
    .report-preview-image {
      max-width: 100%;
      height: auto;
      border: 1px solid #ddd;
    }
    
    /* Footer */
    .report-footer {
      margin-top: 10px;
      padding-top: 6px;
      border-top: 1px solid #ddd;
      font-size: 8pt;
      color: #666;
    }
    
    /* –°—Ç–∏–ª—ñ –¥–ª—è —Å—Ç–æ—Ä—ñ–Ω–æ–∫ */
    .report-page {
      background: white;
      margin: 0;
      padding: 20px;
      min-height: 297mm;
    }
    
    /* –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—Ä—É–∫—É */
    @page {
      size: A4;
      margin: 20mm;
    }
    
    @media print {
      body { margin: 0; padding: 0; }
      .no-print { display: none !important; }
      
      .report-page {
        margin: 0;
        padding: 10mm;
      }
      
      .report-table tr {
        page-break-inside: avoid;
      }
      
      .report-table thead {
        display: table-header-group;
      }
    }
    
    .print-instructions {
      position: fixed;
      top: 20px;
      right: 20px;
      background: #3498db;
      color: white;
      padding: 15px 20px;
      border-radius: 8px;
      font-size: 14px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.2);
      z-index: 9999;
      font-family: 'Comfortaa', Arial, sans-serif;
    }
    
    .print-btn {
      background: #2ecc71;
      color: white;
      border: none;
      padding: 10px 20px;
      border-radius: 6px;
      cursor: pointer;
      font-size: 14px;
      font-weight: 600;
      margin-top: 10px;
      width: 100%;
      font-family: 'Comfortaa', Arial, sans-serif;
    }
    
    .print-btn:hover {
      background: #27ae60;
    }
  </style>
  <script>
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –¥—ñ–∞–ª–æ–≥ –¥—Ä—É–∫—É –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    window.addEventListener('load', function() {
      // –ó–∞—Ç—Ä–∏–º–∫–∞ 500ms —â–æ–± –∫–æ–Ω—Ç–µ–Ω—Ç –≤—Å—Ç–∏–≥ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏—Å—è
      setTimeout(function() {
        window.print();
      }, 500);
    });
    
    function printNow() {
      window.print();
    }
  </script>
</head>
<body>
<div class="print-instructions no-print">
  <strong>–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è:</strong><br>
  1. –û–±–µ—Ä—ñ—Ç—å –ø—Ä–∏–Ω—Ç–µ—Ä "Microsoft Print to PDF"<br>
  2. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "Print" / "–î—Ä—É–∫"<br>
  3. –û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ü–µ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è<br><br>
  <button class="print-btn" onclick="printNow()">–í—ñ–¥–∫—Ä–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥ –¥—Ä—É–∫—É</button>
</div>
${pagesHTML}
</body>
</html>`;
    
    if (window.sketchup && window.sketchup.log_message) {
      window.sketchup.log_message('   HTML –≥–æ—Ç–æ–≤–∏–π, —Ä–æ–∑–º—ñ—Ä: ' + htmlContent.length + ' —Å–∏–º–≤–æ–ª—ñ–≤');
    }
    
    // –í–∏–∫–ª–∏–∫–∞—î–º–æ Ruby callback –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ñ–∞–π–ª—É
    if (window.sketchup && window.sketchup.save_and_print_report) {
      if (window.sketchup && window.sketchup.log_message) {
        window.sketchup.log_message('   –í–∏–∫–ª–∏–∫–∞—î–º–æ save_and_print_report...');
      }
      window.sketchup.save_and_print_report(htmlContent);
    } else {
      if (window.sketchup && window.sketchup.log_message) {
        window.sketchup.log_message('‚ö†Ô∏è [JS] save_and_print_report callback –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        window.sketchup.log_message('   –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ SketchUp –ø–æ–≤–Ω—ñ—Å—Ç—é –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω');
      }
      
      // –¢–ò–ú–ß–ê–°–û–í–ï –†–Ü–®–ï–ù–ù–Ø: –∫–æ–ø—ñ—é—î–º–æ HTML –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É
      if (window.sketchup && window.sketchup.copy_report_html) {
        window.sketchup.copy_report_html(htmlContent);
      }
    }
  }

  // –ï–∫—Å–ø–æ—Ä—Ç –≤ PDF
  function exportToPDF() {
    // –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤ Ruby Console
    if (window.sketchup && window.sketchup.log_message) {
      window.sketchup.log_message('üìÑ [JS] exportToPDF –≤–∏–∫–ª–∏–∫–∞–Ω–æ');
    }
    
    try {
      // –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥—Ä—É–∫—É –Ω–∞–ø—Ä—è–º—É
      // –£ –¥—ñ–∞–ª–æ–∑—ñ –¥—Ä—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–æ–∂–µ –æ–±—Ä–∞—Ç–∏ "Microsoft Print to PDF"
      if (window.sketchup && window.sketchup.log_message) {
        window.sketchup.log_message('   –í–∏–∫–ª–∏–∫–∞—î–º–æ printReport()...');
      }
      
      printReport();
      
      if (window.sketchup && window.sketchup.log_message) {
        window.sketchup.log_message('‚úÖ [JS] printReport –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
      }
      
    } catch (error) {
      // –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏ –≤ Ruby Console
      if (window.sketchup && window.sketchup.log_message) {
        window.sketchup.log_message('‚ùå [JS] –ü–æ–º–∏–ª–∫–∞ –≤ exportToPDF: ' + error.message);
      }
    }
  }
  
  // –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è –ø—ñ–¥—Å—É–º–∫—É –≤ clipboard
  function copySummaryToClipboard() {
    try {
      const summaryElements = [
        'summary-foundation',
        'summary-blind-area',
        'summary-stand',
        'summary-tiling',
        'summary-stele',
        'summary-flowerbed',
        'summary-fence-corner',
        'summary-fence-decor',
        'summary-gravestone',
        'summary-lamp'
      ];
      
      let text = '=== –ü–Ü–î–°–£–ú–û–ö –ü–†–û–ï–ö–¢–£ ProGran3 ===\n\n';
      
      // –ú–µ—Ç–∞–¥–∞–Ω—ñ
      const metadata = document.getElementById('summary-metadata');
      if (metadata) {
        const stats = metadata.querySelectorAll('.stat-item');
        stats.forEach(stat => {
          const label = stat.querySelector('.stat-label')?.textContent || '';
          const value = stat.querySelector('.stat-value')?.textContent || '';
          text += `${label} ${value}\n`;
        });
        text += '\n';
      }
      
      // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
      const labels = {
        'summary-foundation': '–§—É–Ω–¥–∞–º–µ–Ω—Ç',
        'summary-blind-area': '–í—ñ–¥–º–æ—Å—Ç–∫–∞',
        'summary-stand': '–ü—ñ–¥—Å—Ç–∞–≤–∫–∞',
        'summary-tiling': '–ü–ª–∏—Ç–∫–∞',
        'summary-stele': '–°—Ç–µ–ª–∞',
        'summary-flowerbed': '–ö–≤—ñ—Ç–Ω–∏–∫',
        'summary-fence-corner': '–ö—É—Ç–æ–≤–∞ –æ–≥–æ—Ä–æ–∂–∞',
        'summary-fence-decor': '–î–µ–∫–æ—Ä –æ–≥–æ—Ä–æ–∂—ñ',
        'summary-gravestone': '–ù–∞–¥–≥—Ä–æ–±–Ω–∞ –ø–ª–∏—Ç–∞',
        'summary-lamp': '–õ–∞–º–ø–∞'
      };
      
      summaryElements.forEach(id => {
        const element = document.getElementById(id);
        if (element && element.textContent.trim() !== '--' && element.textContent.trim() !== '') {
          text += `${labels[id]}:\n${element.textContent}\n\n`;
        }
      });
      
      // Timestamp
      const timestamp = document.querySelector('.summary-timestamp span');
      if (timestamp) {
        text += `\n${timestamp.textContent}`;
      }
      
      // –ö–æ–ø—ñ—é—î–º–æ
      navigator.clipboard.writeText(text).then(() => {
        console.log('‚úÖ –ü—ñ–¥—Å—É–º–æ–∫ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –≤ clipboard');
        
        // –ü–æ–∫–∞–∑—É—î–º–æ –≤—ñ–∑—É–∞–ª—å–Ω–∏–π feedback
        const btn = document.querySelector('.copy-summary-icon-btn');
        if (btn) {
          btn.classList.add('copied');
          
          setTimeout(() => {
            btn.classList.remove('copied');
          }, 2000);
        }
      }).catch(err => {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è:', err);
        alert('–ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É');
      });
      
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—ñ:', error);
      alert('–ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –ø—ñ–¥—Å—É–º–∫—É');
    }
  }
  
  // –ï–∫—Å–ø–æ—Ä—Ç –ø—É–±–ª—ñ—á–Ω–æ–≥–æ API
  global.ProGran3.UI.SummaryTable = {
    updateSummaryTable: updateSummaryTable,
    getSummaryData: getSummaryData,
    clearSummaryTable: clearSummaryTable,
    updateDetailedSummary: updateDetailedSummary,
    refreshDetailedSummary: refreshDetailedSummary,
    copySummaryToClipboard: copySummaryToClipboard,
    generateReport: generateReport,
    showReportModal: showReportModal,
    closeReportModal: closeReportModal,
    printReport: printReport,
    exportToPDF: exportToPDF
  };
  
  // –ó–≤–æ—Ä–æ—Ç–Ω–∞ —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å - —Ñ—É–Ω–∫—Ü—ñ—ó –¥–æ—Å—Ç—É–ø–Ω—ñ –≥–ª–æ–±–∞–ª—å–Ω–æ
  global.updateSummaryTable = updateSummaryTable;
  global.updateDetailedSummary = updateDetailedSummary;
  global.refreshDetailedSummary = refreshDetailedSummary;
  
  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
  if (global.ProGran3.Core.Logger) {
    global.ProGran3.Core.Logger.debugLog('SummaryTable –º–æ–¥—É–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ', 'info', 'SummaryTable');
  }
  
})(window);
