// modules/core/ModuleLoader.js
// –°–∏—Å—Ç–µ–º–∞ –¥–∏–Ω–∞–º—ñ—á–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥—É–ª—ñ–≤ –∑ —Å–µ—Ä–≤–µ—Ä–∞

(function(global) {
  'use strict';
  
  // –°—Ç–≤–æ—Ä—é—î–º–æ namespace
  global.ProGran3 = global.ProGran3 || {};
  global.ProGran3.Core = global.ProGran3.Core || {};
  
  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
  const CACHE_PREFIX = 'ProGran3_Module_';
  const DEFAULT_CACHE_TTL = 86400000; // 24 –≥–æ–¥–∏–Ω–∏ –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö
  const LOAD_TIMEOUT = 10000; // 10 —Å–µ–∫—É–Ω–¥
  
  // –ü—Ä–∏–≤–∞—Ç–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
  let loadedModules = {};
  let loadingPromises = {};
  
  // –õ–æ–≥—É–≤–∞–Ω–Ω—è
  function logModuleLoader(message, type = 'info') {
    if (global.ProGran3.Core.Logger) {
      global.ProGran3.Core.Logger.debugLog(message, type, 'ModuleLoader');
    } else {
      console.log(`[ModuleLoader] ${message}`);
    }
  }
  
  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º–æ–¥—É–ª—å –∑ —Å–µ—Ä–≤–µ—Ä–∞ –∞–±–æ cache
   * @param {string} moduleName - –ù–∞–∑–≤–∞ –º–æ–¥—É–ª—è (e.g., 'report-generator')
   * @param {Object} options - –û–ø—Ü—ñ—ó –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
   * @param {boolean} options.forceReload - –ó–∞–≤–∂–¥–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ –∑ —Å–µ—Ä–≤–µ—Ä–∞
   * @param {boolean} options.noCache - –ù–µ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –≤ cache (–¥–ª—è security)
   * @returns {Promise<Object>} –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π –º–æ–¥—É–ª—å
   */
  async function loadModule(moduleName, options = {}) {
    logModuleLoader(`–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥—É–ª—è: ${moduleName} (noCache: ${!!options.noCache})`, 'info');
    
    // –Ø–∫—â–æ noCache - –∑–∞–≤–∂–¥–∏ –∑ —Å–µ—Ä–≤–µ—Ä–∞, –Ω–µ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏
    if (options.noCache) {
      logModuleLoader(`üîí Security mode: –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±–µ–∑ cache`, 'info');
      return await loadModuleNoCache(moduleName);
    }
    
    // –Ø–∫—â–æ –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ - –ø–æ—á–µ–∫–∞—Ç–∏
    if (loadingPromises[moduleName]) {
      logModuleLoader(`–ú–æ–¥—É–ª—å ${moduleName} –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è, –æ—á—ñ–∫—É—î–º–æ...`, 'info');
      return loadingPromises[moduleName];
    }
    
    // –Ø–∫—â–æ –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π —ñ –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω force reload
    if (loadedModules[moduleName] && !options.forceReload) {
      logModuleLoader(`–ú–æ–¥—É–ª—å ${moduleName} –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π –∑ memory`, 'info');
      return Promise.resolve(loadedModules[moduleName]);
    }
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ promise –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    const loadPromise = (async () => {
      try {
        // 1. –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ cache
        const cached = getCachedModule(moduleName);
        if (cached && !options.forceReload) {
          logModuleLoader(`–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é cached –º–æ–¥—É–ª—å: ${moduleName}`, 'info');
          const module = executeModuleCode(cached.code, moduleName);
          loadedModules[moduleName] = module;
          return module;
        }
        
        // 2. –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑ —Å–µ—Ä–≤–µ—Ä–∞
        logModuleLoader(`–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ${moduleName} –∑ —Å–µ—Ä–≤–µ—Ä–∞...`, 'info');
        const moduleData = await fetchModuleFromServer(moduleName);
        
        // 3. Verify signature
        if (!verifyModuleSignature(moduleData)) {
          throw new Error('Module signature verification failed');
        }
        
        // 4. Cache –º–æ–¥—É–ª—å
        cacheModule(moduleName, moduleData);
        
        // 5. Execute code
        const module = executeModuleCode(moduleData.code, moduleName);
        loadedModules[moduleName] = module;
        
        logModuleLoader(`–ú–æ–¥—É–ª—å ${moduleName} v${moduleData.version} –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ`, 'success');
        
        return module;
        
      } catch (error) {
        logModuleLoader(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ${moduleName}: ${error.message}`, 'error');
        
        // Fallback: —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Å—Ç–∞—Ä–∏–π cache
        const oldCached = getCachedModule(moduleName, true); // ignoreExpiry
        if (oldCached) {
          logModuleLoader(`–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–π cache —è–∫ fallback`, 'warn');
          const module = executeModuleCode(oldCached.code, moduleName);
          loadedModules[moduleName] = module;
          return module;
        }
        
        throw error;
      } finally {
        delete loadingPromises[moduleName];
      }
    })();
    
    loadingPromises[moduleName] = loadPromise;
    return loadPromise;
  }
  
  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º–æ–¥—É–ª—å –ë–ï–ó cache (–¥–ª—è security)
   * –ö–æ–¥ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è —ñ –æ–¥—Ä–∞–∑—É –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è –∑ –ø–∞–º'—è—Ç—ñ
   */
  async function loadModuleNoCache(moduleName) {
    try {
      // 1. –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑ —Å–µ—Ä–≤–µ—Ä–∞
      logModuleLoader(`üîí Secure load: ${moduleName}`, 'info');
      const moduleData = await fetchModuleFromServer(moduleName);
      
      // 2. Verify signature
      if (!verifyModuleSignature(moduleData)) {
        throw new Error('Module signature verification failed');
      }
      
      // 3. Execute (–ë–ï–ó –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ memory/cache!)
      const module = executeModuleCode(moduleData.code, moduleName);
      
      logModuleLoader(`üîí –ú–æ–¥—É–ª—å ${moduleName} –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ (temporary)`, 'success');
      
      // –ù–ï –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ loadedModules
      // –ù–ï –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage
      
      return module;
      
    } catch (error) {
      logModuleLoader(`üîí Secure load failed: ${error.message}`, 'error');
      throw error;
    }
  }
  
  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º–æ–¥—É–ª—å –∑ —Å–µ—Ä–≤–µ—Ä–∞
   */
  async function fetchModuleFromServer(moduleName) {
    const apiUrl = getApiBaseUrl();
    const url = `${apiUrl}/api/modules/${moduleName}`;
    
    logModuleLoader(`Fetching from: ${url}`, 'info');
    
    // Timeout promise
    const timeoutPromise = new Promise((_, reject) => {
      setTimeout(() => reject(new Error('Module load timeout')), LOAD_TIMEOUT);
    });
    
    // Fetch promise –∑ headers
    const fetchPromise = fetch(url, {
      method: 'GET',
      headers: {
        'X-Plugin-Version': '3.2.1',
        'X-Fingerprint-Hash': getFingerprintHash(),
        'Content-Type': 'application/json'
      }
    });
    
    // Race –º—ñ–∂ fetch —Ç–∞ timeout
    const response = await Promise.race([fetchPromise, timeoutPromise]);
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    const data = await response.json();
    
    if (!data.success) {
      throw new Error(data.error || 'Failed to load module');
    }
    
    return data.data;
  }
  
  /**
   * –û—Ç—Ä–∏–º–∞—Ç–∏ API base URL
   */
  function getApiBaseUrl() {
    // –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ config
    if (typeof window.ProGran3Config !== 'undefined') {
      return window.ProGran3Config.apiBaseUrl;
    }
    
    // Fallback –¥–æ hardcoded
    return 'https://server-hbf7li0u7-provis3ds-projects.vercel.app';
  }
  
  /**
   * –û—Ç—Ä–∏–º–∞—Ç–∏ fingerprint hash –¥–ª—è telemetry
   */
  function getFingerprintHash() {
    // –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ SketchUp bridge
    if (typeof window.sketchup !== 'undefined' && window.sketchup.get_fingerprint_hash) {
      return window.sketchup.get_fingerprint_hash();
    }
    return 'unknown';
  }
  
  /**
   * Verify module signature
   */
  function verifyModuleSignature(moduleData) {
    // TODO: Implement crypto verification
    // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏ –∑–∞—Ä–∞–∑ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å
    return moduleData.signature && moduleData.signature.length > 0;
  }
  
  /**
   * Execute module code
   */
  function executeModuleCode(code, moduleName) {
    try {
      logModuleLoader(`–í–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–¥—É –º–æ–¥—É–ª—è: ${moduleName}`, 'info');
      
      // –°—Ç–≤–æ—Ä—é—î–º–æ –±–µ–∑–ø–µ—á–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
      const moduleFunction = new Function('global', 'window', 'document', 'console', code + '; return typeof ProGran3_ReportGenerator !== "undefined" ? ProGran3_ReportGenerator : null;');
      
      // –í–∏–∫–æ–Ω—É—î–º–æ –∫–æ–¥
      const module = moduleFunction(global, window, document, console);
      
      if (!module) {
        throw new Error('Module did not export expected object');
      }
      
      logModuleLoader(`–ú–æ–¥—É–ª—å ${moduleName} –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ`, 'success');
      return module;
      
    } catch (error) {
      logModuleLoader(`–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–¥—É ${moduleName}: ${error.message}`, 'error');
      throw error;
    }
  }
  
  /**
   * Cache –º–æ–¥—É–ª—å –≤ localStorage
   */
  function cacheModule(moduleName, moduleData) {
    try {
      const cacheKey = CACHE_PREFIX + moduleName;
      const cacheData = {
        code: moduleData.code,
        version: moduleData.version,
        signature: moduleData.signature,
        cachedAt: Date.now(),
        ttl: moduleData.cache_ttl || DEFAULT_CACHE_TTL
      };
      
      localStorage.setItem(cacheKey, JSON.stringify(cacheData));
      logModuleLoader(`–ú–æ–¥—É–ª—å ${moduleName} –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ cache`, 'info');
      
    } catch (error) {
      logModuleLoader(`–ù–µ –≤–¥–∞–ª–æ—Å—è cache –º–æ–¥—É–ª—å ${moduleName}: ${error.message}`, 'warn');
    }
  }
  
  /**
   * –û—Ç—Ä–∏–º–∞—Ç–∏ –º–æ–¥—É–ª—å –∑ cache
   */
  function getCachedModule(moduleName, ignoreExpiry = false) {
    try {
      const cacheKey = CACHE_PREFIX + moduleName;
      const cachedString = localStorage.getItem(cacheKey);
      
      if (!cachedString) {
        return null;
      }
      
      const cached = JSON.parse(cachedString);
      const age = Date.now() - cached.cachedAt;
      
      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ expiry
      if (!ignoreExpiry && age > cached.ttl) {
        logModuleLoader(`Cache –¥–ª—è ${moduleName} –∑–∞—Å—Ç–∞—Ä—ñ–≤ (age: ${Math.floor(age/1000)}s)`, 'info');
        return null;
      }
      
      logModuleLoader(`–ó–Ω–∞–π–¥–µ–Ω–æ cached –º–æ–¥—É–ª—å: ${moduleName} v${cached.version}`, 'info');
      return cached;
      
    } catch (error) {
      logModuleLoader(`–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è cache –¥–ª—è ${moduleName}: ${error.message}`, 'warn');
      return null;
    }
  }
  
  /**
   * –û—á–∏—Å—Ç–∏—Ç–∏ cache –º–æ–¥—É–ª—è
   */
  function clearModuleCache(moduleName) {
    try {
      const cacheKey = CACHE_PREFIX + moduleName;
      localStorage.removeItem(cacheKey);
      delete loadedModules[moduleName];
      logModuleLoader(`Cache –¥–ª—è ${moduleName} –æ—á–∏—â–µ–Ω–æ`, 'info');
    } catch (error) {
      logModuleLoader(`–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è cache: ${error.message}`, 'warn');
    }
  }
  
  /**
   * –û—á–∏—Å—Ç–∏—Ç–∏ –≤–µ—Å—å cache –º–æ–¥—É–ª—ñ–≤
   */
  function clearAllModulesCache() {
    try {
      Object.keys(localStorage).forEach(key => {
        if (key.startsWith(CACHE_PREFIX)) {
          localStorage.removeItem(key);
        }
      });
      loadedModules = {};
      logModuleLoader('–í–µ—Å—å cache –º–æ–¥—É–ª—ñ–≤ –æ—á–∏—â–µ–Ω–æ', 'info');
    } catch (error) {
      logModuleLoader(`–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –≤—Å—å–æ–≥–æ cache: ${error.message}`, 'warn');
    }
  }
  
  /**
   * –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ cache
   */
  function getCacheInfo() {
    const modules = [];
    
    try {
      Object.keys(localStorage).forEach(key => {
        if (key.startsWith(CACHE_PREFIX)) {
          const data = JSON.parse(localStorage.getItem(key));
          const moduleName = key.replace(CACHE_PREFIX, '');
          const age = Date.now() - data.cachedAt;
          
          modules.push({
            name: moduleName,
            version: data.version,
            cachedAt: new Date(data.cachedAt).toISOString(),
            age_seconds: Math.floor(age / 1000),
            expired: age > data.ttl,
            loaded: !!loadedModules[moduleName]
          });
        }
      });
    } catch (error) {
      logModuleLoader(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è cache info: ${error.message}`, 'warn');
    }
    
    return modules;
  }
  
  // –ï–∫—Å–ø–æ—Ä—Ç –ø—É–±–ª—ñ—á–Ω–æ–≥–æ API
  global.ProGran3.Core.ModuleLoader = {
    loadModule: loadModule,
    clearModuleCache: clearModuleCache,
    clearAllModulesCache: clearAllModulesCache,
    getCacheInfo: getCacheInfo,
    version: '1.0.0'
  };
  
  logModuleLoader('ModuleLoader —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ', 'info');
  
})(window);

