// progran3/web/script.js
// –ì–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª ProGran3 - –∫–æ–æ—Ä–¥–∏–Ω—É—î –≤—Å—ñ –º–æ–¥—É–ª—ñ —Ç–∞ –º—ñ—Å—Ç–∏—Ç—å –∫—Ä–∏—Ç–∏—á–Ω—É –ª–æ–≥—ñ–∫—É

// ============================================================================
// üìã –°–¢–†–£–ö–¢–£–†–ê –§–ê–ô–õ–£
// ============================================================================
// 1. –°–ò–°–¢–ï–ú–ê –¢–ê–ë–Ü–í - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è –º—ñ–∂ —Ç–∞–±–∞–º–∏ —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
// 2. –ö–ê–†–£–°–ï–õ–¨ - CarouselManager —Ç–∞ –≤—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∫–∞—Ä—É—Å–µ–ª—ñ (–ù–ï –¢–û–†–ö–ê–¢–ò–°–Ø!)
// 3. –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø - initializeApp, loadModelLists, window.onload
// 4. DEBUG –§–£–ù–ö–¶–Ü–á - debugLog, clearDebugLog
// 5. –ü–ê–ù–ï–õ–Ü - togglePanel, advanceToNextPanel
// 6. SKETCHUP –Ü–ù–¢–ï–ì–†–ê–¶–Ü–Ø - –≤—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∑ window.sketchup (–ù–ï –¢–û–†–ö–ê–¢–ò–°–Ø!)
// 7. –£–¢–ò–õ–Ü–¢–ò - convertToMm, formatValue, getAllInputValues
// 8. UI –ö–û–ù–¢–†–û–õ–ò - selectThickness, selectTilingMode, selectSeam
// 9. –¢–ï–ú–ê - toggleTheme, initializeTheme
// 10. –ë–£–î–Ü–í–ï–õ–¨–ù–ò–ö–ò - addFoundation, addTiles, addSideCladding
// 11. –û–ì–û–†–Ü–ñ–Ü - addFenceCorner, addFencePerimeter, addFenceDecor
// 12. –ü–Ü–î–°–¢–ê–í–ö–ò - addStandWithCustomSize, updateStandsDisplay
// 13. –°–¢–ï–õ–ò - selectSteleType, updateSteleDistance, createCentralDetail
// 14. –ü–†–ï–í–¨–Æ - generateModelPreview, receiveModelPreview
// 15. –ú–ê–°–®–¢–ê–ë–£–í–ê–ù–ù–Ø - applySteleScaling, resetSteleScaling

// ============================================================================
// üîÑ –ì–õ–û–ë–ê–õ–¨–ù–Ü –ó–ú–Ü–ù–ù–Ü (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ modules/core/GlobalState.js)
// ============================================================================
// modelLists, carouselState, activeTab, addedElements, currentUnit
// –î–æ—Å—Ç—É–ø–Ω—ñ —á–µ—Ä–µ–∑: window.modelLists, window.carouselState, —Ç–æ—â–æ

// ============================================================================
// üóÇÔ∏è –°–ò–°–¢–ï–ú–ê –¢–ê–ë–Ü–í
// ============================================================================
// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è –º—ñ–∂ —Ç–∞–±–∞–º–∏ —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∫–∞—Ä—É—Å–µ–ª–µ–π

// –ü–æ—Ç–æ—á–Ω–∏–π –∞–∫—Ç–∏–≤–Ω–∏–π —Ç–∞–±
let activeTab = 'base';

// –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è —Ç–∞–±—ñ–≤
function switchTab(tabName) {
  // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –≤—Å—ñ —Ç–∞–±–∏
  const tabContents = document.querySelectorAll('.tab-content');
  tabContents.forEach(tab => {
    tab.style.display = 'none';
    tab.classList.remove('active');
  });
  
  // –í–∏–¥–∞–ª—è—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–ª–∞—Å –∑ —É—Å—ñ—Ö –∫–Ω–æ–ø–æ–∫ —Ç–∞–±—ñ–≤
  const tabButtons = document.querySelectorAll('.tab-button');
  tabButtons.forEach(button => {
    button.classList.remove('active');
  });
  
  // –ü–æ–∫–∞–∑—É—î–º–æ –≤–∏–±—Ä–∞–Ω–∏–π —Ç–∞–±
  const selectedTab = document.getElementById(tabName + '-tab');
  if (selectedTab) {
    selectedTab.style.display = 'block';
    selectedTab.classList.add('active');
  }
  
  // –ê–∫—Ç–∏–≤—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–Ω–æ–ø–∫—É
  const selectedButton = document.querySelector(`[data-tab="${tabName}"]`);
  if (selectedButton) {
    selectedButton.classList.add('active');
  }
  
  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π —Ç–∞–±
  activeTab = tabName;
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞—Ä—É—Å–µ–ª–µ–π –≤ –∞–∫—Ç–∏–≤–Ω–æ–º—É —Ç–∞–±—ñ
function updateCarouselsInActiveTab() {
  const activeTabContent = document.querySelector('.tab-content.active');
  if (activeTabContent) {
    const carousels = activeTabContent.querySelectorAll('.carousel-container');
    carousels.forEach(carousel => {
      const viewport = carousel.querySelector('.carousel-viewport');
      if (viewport) {
        // –¢—Ä–∏–≥–µ—Ä–∏–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞—Ä—É—Å–µ–ª—ñ
        viewport.style.display = 'none';
        setTimeout(() => {
          viewport.style.display = 'block';
        }, 10);
      }
    });
  }
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–∞—Ä—É—Å–µ–ª–µ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∞–±–∞
function initializeCarouselsForTab(tabName) {
  debugLog(`–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–∞—Ä—É—Å–µ–ª–µ–π –¥–ª—è —Ç–∞–±–∞: ${tabName}`, 'info');
  
  const tabCarousels = {
    'base': ['stands', 'flowerbeds'],
    'monument': ['steles'],
    'gravestone': ['gravestones'],
    'fence': ['fence_decor'],
    'view': []
  };
  
  const carousels = tabCarousels[tabName] || [];
  
  carousels.forEach(category => {
    debugLog(`–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–∞—Ä—É—Å–µ–ª—å ${category} –¥–ª—è —Ç–∞–±–∞ ${tabName}`, 'info');
    
    const trackElement = document.getElementById(`${category}-carousel-track`);
    const viewportElement = document.getElementById(`${category}-carousel-viewport`);
    
    if (trackElement && viewportElement && modelLists && modelLists[category]) {
      debugLog(`–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–∞—Ä—É—Å–µ–ª—å ${category} –¥–ª—è —Ç–∞–±–∞ ${tabName}`, 'success');
      
      if (CarouselManager && CarouselManager.initialize) {
        CarouselManager.initialize(category);
      }
    } else {
      debugLog(`–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –µ–ª–µ–º–µ–Ω—Ç–∏ –∫–∞—Ä—É—Å–µ–ª—ñ ${category} –¥–ª—è —Ç–∞–±–∞ ${tabName}`, 'error');
    }
  });
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–∞–±—ñ–≤
function initializeTabs() {
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó —Ç–∞–±—ñ–≤
  const tabsNavigation = document.querySelector('.tabs-navigation');
  if (!tabsNavigation) {
    return;
  }
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç—É —Ç–∞–±—ñ–≤
  const tabContents = document.querySelectorAll('.tab-content');
  if (tabContents.length === 0) {
    return;
  }
  
  // –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–∏—Ö–æ–≤—É—î–º–æ –≤—Å—ñ —Ç–∞–±–∏
  tabContents.forEach(tab => {
    tab.style.display = 'none';
    tab.classList.remove('active');
  });
  
  // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π —Ç–∞–± –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
  switchTab('base');
  
  // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ç–∞–±—ñ–≤
  const tabButtons = document.querySelectorAll('.tab-button');
  tabButtons.forEach(button => {
    button.addEventListener('click', function(e) {
      e.preventDefault();
      const tabName = this.getAttribute('data-tab');
      if (tabName) {
        switchTab(tabName);
      }
    });
  });
}

// Loading state management
function showLoadingState(elementId, message = '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...') {
  const element = document.getElementById(elementId);
  if (element) {
    element.disabled = true;
    element.dataset.originalText = element.textContent;
    element.innerHTML = `<span class="loading-spinner"></span> ${message}`;
  }
}

function hideLoadingState(elementId) {
  const element = document.getElementById(elementId);
  if (element) {
    element.disabled = false;
    if (element.dataset.originalText) {
      element.textContent = element.dataset.originalText;
    }
  }
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
function initializeEventHandlers() {
  // –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –ø–µ—Ä–µ–º–∏–∫–∞—á–∞ –æ–¥–∏–Ω–∏—Ü—å
  const unitLabels = document.querySelectorAll('.unit-label');
  unitLabels.forEach(label => {
    label.addEventListener('click', function() {
      const unit = this.getAttribute('data-unit');
      if (unit) {
        changeUnit(unit);
      }
    });
  });
  
  // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–µ—Ä–µ–º–∏–∫–∞—á–∞ —Ç–µ–º–∏
  const themeToggle = document.getElementById('theme-toggle');
  if (themeToggle) {
    themeToggle.addEventListener('click', toggleTheme);
  }
  
  // –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –±–ª–æ–∫—É—é—á–∏—Ö –∫–Ω–æ–ø–æ–∫
  const openPurchaseBtn = document.getElementById('open-purchase-btn');
  if (openPurchaseBtn) {
    openPurchaseBtn.addEventListener('click', openPurchasePage);
  }
  
  const retryConnectionBtn = document.getElementById('retry-connection-btn');
  if (retryConnectionBtn) {
    retryConnectionBtn.addEventListener('click', retryConnection);
  }
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è floating labels
// initializeFloatingLabels() –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ modules/ui/AccordionManager.js

// –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –¥–æ–¥–∞–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –¥–æ –º–æ–¥–µ–ª—ñ
// addedElements –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ modules/core/GlobalState.js

// –ü–æ—Ç–æ—á–Ω–∞ –æ–¥–∏–Ω–∏—Ü—è –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è
// currentUnit –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ modules/core/GlobalState.js




// ============================================================================
// üé† –ö–ê–†–£–°–ï–õ–¨ (–ö–†–ò–¢–ò–ß–ù–û –ù–ï –¢–û–†–ö–ê–¢–ò–°–Ø!)
// ============================================================================
// CarouselManager - –æ—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ –∫–∞—Ä—É—Å–µ–ª–µ–π
// –í—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∫–∞—Ä—É—Å–µ–ª—ñ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –≤ script.js —á–µ—Ä–µ–∑ —Å–∫–ª–∞–¥–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ

// –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∫–∞—Ä—É—Å–µ–ª–µ–π
const CarouselManager = {
  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ ID –µ–ª–µ–º–µ–Ω—Ç–∞ –∫–∞—Ä—É—Å–µ–ª—ñ
  getCarouselElementId(category, elementType) {
    // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è fence_decor (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –¥–µ—Ñ—ñ—Å–∏ –∑–∞–º—ñ—Å—Ç—å –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω—å)
    if (category === 'fence_decor') {
      return `fence-decor-carousel-${elementType}`;
    }
    return `${category}-carousel-${elementType}`;
  },
  
  // –†–æ–∑—à–∏—Ä–µ–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∫–∞—Ä—É—Å–µ–ª–µ–π
  carousels: {
    'stands': { 
      hasPreview: true, 
      previewMode: 'dynamic',
      autoLoad: true,
      design: 'default',
      maxItems: 10
    },
    'flowerbeds': { 
      hasPreview: true, 
      previewMode: 'dynamic',
      autoLoad: true,
      design: 'default',
      maxItems: 10
    },
    'gravestones': { 
      hasPreview: true, 
      previewMode: 'dynamic',
      autoLoad: true,
      design: 'default',
      maxItems: 10
    },
    'fence_decor': { 
      hasPreview: true, 
      previewMode: 'dynamic',
      autoLoad: true,
      design: 'default',
      maxItems: 10
    }
  },

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–∏—Ö –∫–∞—Ä—É—Å–µ–ª–µ–π
  registerCarousel(category, config = {}) {
    const defaultConfig = {
      hasPreview: true,
      previewMode: 'dynamic',
      autoLoad: true,
      design: 'default',
      maxItems: 10
    };
    
    this.carousels[category] = { ...defaultConfig, ...config };
    console.log(` –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –Ω–æ–≤—É –∫–∞—Ä—É—Å–µ–ª—å: ${category}`);
  },

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∫–∞—Ä—É—Å–µ–ª—ñ
  getCarouselConfig(category) {
    return this.carousels[category] || null;
  },

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —ñ—Å–Ω—É—î –∫–∞—Ä—É—Å–µ–ª—å
  hasCarousel(category) {
    return category in this.carousels;
  },

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –∫–∞—Ä—É—Å–µ–ª—å
  isInitialized(category) {
    return carouselState[category] && carouselState[category].initialized === true;
  },

  // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å—Ç–∞–Ω—É –∫–∞—Ä—É—Å–µ–ª—ñ
  validateState(category) {
    if (!carouselState[category]) {
      debugLog(`–°—Ç–∞–Ω –∫–∞—Ä—É—Å–µ–ª—ñ ${category} –Ω–µ —ñ—Å–Ω—É—î, —Å—Ç–≤–æ—Ä—é—î–º–æ`, 'warning');
      carouselState[category] = { index: 0, initialized: false };
      return false;
    }
    
    const state = carouselState[category];
    const models = modelLists[category];
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å —ñ–Ω–¥–µ–∫—Å—É
    if (models && models.length > 0) {
      if (state.index < 0 || state.index >= models.length) {
        debugLog(`–ù–µ–≤—ñ—Ä–Ω–∏–π —ñ–Ω–¥–µ–∫—Å ${state.index} –¥–ª—è –∫–∞—Ä—É—Å–µ–ª—ñ ${category}, —Å–∫–∏–¥–∞—î–º–æ –Ω–∞ 0`, 'warning');
        state.index = 0;
        return false;
      }
    }
    
    return true;
  },

  // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è —Å—Ç–∞–Ω—É –∫–∞—Ä—É—Å–µ–ª—ñ
  syncState(category) {
    if (!this.validateState(category)) {
      return false;
    }
    
    const state = carouselState[category];
    const track = document.getElementById(this.getCarouselElementId(category, 'track'));
    
    if (!track) {
      debugLog(`–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ track –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó —Å—Ç–∞–Ω—É –∫–∞—Ä—É—Å–µ–ª—ñ ${category}`, 'error');
      return false;
    }
    
    const items = track.querySelectorAll('.carousel-item');
    if (items.length === 0) {
      debugLog(`–ù–µ–º–∞—î –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó —Å—Ç–∞–Ω—É –∫–∞—Ä—É—Å–µ–ª—ñ ${category}`, 'error');
      return false;
    }
    
    // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç
    items.forEach((item, i) => {
      item.classList.toggle('active', i === state.index);
    });
    
    debugLog(`–°—Ç–∞–Ω –∫–∞—Ä—É—Å–µ–ª—ñ ${category} —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ`, 'success');
    return true;
  },

  // –û—á–∏—â–µ–Ω–Ω—è pending previews –¥–ª—è –∫–∞—Ä—É—Å–µ–ª—ñ
  clearPendingPreviews(category) {
    try {
      if (window.ProGran3 && window.ProGran3.Communication && window.ProGran3.Communication.SketchUpBridge) {
        // –û—á–∏—â—É—î–º–æ —á–µ—Ä–µ–∑ SketchUpBridge
        const models = modelLists[category] || [];
        models.forEach(filename => {
          const componentPath = `${category}/${filename}`;
          if (window.ProGran3.Communication.SketchUpBridge.removePendingPreview) {
            window.ProGran3.Communication.SketchUpBridge.removePendingPreview(componentPath);
          }
        });
      } else {
        // Fallback –æ—á–∏—â–µ–Ω–Ω—è
        if (window.pendingPreviews) {
          const models = modelLists[category] || [];
          models.forEach(filename => {
            const componentPath = `${category}/${filename}`;
            delete window.pendingPreviews[componentPath];
          });
        }
      }
      
      debugLog(`–û—á–∏—â–µ–Ω–æ pending previews –¥–ª—è –∫–∞—Ä—É—Å–µ–ª—ñ ${category}`, 'info');
    } catch (error) {
      debugLog(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ pending previews –¥–ª—è ${category}: ${error.message}`, 'error');
    }
  },

  // –í–∏–¥–∞–ª–µ–Ω–Ω—è event listeners
  removeEventListeners(category, viewport) {
    try {
      if (viewport && viewport._wheelHandler) {
        viewport.removeEventListener('wheel', viewport._wheelHandler);
        delete viewport._wheelHandler;
      }
    } catch (error) {
      debugLog(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ event listeners –¥–ª—è ${category}: ${error.message}`, 'error');
    }
  },

  // –î–æ–¥–∞–≤–∞–Ω–Ω—è wheel event listener –∑ debouncing
  addWheelEventListener(category, viewport) {
    try {
      let wheelTimeout;
      
      const wheelHandler = (event) => {
        event.preventDefault();
        
        // Debouncing - —ñ–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–¥—ñ—ó, —è–∫—â–æ –æ—Å—Ç–∞–Ω–Ω—è –±—É–ª–∞ –º–µ–Ω—à–µ 100ms —Ç–æ–º—É
        if (wheelTimeout) {
          return;
        }
        
        wheelTimeout = setTimeout(() => {
          wheelTimeout = null;
        }, 100);
        
        const direction = event.deltaY > 0 ? 1 : -1;
        debugLog(`üéØ –ü–æ–¥—ñ—è wheel –≤ –∫–∞—Ä—É—Å–µ–ª—ñ ${category}: direction=${direction}`, 'info');
        this.moveCarousel(category, direction);
      };
      
      viewport._wheelHandler = wheelHandler;
      viewport.addEventListener('wheel', wheelHandler, { passive: false });
    } catch (error) {
      debugLog(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ wheel event listener –¥–ª—è ${category}: ${error.message}`, 'error');
    }
  },

  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–∞—Ä—É—Å–µ–ª—ñ (—É–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∞ –ª–æ–≥—ñ–∫–∞ —è–∫ —É —Å—Ç–µ–ª)
  initialize(category, options = {}) {
    try {
      debugLog(` CarouselManager.initialize –≤–∏–∫–ª–∏–∫–∞–Ω–æ –¥–ª—è ${category}`, 'info');
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –∫–∞—Ä—É—Å–µ–ª—å (—Ç–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)
      // if (this.isInitialized(category)) {
      //   debugLog(` –ö–∞—Ä—É—Å–µ–ª—å ${category} –≤–∂–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ`, 'info');
      //   return;
      // }
      
      const track = document.getElementById(this.getCarouselElementId(category, 'track'));
      const viewport = document.getElementById(this.getCarouselElementId(category, 'viewport'));
    
    // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è fence_decor
    if (category === 'fence_decor') {
      debugLog(`üéØ –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ fence_decor –≤ initialize:`, 'info');
      debugLog(`   - track: ${!!track}`, 'info');
      debugLog(`   - viewport: ${!!viewport}`, 'info');
      debugLog(`   - trackId: ${this.getCarouselElementId(category, 'track')}`, 'info');
      debugLog(`   - viewportId: ${this.getCarouselElementId(category, 'viewport')}`, 'info');
      debugLog(`   - modelLists[category]: ${!!modelLists[category]}`, 'info');
      debugLog(`   - –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–æ–¥–µ–ª–µ–π: ${modelLists[category]?.length || 0}`, 'info');
    }
    
    if (!track || !viewport || !modelLists[category] || modelLists[category].length === 0) {
      debugLog(` –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∫–∞—Ä—É—Å–µ–ª—å ${category}: track=${!!track}, viewport=${!!viewport}, –º–æ–¥–µ–ª—ñ=${!!modelLists[category]}, –∫—ñ–ª—å–∫—ñ—Å—Ç—å=${modelLists[category]?.length || 0}`, 'error');
      return;
    }
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–∞–Ω –∫–∞—Ä—É—Å–µ–ª—ñ, —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
    if (!carouselState[category]) {
      carouselState[category] = { index: 0, initialized: false };
    }
    
    // –û—á–∏—â—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∫–æ–Ω—Ç–µ–Ω—Ç
    track.innerHTML = '';
    
    // –û—á–∏—â—É—î–º–æ pending previews
    this.clearPendingPreviews(category);
    
    // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ event listeners
    this.removeEventListeners(category, viewport);

    modelLists[category].forEach(filename => {
      const item = document.createElement('div');
      item.className = 'carousel-item';
      // –°—Ç–∞–Ω –ª–µ–¥–∞—á–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
      item.dataset.status = 'idle';
      item.dataset.filename = filename;
      // –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä
      const loadingDiv = document.createElement('div');
      loadingDiv.className = 'loading-indicator';
      loadingDiv.textContent = '–ì–æ—Ç–æ–≤–æ –¥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è';
      item.appendChild(loadingDiv);
      track.appendChild(item);
    });
    
    // –î–æ–¥–∞—î–º–æ –ø—Ä–æ–∫—Ä—É—Ç–∫—É –∫–æ–ª–µ—Å–æ–º –º–∏—à—ñ –∑ debouncing
    this.addWheelEventListener(category, viewport);

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    this.showCarouselItem(category, 0);
    this.loadOrGeneratePreview(category, 0);
    
      // –ü–æ–∑–Ω–∞—á–∞—î–º–æ —è–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—É
      carouselState[category].initialized = true;
      
      debugLog(` –ö–∞—Ä—É—Å–µ–ª—å ${category} —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞`, 'success');
    } catch (error) {
      debugLog(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∫–∞—Ä—É—Å–µ–ª—ñ ${category}: ${error.message}`, 'error');
      console.error('Carousel initialization error:', error);
    }
  },


  // –ü–æ–∫–∞–∑ –µ–ª–µ–º–µ–Ω—Ç–∞ –∫–∞—Ä—É—Å–µ–ª—ñ (—É–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∞ –ª–æ–≥—ñ–∫–∞ —è–∫ —É —Å—Ç–µ–ª)
  showCarouselItem(category, index) {
    debugLog(`üéØ showCarouselItem –≤–∏–∫–ª–∏–∫–∞–Ω–æ –¥–ª—è ${category}[${index}]`, 'info');
    
    const track = document.getElementById(this.getCarouselElementId(category, 'track'));
    const viewport = document.getElementById(this.getCarouselElementId(category, 'viewport'));
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è DOM –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
    if (!track || !viewport) {
      debugLog(` –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ DOM –µ–ª–µ–º–µ–Ω—Ç–∏ –¥–ª—è –∫–∞—Ä—É—Å–µ–ª—ñ ${category}`, 'error');
      return;
    }
    
    const items = track.querySelectorAll('.carousel-item');
    
    if (items.length === 0 || !items[index]) {
      debugLog(` –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç–∏ –¥–ª—è ${category}[${index}]`, 'error');
      return;
    }

    // –í–∞–ª—ñ–¥—É—î–º–æ —ñ–Ω–¥–µ–∫—Å
    if (index < 0 || index >= items.length) {
      debugLog(` –ù–µ–≤—ñ—Ä–Ω–∏–π —ñ–Ω–¥–µ–∫—Å ${index} –¥–ª—è –∫–∞—Ä—É—Å–µ–ª—ñ ${category} –∑ ${items.length} –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏`, 'error');
      return;
    }

    items.forEach((item, i) => {
      item.classList.toggle('active', i === index);
    });
    
    const viewportCenter = viewport.offsetWidth / 2;
    const targetItem = items[index];
    const itemCenter = targetItem.offsetLeft + targetItem.offsetWidth / 2;
    const newTransform = viewportCenter - itemCenter;

    // –í–∞–ª—ñ–¥—É—î–º–æ —Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ —Å—Ç–∞–Ω –∫–∞—Ä—É—Å–µ–ª—ñ
    this.validateState(category);
    carouselState[category].index = index;
    track.style.transform = `translateX(${newTransform}px)`;
    
    debugLog(` –ü–æ–∫–∞–∑–∞–Ω–æ –µ–ª–µ–º–µ–Ω—Ç ${index} –≤ –∫–∞—Ä—É—Å–µ–ª—ñ ${category}`, 'success');
    
    // –õ–µ–¥–∞—á–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ —Ç–∞ —Å—É—Å—ñ–¥—ñ–≤ (—è–∫ —É —Å—Ç–µ–ª)
    this.loadOrGeneratePreview(category, index);
    if (index + 1 < items.length) this.loadOrGeneratePreview(category, index + 1);
    if (index - 1 >= 0) this.loadOrGeneratePreview(category, index - 1);
    
    // updateAllDisplays() –≤–∏–¥–∞–ª–µ–Ω–æ - —Ñ—É–Ω–∫—Ü—ñ—è –Ω–µ —ñ—Å–Ω—É—î
  },

  // –õ–µ–¥–∞—á–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–µ–≤—å—é (—É–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∞ –ª–æ–≥—ñ–∫–∞ —è–∫ —É —Å—Ç–µ–ª)
  loadOrGeneratePreview(category, index) {
    debugLog(` loadOrGeneratePreview –≤–∏–∫–ª–∏–∫–∞–Ω–æ –¥–ª—è ${category}[${index}]`, 'info');
    
    const track = document.getElementById(this.getCarouselElementId(category, 'track'));
    if (!track) {
      debugLog(` –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ track –¥–ª—è ${category}`, 'error');
      return;
    }
    
    const items = track.querySelectorAll('.carousel-item');
    debugLog(`üìã –ó–Ω–∞–π–¥–µ–Ω–æ ${items.length} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –≤ –∫–∞—Ä—É—Å–µ–ª—ñ ${category}`, 'info');
    
    const item = items[index];
    if (!item) {
      debugLog(` –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –µ–ª–µ–º–µ–Ω—Ç ${index} –≤ –∫–∞—Ä—É—Å–µ–ª—ñ ${category}`, 'error');
      return;
    }

    const currentStatus = item.dataset.status;
    if (currentStatus === 'loaded' || currentStatus === 'pending') {
      debugLog(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ ${category}[${index}] - —Å—Ç–∞—Ç—É—Å: ${currentStatus}`, 'info');
      return;
    }

    const filename = item.dataset.filename || (modelLists[category] && modelLists[category][index]);
    if (!filename) {
      debugLog(` –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ filename –¥–ª—è ${category}[${index}]`, 'error');
      debugLog(` modelLists[${category}]: ${JSON.stringify(modelLists[category])}`, 'error');
      return;
    }
    
    debugLog(` –ó–Ω–∞–π–¥–µ–Ω–æ filename: ${filename} –¥–ª—è ${category}[${index}]`, 'success');

    let loadingDiv = item.querySelector('.loading-indicator');
    if (!loadingDiv) {
      loadingDiv = document.createElement('div');
      loadingDiv.className = 'loading-indicator';
      item.appendChild(loadingDiv);
      debugLog(`‚ûï –°—Ç–≤–æ—Ä–µ–Ω–æ loading indicator –¥–ª—è ${filename}`, 'info');
    }
    loadingDiv.textContent = '–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–µ–≤—å—é...';

    item.dataset.status = 'pending';
    debugLog(` –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç—É—Å 'pending' –¥–ª—è ${filename}`, 'info');

    // –í—ñ–¥—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞—î–º–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –ø—Ä–µ–≤—å—é
    this.autoGeneratePreview(category, filename, item, loadingDiv);
  },

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–µ–≤—å—é (—É–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∞ –ª–æ–≥—ñ–∫–∞ —è–∫ —É —Å—Ç–µ–ª)
  autoGeneratePreview(category, filename, item, loadingDiv) {
    debugLog(` autoGeneratePreview –≤–∏–∫–ª–∏–∫–∞–Ω–æ –¥–ª—è ${category}/${filename}`, 'info');
    
    if (!window.sketchup) {
      debugLog(` window.sketchup –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è ${filename}`, 'error');
      createPlaceholder(item, loadingDiv, `–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó\n${filename}`);
      return;
    }
    
    const componentPath = `${category}/${filename}`;
    debugLog(` –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–µ–≤—å—é –¥–ª—è: ${componentPath} (CarouselManager)`, 'info');
    
    // –ì–µ–Ω–µ—Ä—É—î–º–æ –≤–µ–±-–ø—Ä–µ–≤—å—é —á–µ—Ä–µ–∑ SketchUp
    window.sketchup.generate_web_preview(componentPath);
    debugLog(`üì° –í–∏–∫–ª–∏–∫–∞–Ω–æ window.sketchup.generate_web_preview(${componentPath})`, 'info');
    
  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –µ–ª–µ–º–µ–Ω—Ç–∏ –¥–ª—è callback —á–µ—Ä–µ–∑ SketchUpBridge
  if (window.ProGran3 && window.ProGran3.Communication && window.ProGran3.Communication.SketchUpBridge) {
    debugLog(` –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ SketchUpBridge –¥–ª—è pending: ${componentPath}`, 'success');
    window.ProGran3.Communication.SketchUpBridge.addPendingPreview(componentPath, filename, 'CarouselManager', item, loadingDiv);
  } else {
    debugLog(` –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fallback –¥–ª—è pending: ${componentPath}`, 'warning');
    // Fallback –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
    window.pendingPreviews = window.pendingPreviews || {};
    window.pendingPreviews[componentPath] = { item, loadingDiv, filename, source: 'CarouselManager' };
  }
    
    debugLog(`üìù –î–æ–¥–∞–Ω–æ –¥–æ pending: ${componentPath} (CarouselManager)`, 'info');
  },



  // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≥–ª—É—à–∫–∏
  createPlaceholder(item, loadingDiv, text) {
    createPlaceholder(item, loadingDiv, text);
  },

  // –†—É—Ö –∫–∞—Ä—É—Å–µ–ª—ñ (—É–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∞ –ª–æ–≥—ñ–∫–∞ —è–∫ —É —Å—Ç–µ–ª)
  moveCarousel(category, direction) {
    debugLog(` moveCarousel –≤–∏–∫–ª–∏–∫–∞–Ω–æ –¥–ª—è ${category}, direction=${direction}`, 'info');
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –∫–∞—Ä—É—Å–µ–ª—å
    if (!this.isInitialized(category)) {
      debugLog(` –ö–∞—Ä—É—Å–µ–ª—å ${category} –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ moveCarousel`, 'warning');
      return;
    }
    
    // –í–∞–ª—ñ–¥—É—î–º–æ —Å—Ç–∞–Ω –∫–∞—Ä—É—Å–µ–ª—ñ
    this.validateState(category);
    
    const state = carouselState[category];
    const newIndex = state.index + direction;
    const track = document.getElementById(this.getCarouselElementId(category, 'track'));
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è track
    if (!track) {
      debugLog(` –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ track –¥–ª—è –∫–∞—Ä—É—Å–µ–ª—ñ ${category}`, 'error');
      return;
    }
    
    const items = track.querySelectorAll('.carousel-item');
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –µ–ª–µ–º–µ–Ω—Ç–∏
    if (items.length === 0) {
      debugLog(` –ù–µ–º–∞—î –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –≤ –∫–∞—Ä—É—Å–µ–ª—ñ ${category}`, 'error');
      return;
    }
    
    debugLog(`   - –ü–æ—Ç–æ—á–Ω–∏–π —ñ–Ω–¥–µ–∫—Å: ${state.index}`, 'info');
    debugLog(`   - –ù–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å: ${newIndex}`, 'info');
    debugLog(`   - –í—Å—å–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤: ${items.length}`, 'info');
    
    // –¶–∏–∫–ª—ñ—á–Ω–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∞: —è–∫—â–æ –≤–∏—Ö–æ–¥–∏–º–æ –∑–∞ –º–µ–∂—ñ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω–∏–π –∫—ñ–Ω–µ—Ü—å
    let finalIndex = newIndex;
    if (newIndex < 0) {
      finalIndex = items.length - 1; // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç
    } else if (newIndex >= items.length) {
      finalIndex = 0; // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç
    }
    
    debugLog(`   - –§—ñ–Ω–∞–ª—å–Ω–∏–π —ñ–Ω–¥–µ–∫—Å: ${finalIndex}`, 'info');
    this.showCarouselItem(category, finalIndex);
  },

  // –î–æ–¥–∞–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ
  addModel(category) {
    // –í–∞–ª—ñ–¥—É—î–º–æ —Å—Ç–∞–Ω –∫–∞—Ä—É—Å–µ–ª—ñ
    this.validateState(category);
    const state = carouselState[category];
    const filename = modelLists[category][state.index];
    
    if (window.sketchup && window.sketchup.add_model) {
      // –î–ª—è —Å—Ç–µ–ª –ø–µ—Ä–µ–¥–∞—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ç–∏–ø—É, –≤—ñ–¥—Å—Ç–∞–Ω—ñ —Ç–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ—ó –¥–µ—Ç–∞–ª—ñ
      if (category === 'steles') {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î —Å—Ç–∞–Ω —Å—Ç–µ–ª
        if (!carouselState.steles) {
          debugLog('–ü–û–ú–ò–õ–ö–ê: carouselState.steles –Ω–µ —ñ—Å–Ω—É—î!', 'error');
          carouselState.steles = { type: 'single', distance: 200, centralDetail: false };
        }
        const steleType = carouselState.steles.type || 'single'; // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 'single'
        const steleDistance = carouselState.steles.distance || 200; // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 200–º–º
        const centralDetail = carouselState.steles.centralDetail || false; // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º false
        const centralDetailWidth = carouselState.steles.centralDetailWidth || 200; // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 200–º–º
        const centralDetailDepth = carouselState.steles.centralDetailDepth || 50; // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 50–º–º
        const centralDetailHeight = carouselState.steles.centralDetailHeight || 250; // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 250–º–º
        
        debugLog(`–î–æ–¥–∞–≤–∞–Ω–Ω—è —Å—Ç–µ–ª–∏: —Ç–∏–ø=${steleType} (${typeof steleType}), –≤—ñ–¥—Å—Ç–∞–Ω—å=${steleDistance}–º–º, —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ –¥–µ—Ç–∞–ª—å=${centralDetail}`, 'info');
        debugLog(`–ü–æ–≤–Ω–∏–π —Å—Ç–∞–Ω —Å—Ç–µ–ª: ${JSON.stringify(carouselState.steles)}`, 'info');
        
        window.sketchup.add_model(category, filename, steleType, steleDistance, centralDetail, centralDetailWidth, centralDetailDepth, centralDetailHeight);
        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ñ–ª–∞–≥, —â–æ –º–æ–¥–µ–ª—å —Å—Ç–≤–æ—Ä–µ–Ω–∞
        carouselState.steles.modelCreated = true;
        debugLog(`–î–æ–¥–∞–≤–∞–Ω–Ω—è —Å—Ç–µ–ª —Ç–∏–ø—É: ${steleType}, –≤—ñ–¥—Å—Ç–∞–Ω—å: ${steleDistance}–º–º, —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ –¥–µ—Ç–∞–ª—å: ${centralDetail}. –§–ª–∞–≥ modelCreated –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ true`, 'info');
        
        // –ó–≥–æ—Ä—Ç–∞—î–º–æ —Å–µ–∫—Ü—ñ—é 2 (–í–∏–±—ñ—Ä –º–æ–¥–µ–ª—ñ) –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Å—Ç–µ–ª–∏
        this.collapseSteleModelSection();
        
        // –ü–æ–∫–∞–∑—É—î–º–æ —Å–µ–∫—Ü—ñ—é –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è —Å—Ç–µ–ª–∏ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –æ–¥–Ω—ñ—î—ó —Å—Ç–µ–ª–∏
        if (steleType === 'single') {
          setTimeout(() => {
            showSteleScalingSection();
          }, 500); // –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Å—Ç–µ–ª–∏
        }
      } else {
        window.sketchup.add_model(category, filename);
      }
      addedElements[category] = true;
      updateSummaryTable();
    }
  },

  // –ó–≥–æ—Ä—Ç–∞–Ω–Ω—è —Å–µ–∫—Ü—ñ—ó –≤–∏–±–æ—Ä—É –º–æ–¥–µ–ª—ñ —Å—Ç–µ–ª–∏
  collapseSteleModelSection() {
    try {
      const modelSection = document.querySelector('#stele-model-section');
      if (modelSection) {
        modelSection.classList.add('collapsed');
        debugLog('–°–µ–∫—Ü—ñ—è –≤–∏–±–æ—Ä—É –º–æ–¥–µ–ª—ñ —Å—Ç–µ–ª–∏ –∑–≥–æ—Ä–Ω—É—Ç–∞', 'success');
      } else {
        debugLog('–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–µ–∫—Ü—ñ—é –≤–∏–±–æ—Ä—É –º–æ–¥–µ–ª—ñ —Å—Ç–µ–ª–∏', 'warning');
      }
    } catch (error) {
      debugLog(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≥–æ—Ä—Ç–∞–Ω–Ω—ñ —Å–µ–∫—Ü—ñ—ó –≤–∏–±–æ—Ä—É –º–æ–¥–µ–ª—ñ —Å—Ç–µ–ª–∏: ${error.message}`, 'error');
    }
  },

  // –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ—ó –∫–∞—Ä—É—Å–µ–ª—ñ (–æ–Ω–æ–≤–ª–µ–Ω–∞)
  registerCarousel(category, config = {}) {
    const defaultConfig = {
      hasPreview: true,
      previewMode: 'dynamic',
      autoLoad: true,
      design: 'default',
      maxItems: 10
    };
    
    this.carousels[category] = { ...defaultConfig, ...config };
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–∞–Ω –∫–∞—Ä—É—Å–µ–ª—ñ
    if (!carouselState[category]) {
      carouselState[category] = { index: 0 };
    }
    
    console.log(` –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –Ω–æ–≤—É –∫–∞—Ä—É—Å–µ–ª—å: ${category}`);
  },

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—Å—ñ—Ö –∫–∞—Ä—É—Å–µ–ª–µ–π
  initializeAllCarousels() {
    debugLog(` initializeAllCarousels –≤–∏–∫–ª–∏–∫–∞–Ω–æ`, 'info');
    debugLog(`üìã –î–æ—Å—Ç—É–ø–Ω—ñ –∫–∞—Ä—É—Å–µ–ª—ñ: ${Object.keys(this.carousels).join(', ')}`, 'info');
    
    // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è gravestones
    if (this.carousels.gravestones) {
      debugLog(` –ö–∞—Ä—É—Å–µ–ª—å gravestones –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó`, 'success');
    } else {
      debugLog(` –ö–∞—Ä—É—Å–µ–ª—å gravestones –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó`, 'error');
    }
    
    
    Object.keys(this.carousels).forEach(category => {
      debugLog(` –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–∞—Ä—É—Å–µ–ª—å: ${category}`, 'info');
      
      const trackElement = document.getElementById(this.getCarouselElementId(category, 'track'));
      const viewportElement = document.getElementById(this.getCarouselElementId(category, 'viewport'));
      
      debugLog(` –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–∞—Ä—É—Å–µ–ª—ñ ${category}: –º–æ–¥–µ–ª—ñ=${!!modelLists[category]}, –∫—ñ–ª—å–∫—ñ—Å—Ç—å=${modelLists[category]?.length || 0}, track=${!!trackElement}, viewport=${!!viewportElement}`, 'info');
      
      // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è gravestones
      if (category === 'gravestones') {
        debugLog(`üéØ –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è gravestones:`, 'info');
        debugLog(`   - trackElement: ${!!trackElement}`, 'info');
        debugLog(`   - viewportElement: ${!!viewportElement}`, 'info');
        debugLog(`   - modelLists[gravestones]: ${!!modelLists[category]}`, 'info');
        debugLog(`   - –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–æ–¥–µ–ª–µ–π: ${modelLists[category]?.length || 0}`, 'info');
        if (modelLists[category]) {
          debugLog(`   - –º–æ–¥–µ–ª—ñ: ${modelLists[category].join(', ')}`, 'info');
        }
      }
      
      
      if (modelLists[category] && trackElement && viewportElement) {
        debugLog(` –£–º–æ–≤–∏ –≤–∏–∫–æ–Ω–∞–Ω—ñ –¥–ª—è ${category}, –∑–∞–ø—É—Å–∫–∞—î–º–æ initialize`, 'success');
        this.initialize(category);
        debugLog(` –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –∫–∞—Ä—É—Å–µ–ª—å: ${category}`, 'success');
      } else {
        debugLog(` –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∫–∞—Ä—É—Å–µ–ª—å: ${category}`, 'error');
        debugLog(` –î–µ—Ç–∞–ª—ñ –¥–ª—è ${category}: –º–æ–¥–µ–ª—ñ=${!!modelLists[category]}, track=${!!trackElement}, viewport=${!!viewportElement}`, 'error');
      }
    });
  },

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞—Ä—É—Å–µ–ª–µ–π
  getCarouselStats() {
    return {
      total: Object.keys(this.carousels).length,
      active: Object.keys(this.carousels).filter(cat => 
        modelLists[cat] && document.getElementById(`${cat}-carousel-track`)
      ).length,
      categories: Object.keys(this.carousels)
    };
  },

  // –ü—Ä–∏–∫–ª–∞–¥ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –∫–∞—Ä—É—Å–µ–ª—ñ
  addExampleCarousel() {
    // –î–æ–¥–∞—î–º–æ –Ω–æ–≤—É –∫–∞—Ä—É—Å–µ–ª—å –∑ –∫–∞—Å—Ç–æ–º–Ω–∏–º –¥–∏–∑–∞–π–Ω–æ–º
    this.registerCarousel('example', {
      hasPreview: true,
      previewMode: 'dynamic',
      autoLoad: true,
      design: 'gradient',
      maxItems: 15
    });
    
    console.log('üìù –ü—Ä–∏–∫–ª–∞–¥: –î–æ–¥–∞–Ω–æ –Ω–æ–≤—É –∫–∞—Ä—É—Å–µ–ª—å "example" –∑ –¥–∏–∑–∞–π–Ω–æ–º gradient');
  }
};

// ============================================================================
// üêõ DEBUG –§–£–ù–ö–¶–Ü–á
// ============================================================================
// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è —Ç–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏

/**
 * –î–æ–¥–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ debug –ª–æ–≥—É –∑ –∫–æ–ª—å–æ—Ä–æ–≤–∏–º —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º
 * @param {string} message - –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
 * @param {string} type - –¢–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: 'info', 'success', 'warning', 'error'
 * @example
 * debugLog('–§—É–Ω–¥–∞–º–µ–Ω—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ', 'success');
 * debugLog('–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó', 'error');
 */
// DebugManager –≤–∏–Ω–µ—Å–µ–Ω–æ –≤ modules/core/DebugManager.js

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—Ä–∏–º—É—Å–æ–≤–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞—Ä—É—Å–µ–ª—ñ
function forceRefreshCarousel() {
  debugLog('üîÑ –ü—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞—Ä—É—Å–µ–ª—ñ', 'info');
  
  // –û—á–∏—â—É—î–º–æ –∫–µ—à –º–æ–¥–µ–ª–µ–π
  if (typeof modelLists !== 'undefined') {
    modelLists = {};
  }
  
  // –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω –∫–∞—Ä—É—Å–µ–ª—ñ
  if (typeof carouselState !== 'undefined') {
    carouselState = {};
  }
  
  // –û—á–∏—â—É—î–º–æ localStorage
  localStorage.removeItem('progran3_models');
  localStorage.removeItem('progran3_carousel');
  
  // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É
  location.reload();
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
function refreshCategory(category) {
  debugLog(`üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: ${category}`, 'info');
  
  // –û—á–∏—â—É—î–º–æ track
  const track = document.getElementById(`${category}-carousel-track`);
  if (track) {
    track.innerHTML = '';
  }
  
  // –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –∫–∞—Ä—É—Å–µ–ª—ñ
  if (carouselState && carouselState[category]) {
    carouselState[category] = { index: 0, initialized: false };
  }
  
  // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–∞—Ä—É—Å–µ–ª—å
  if (CarouselManager && CarouselManager.initialize) {
    CarouselManager.initialize(category);
  }
}

// --- –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø ---
window.onload = async function () {
  debugLog(` window.onload –≤–∏–∫–ª–∏–∫–∞–Ω–æ`, 'info');
  
  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ i18n –ø–µ—Ä—à–∏–º
  debugLog(`üåç –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ i18n`, 'info');
  await initializeI18n();
  
  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –¥–æ–¥–∞—Ç–æ–∫
  debugLog(` –í–∏–∫–ª–∏–∫–∞—î–º–æ initializeApp()`, 'info');
  initializeApp();
  
  // –ó–∞–ø—É—Å–∫–∞—î–º–æ –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å
  if (window.sketchup && window.sketchup.ready) {
    debugLog(`üìû –í–∏–∫–ª–∏–∫–∞—î–º–æ window.sketchup.ready() –¥–ª—è –∑–∞–ø—É—Å–∫—É heartbeat`, 'info');
    window.sketchup.ready();
    debugLog(`‚úÖ Callback ready –≤–∏–∫–ª–∏–∫–∞–Ω–æ - heartbeat –º–∞—î –∑–∞–ø—É—Å—Ç–∏—Ç–∏—Å—è`, 'success');
  } else {
    debugLog(` window.sketchup.ready –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π`, 'error');
  }
  
  // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –ª—ñ—Ü–µ–Ω–∑—ñ—ó
  debugLog(`üîê –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –ª—ñ—Ü–µ–Ω–∑—ñ—ó`, 'info');
  updateLicenseStatus();
};

// ============================================================================
// üöÄ –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø
// ============================================================================
// –§—É–Ω–∫—Ü—ñ—ó —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –¥–æ–¥–∞—Ç–∫—É —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–æ–¥–∞—Ç–∫—É
function initializeApp() {
  debugLog(` initializeApp –≤–∏–∫–ª–∏–∫–∞–Ω–æ`, 'info');
  
  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
  initializeEventHandlers();
  
  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–∞–±—ñ–≤
  initializeTabs();
  
  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–∫–æ—Ä–¥–µ–æ–Ω –ø–æ–≤–µ–¥—ñ–Ω–∫–∏ –¥–ª—è –≤—Å—ñ—Ö —Ç–∞–±—ñ–≤
  initializeAccordionBehavior();
  
  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–µ–≤—å—é —Ç–∞–±—É
  initializePreviewTab();
  
  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è UI (–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É ready)
  if(document.querySelector('.tiling-mode-btn')) {
    debugLog(` –ó–Ω–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–∫–∏ —Å–ø–æ—Å–æ–±—É —É–∫–ª–∞–¥–∞–Ω–Ω—è, –æ–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏`, 'success');
    updateTilingControls();
  } else {
    debugLog(` –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–∫–∏ —Å–ø–æ—Å–æ–±—É —É–∫–ª–∞–¥–∞–Ω–Ω—è`, 'error');
  }
  
  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ–Ω—Ç—Ä–æ–ª—ñ–≤ –≤—ñ–¥–º–æ—Å—Ç–∫–∏
  if(document.getElementById('blind-area-mode')) {
    debugLog(` –ó–Ω–∞–π–¥–µ–Ω–æ blind-area-mode, –æ–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏`, 'success');
    updateBlindAreaControls();
  } else {
    debugLog(` –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ blind-area-mode`, 'error');
  }
  
  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–ª—ñ–≤ –ø–ª–∏—Ç–∫–∏
  debugLog(` –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–ª—ñ–≤ –ø–ª–∏—Ç–∫–∏...`, 'info');
  const tileBorderWidth = document.getElementById('tile-border-width');
  const tileOverhang = document.getElementById('tile-overhang');
  const modularThickness = document.getElementById('modular-thickness');
  const modularOverhang = document.getElementById('modular-overhang');
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–Ω–æ–ø–∫–∏ —Ç–æ–≤—â–∏–Ω–∏
  const thicknessButtons = document.querySelectorAll('.thickness-btn');
  if (thicknessButtons.length > 0) {
    debugLog(` –ó–Ω–∞–π–¥–µ–Ω–æ ${thicknessButtons.length} –∫–Ω–æ–ø–æ–∫ —Ç–æ–≤—â–∏–Ω–∏ –ø–ª–∏—Ç–∫–∏`, 'success');
    updateThicknessButtons(); // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ —Ç–æ–≤—â–∏–Ω–∏
    const activeThickness = getSelectedThickness();
    debugLog(` –ê–∫—Ç–∏–≤–Ω–∞ —Ç–æ–≤—â–∏–Ω–∞: ${activeThickness}`, 'success');
  } else {
    debugLog(` –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–∫–∏ —Ç–æ–≤—â–∏–Ω–∏ –ø–ª–∏—Ç–∫–∏`, 'error');
  }
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–Ω–æ–ø–∫–∏ —à–≤—É
  const seamButtons = document.querySelectorAll('.seam-btn');
  if (seamButtons.length > 0) {
    debugLog(` –ó–Ω–∞–π–¥–µ–Ω–æ ${seamButtons.length} –∫–Ω–æ–ø–æ–∫ —à–≤—É`, 'success');
    updateSeamButtons(); // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ —à–≤—É
    const activeSeam = getSelectedSeam();
    debugLog(` –ê–∫—Ç–∏–≤–Ω–∏–π —à–æ–≤: ${activeSeam} –º–º`, 'success');
  } else {
    debugLog(` –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–∫–∏ —à–≤—É`, 'error');
  }
  
  if (tileBorderWidth) {
    debugLog(` –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ —à–∏—Ä–∏–Ω–∏ —Ä–∞–º–∫–∏: ${tileBorderWidth.value}`, 'success');
  } else {
    debugLog(` –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ —à–∏—Ä–∏–Ω–∏ —Ä–∞–º–∫–∏`, 'error');
  }
  
  if (tileOverhang) {
    debugLog(` –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –≤–∏—Å—Ç—É–ø—É: ${tileOverhang.value}`, 'success');
  } else {
    debugLog(` –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –≤–∏—Å—Ç—É–ø—É`, 'error');
  }
  
  if (modularThickness) {
    debugLog(` –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ —Ç–æ–≤—â–∏–Ω–∏ –º–æ–¥—É–ª—å–Ω–æ—ó: ${modularThickness.value}`, 'success');
  } else {
    debugLog(` –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ —Ç–æ–≤—â–∏–Ω–∏ –º–æ–¥—É–ª—å–Ω–æ—ó`, 'error');
  }
  
  if (modularOverhang) {
    debugLog(` –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –≤–∏—Å—Ç—É–ø—É –º–æ–¥—É–ª—å–Ω–æ—ó: ${modularOverhang.value}`, 'success');
  } else {
    debugLog(` –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –≤–∏—Å—Ç—É–ø—É –º–æ–¥—É–ª—å–Ω–æ—ó`, 'error');
  }
  
  // –ó–≥–æ—Ä—Ç–∞—î–º–æ –≤—Å—ñ –ø–∞–Ω–µ–ª—ñ –≤ –∫–æ–∂–Ω–æ–º—É —Ç–∞–±—ñ, –∫—Ä—ñ–º –ø–µ—Ä—à–æ—ó
  const tabContents = document.querySelectorAll('.tab-content');
  debugLog(`üìã –ó–Ω–∞–π–¥–µ–Ω–æ ${tabContents.length} —Ç–∞–±—ñ–≤`, 'info');
  
  tabContents.forEach(tabContent => {
    const panels = tabContent.querySelectorAll('.panel');
    debugLog(`üìã –ó–Ω–∞–π–¥–µ–Ω–æ ${panels.length} –ø–∞–Ω–µ–ª–µ–π –≤ —Ç–∞–±—ñ ${tabContent.id}`, 'info');
    
    panels.forEach((panel, index) => {
      if (index > 0) {
        panel.classList.add('collapsed');
      }
    });
  });
  
  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ floating labels
  initializeFloatingLabels();
  debugLog(` Floating labels —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ`, 'success');
  
  debugLog(` –í–∏–∫–ª–∏–∫–∞—î–º–æ updateAllDisplays()`, 'info');
  // updateAllDisplays() –≤–∏–¥–∞–ª–µ–Ω–æ - —Ñ—É–Ω–∫—Ü—ñ—è –Ω–µ —ñ—Å–Ω—É—î
  // updateAllI18nLabels() –≤–∏–¥–∞–ª–µ–Ω–æ - —Ñ—É–Ω–∫—Ü—ñ—è –Ω–µ —ñ—Å–Ω—É—î
  // updateUnitLabels() –≤–∏–¥–∞–ª–µ–Ω–æ - —Ñ—É–Ω–∫—Ü—ñ—è –Ω–µ —ñ—Å–Ω—É—î
  updateThicknessButtons();
  updateSeamButtons();
  
  
  
  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ç–µ–º—É
  initializeTheme();
  debugLog(` –¢–µ–º–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞`, 'success');
  
  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ç–∏–ø —Å—Ç–µ–ª
  initializeSteleType();
  debugLog(` –¢–∏–ø —Å—Ç–µ–ª —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ`, 'success');
  
  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –≤–º–∏–∫–∞—á –ø—Ä–æ–º—ñ–∂–∫—ñ–≤
  initializeStandsGaps();
  debugLog(` –í–º–∏–∫–∞—á –ø—Ä–æ–º—ñ–∂–∫—ñ–≤ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ`, 'success');
  
  debugLog(` initializeApp –∑–∞–≤–µ—Ä—à–µ–Ω–æ`, 'success');
}

function loadModelLists(data) {
  debugLog(`üì• loadModelLists –≤–∏–∫–ª–∏–∫–∞–Ω–æ`, 'info');
  debugLog(`üìä –û—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π: ${Object.keys(data).join(', ')}`, 'info');
  
  // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è gravestones
  if (data.gravestones) {
    debugLog(` –ö–∞—Ç–µ–≥–æ—Ä—ñ—è gravestones –∑–Ω–∞–π–¥–µ–Ω–∞ –∑ ${data.gravestones.length} –º–æ–¥–µ–ª—è–º–∏`, 'success');
    debugLog(`üìã –ú–æ–¥–µ–ª—ñ gravestones: ${data.gravestones.join(', ')}`, 'info');
  } else {
    debugLog(` –ö–∞—Ç–µ–≥–æ—Ä—ñ—è gravestones –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∞–Ω–∏—Ö`, 'error');
  }
  
  
  modelLists = data;
  
  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –≤—Å—ñ—Ö –∫–∞—Ä—É—Å–µ–ª–µ–π
  debugLog(` –í–∏–∫–ª–∏–∫–∞—î–º–æ CarouselManager.initializeAllCarousels()`, 'info');
  CarouselManager.initializeAllCarousels();
  
  // –î–æ–¥–∞—Ç–∫–æ–≤–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–∞—Ä—É—Å–µ–ª—ñ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–±–∞
  setTimeout(() => {
    initializeCarouselsForTab(activeTab);
  }, 200);
  
  // –ü—Ä–∏–º—É—Å–æ–≤–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–∞—Ä—É—Å–µ–ª—å gravestones
  setTimeout(() => {
    debugLog(`üé† –ü—Ä–∏–º—É—Å–æ–≤–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–∞—Ä—É—Å–µ–ª—ñ gravestones`, 'info');
    if (CarouselManager.hasCarousel('gravestones') && modelLists['gravestones']) {
      const trackElement = document.getElementById('gravestones-carousel-track');
      const viewportElement = document.getElementById('gravestones-carousel-viewport');
      
      if (trackElement && viewportElement) {
        debugLog(` –ü—Ä–∏–º—É—Å–æ–≤–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–∞—Ä—É—Å–µ–ª—å gravestones`, 'success');
        initializeGravestonesCarousel('gravestones');
      } else {
        debugLog(` –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –µ–ª–µ–º–µ–Ω—Ç–∏ –∫–∞—Ä—É—Å–µ–ª—ñ gravestones –¥–ª—è –ø—Ä–∏–º—É—Å–æ–≤–æ—ó —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó`, 'error');
      }
    } else {
      debugLog(` –ö–∞—Ä—É—Å–µ–ª—å gravestones –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –∞–±–æ –Ω–µ–º–∞—î –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø—Ä–∏–º—É—Å–æ–≤–æ—ó —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó`, 'warning');
    }
  }, 500);
  
  
  
  
  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—É –∫–∞—Ä—É—Å–µ–ª—å —Å—Ç–µ–ª (–∫–æ–ø—ñ—è —Ç–µ—Å—Ç–æ–≤–æ—ó –ª–æ–≥—ñ–∫–∏)
  if (modelLists['steles'] && document.getElementById('steles-carousel-track')) {
    debugLog(`üèõÔ∏è –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—É –∫–∞—Ä—É—Å–µ–ª—å —Å—Ç–µ–ª (–∫–æ–ø—ñ—è —Ç–µ—Å—Ç–æ–≤–æ—ó)`, 'info');
    initializeMainStelesCarousel('steles');
  }
  
  // –ü—Ä–∏–º—É—Å–æ–≤–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–∞—Ä—É—Å–µ–ª—å fence_decor
  if (modelLists['fence_decor'] && document.getElementById('fence-decor-carousel-track')) {
    debugLog(`üé† –ü—Ä–∏–º—É—Å–æ–≤–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–∞—Ä—É—Å–µ–ª—å fence_decor`, 'info');
    CarouselManager.initialize('fence_decor');
  }
  
  // –í–∏–≤–æ–¥–∏–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞—Ä—É—Å–µ–ª–µ–π
  const stats = CarouselManager.getCarouselStats();
  debugLog(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ä—É—Å–µ–ª–µ–π: ${stats.active}/${stats.total} –∞–∫—Ç–∏–≤–Ω–∏—Ö`, 'info');
  
  // updateAllDisplays() –≤–∏–¥–∞–ª–µ–Ω–æ - —Ñ—É–Ω–∫—Ü—ñ—è –Ω–µ —ñ—Å–Ω—É—î
}

// ============================================================================
// üìã –ü–ê–ù–ï–õ–Ü
// ============================================================================
// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ø–∞–Ω–µ–ª—è–º–∏ (–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è/—Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è)

function togglePanel(headerElement) {
  const panel = headerElement.closest('.panel');
  if (panel) {
    console.log('Toggle panel:', panel);
    const wasCollapsed = panel.classList.contains('collapsed');
    panel.classList.toggle('collapsed');
    console.log('Panel collapsed:', panel.classList.contains('collapsed'));
    
    // –Ø–∫—â–æ –ø–∞–Ω–µ–ª—å –±—É–ª–∞ —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–∞, —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–∞—Ä—É—Å–µ–ª—ñ –≤ –Ω—ñ–π
    if (wasCollapsed) {
      setTimeout(() => {
        const carousels = panel.querySelectorAll('.carousel-container');
        carousels.forEach(carousel => {
          const viewport = carousel.querySelector('.carousel-viewport');
          if (viewport) {
            // –¢—Ä–∏–≥–µ—Ä–∏–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞—Ä—É—Å–µ–ª—ñ
            viewport.style.display = 'none';
            setTimeout(() => {
              viewport.style.display = 'block';
            }, 10);
          }
        });
        
        // –î–æ–¥–∞—Ç–∫–æ–≤–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–∞—Ä—É—Å–µ–ª—ñ –≤ —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç—ñ–π –ø–∞–Ω–µ–ª—ñ
        const carouselTracks = panel.querySelectorAll('.carousel-track');
        carouselTracks.forEach(track => {
          const category = track.id.replace('-carousel-track', '');
          if (CarouselManager.hasCarousel(category) && modelLists[category]) {
            debugLog(`üé† –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–∞—Ä—É—Å–µ–ª—å ${category} –≤ —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç—ñ–π –ø–∞–Ω–µ–ª—ñ`, 'info');
            CarouselManager.initialize(category);
          }
        });
        
        // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è –∫–∞—Ä—É—Å–µ–ª—ñ gravestones
        const gravestoneTrack = panel.querySelector('#gravestones-carousel-track');
        if (gravestoneTrack && CarouselManager.hasCarousel('gravestones') && modelLists['gravestones']) {
          debugLog(`üé† –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–∞—Ä—É—Å–µ–ª—ñ gravestones –≤ —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç—ñ–π –ø–∞–Ω–µ–ª—ñ`, 'info');
          initializeGravestonesCarousel('gravestones');
        }
      }, 100);
    }
  } else {
    console.error('Panel not found for element:', headerElement);
  }
}

function advanceToNextPanel(buttonElement) {
  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–æ–¥—É–ª—å Panels —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π
  if (window.ProGran3 && window.ProGran3.UI && window.ProGran3.UI.Panels) {
    const result = window.ProGran3.UI.Panels.advanceToNextPanel(buttonElement);
    if (result) {
      debugLog(` advanceToNextPanel –≤–∏–∫–æ–Ω–∞–Ω–æ —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å Panels`, 'success');
    } else {
      debugLog(` advanceToNextPanel –Ω–µ –≤–¥–∞–≤—Å—è —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å Panels`, 'warning');
    }
    return;
  }
  
  // Fallback –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
  // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫—É –ø–∞–Ω–µ–ª—å –∫–Ω–æ–ø–∫–∏
  const currentPanel = buttonElement.closest('.panel');
  
  // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –ø–∞–Ω–µ–ª—ñ –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É –∞–∫—Ç–∏–≤–Ω–æ–º—É —Ç–∞–±—ñ
  const activeTabContent = document.querySelector('.tab-content.active');
  if (!activeTabContent) {
    debugLog(` –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–∏–π —Ç–∞–± –¥–ª—è advanceToNextPanel`, 'error');
    return;
  }
  
  const allPanelsInTab = Array.from(activeTabContent.querySelectorAll('.panel'));
  const currentIndex = allPanelsInTab.indexOf(currentPanel);
  const nextPanel = allPanelsInTab[currentIndex + 1];

  // –ó–≥–æ—Ä—Ç–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –ø–∞–Ω–µ–ª—å
  if (currentPanel && !currentPanel.classList.contains('collapsed')) {
    currentPanel.classList.add('collapsed');
  }

  // –†–æ–∑–≥–æ—Ä—Ç–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω—É, —è–∫—â–æ –≤–æ–Ω–∞ —ñ—Å–Ω—É—î —ñ —î –∑–≥–æ—Ä–Ω—É—Ç–æ—é
  if (nextPanel && nextPanel.classList.contains('collapsed')) {
    nextPanel.classList.remove('collapsed');
  }
  
  debugLog(` advanceToNextPanel: –ø–æ—Ç–æ—á–Ω–∞ –ø–∞–Ω–µ–ª—å ${currentIndex + 1}/${allPanelsInTab.length} –≤ —Ç–∞–±—ñ ${activeTab}`, 'info');
}



// --- –¢–ï–°–¢–û–í–ò–ô –ë–õ–û–ö (–æ—á–∏—â–µ–Ω–∏–π –¥–ª—è –Ω–æ–≤–æ—ó —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ) ---

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ—Å–Ω–æ–≤–Ω–æ—ó –∫–∞—Ä—É—Å–µ–ª—ñ —Å—Ç–µ–ª (–∫–æ–ø—ñ—è —Ç–µ—Å—Ç–æ–≤–æ—ó –ª–æ–≥—ñ–∫–∏)
function initializeMainStelesCarousel(category) {
  const track = document.getElementById(`${category}-carousel-track`);
  const viewport = document.getElementById(`${category}-carousel-viewport`);
  if (!track || !viewport || !modelLists[category] || modelLists[category].length === 0) return;
  
  track.innerHTML = '';

  modelLists[category].forEach(filename => {
    const item = document.createElement('div');
    item.className = 'carousel-item';
    // –°—Ç–∞–Ω –ª–µ–¥–∞—á–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    item.dataset.status = 'idle';
    item.dataset.filename = filename;
    // –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä
    const loadingDiv = document.createElement('div');
    loadingDiv.className = 'loading-indicator';
    loadingDiv.textContent = '–ì–æ—Ç–æ–≤–æ –¥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è';
    item.appendChild(loadingDiv);
    track.appendChild(item);
  });
  
  // –î–æ–¥–∞—î–º–æ –ø—Ä–æ–∫—Ä—É—Ç–∫—É –∫–æ–ª–µ—Å–æ–º –º–∏—à—ñ –ë–ï–ó debouncing (–¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è)
  viewport.addEventListener('wheel', (event) => {
    event.preventDefault();
    
    const direction = event.deltaY > 0 ? 1 : -1;
    debugLog(`üéØ –ü–æ–¥—ñ—è wheel –≤ –∫–∞—Ä—É—Å–µ–ª—ñ ${category}: direction=${direction}`, 'info');
    moveMainStelesCarousel(category, direction);
  });

  setTimeout(() => {
    showMainStelesCarouselItem(category, 0);
    // –õ–µ–¥–∞—á–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä—à–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
    loadOrGenerateMainStelesPreview(category, 0);
  }, 100); 
}



// –õ–µ–¥–∞—á–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–µ–≤—å—é –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ—ó –∫–∞—Ä—É—Å–µ–ª—ñ —Å—Ç–µ–ª
function loadOrGenerateMainStelesPreview(category, index) {
  const track = document.getElementById(`${category}-carousel-track`);
  if (!track) return;
  const items = track.querySelectorAll('.carousel-item');
  const item = items[index];
  if (!item) return;

  const currentStatus = item.dataset.status;
  if (currentStatus === 'loaded' || currentStatus === 'pending') return;

  const filename = item.dataset.filename || (modelLists[category] && modelLists[category][index]);
  if (!filename) return;

  let loadingDiv = item.querySelector('.loading-indicator');
  if (!loadingDiv) {
    loadingDiv = document.createElement('div');
    loadingDiv.className = 'loading-indicator';
    item.appendChild(loadingDiv);
  }
  loadingDiv.textContent = '–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–µ–≤—å—é...';

  item.dataset.status = 'pending';

  // –í—ñ–¥—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞—î–º–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –ø—Ä–µ–≤—å—é
  autoGenerateMainStelesPreview(category, filename, item, loadingDiv);
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–µ–≤—å—é –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ—ó –∫–∞—Ä—É—Å–µ–ª—ñ —Å—Ç–µ–ª
function autoGenerateMainStelesPreview(category, filename, item, loadingDiv) {
  if (!window.sketchup) {
    createPlaceholder(item, loadingDiv, `–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó\n${filename}`);
    return;
  }
  
  const componentPath = `${category}/${filename}`;
  debugLog(` –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–µ–≤—å—é –¥–ª—è: ${componentPath} (MainSteles)`, 'info');
  
  // –ì–µ–Ω–µ—Ä—É—î–º–æ –≤–µ–±-–ø—Ä–µ–≤—å—é —á–µ—Ä–µ–∑ SketchUp
  window.sketchup.generate_web_preview(componentPath);
  
  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –µ–ª–µ–º–µ–Ω—Ç–∏ –¥–ª—è callback —á–µ—Ä–µ–∑ SketchUpBridge
  if (window.ProGran3 && window.ProGran3.Communication && window.ProGran3.Communication.SketchUpBridge) {
    window.ProGran3.Communication.SketchUpBridge.addPendingPreview(componentPath, filename, 'MainSteles', item, loadingDiv);
  } else {
    // Fallback –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
    window.pendingPreviews = window.pendingPreviews || {};
    window.pendingPreviews[componentPath] = { item, loadingDiv, filename, source: 'MainSteles' };
  }
  
  debugLog(`üìù –î–æ–¥–∞–Ω–æ –¥–æ pending: ${componentPath} (MainSteles)`, 'info');
}

// –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≥–ª—É—à–∫–∏
function createPlaceholder(item, loadingDiv, text) {
  loadingDiv.remove();
  const placeholder = document.createElement('div');
  placeholder.style.cssText = `
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background: rgba(255, 255, 255, 0.1);
    color: #666;
    font-size: 12px;
    text-align: center;
    padding: 10px;
    box-sizing: border-box;
  `;
  placeholder.textContent = text;
  item.appendChild(placeholder);
}



// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ–≥–æ –ø—Ä–µ–≤—å—é –∑ Ruby
function receiveWebPreview(componentPath, base64Data) {
  debugLog(`üì• –û—Ç—Ä–∏–º–∞–Ω–æ –ø—Ä–µ–≤—å—é –¥–ª—è: ${componentPath}`, 'info');
  debugLog(`üìä –†–æ–∑–º—ñ—Ä base64 –¥–∞–Ω–∏—Ö: ${base64Data ? base64Data.length : 0} —Å–∏–º–≤–æ–ª—ñ–≤`, 'info');
  debugLog(` –ü–µ—Ä—à—ñ 50 —Å–∏–º–≤–æ–ª—ñ–≤ base64: ${base64Data ? base64Data.substring(0, 50) : 'null'}`, 'info');
  
  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ SketchUpBridge —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π
  if (window.ProGran3 && window.ProGran3.Communication && window.ProGran3.Communication.SketchUpBridge) {
    window.ProGran3.Communication.SketchUpBridge.receiveWebPreview(componentPath, base64Data);
    return;
  }
  
  // Fallback –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
  const pendingData = window.pendingPreviews && window.pendingPreviews[componentPath];
  if (!pendingData) {
    debugLog(` –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ pending –¥–∞–Ω—ñ –¥–ª—è: ${componentPath}`, 'error');
    debugLog(`üìã –î–æ—Å—Ç—É–ø–Ω—ñ pending: ${Object.keys(window.pendingPreviews || {}).join(', ')}`, 'error');
    return;
  }
  
  const { item, loadingDiv, filename, source } = pendingData;
  debugLog(` –ó–Ω–∞–π–¥–µ–Ω–æ pending –¥–∞–Ω—ñ –¥–ª—è: ${filename} (${source})`, 'success');
  
  if (base64Data && base64Data.startsWith('data:image/')) {
    debugLog(`üñºÔ∏è –°—Ç–≤–æ—Ä—é—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è: ${filename}`, 'info');
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ base64 –¥–∞–Ω–∏—Ö
    const img = document.createElement('img');
    img.src = base64Data;
    img.alt = filename;
    
    // –í–∏–¥–∞–ª—è—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –¥–æ–¥–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    if (loadingDiv && loadingDiv.parentNode) {
      loadingDiv.parentNode.removeChild(loadingDiv);
      debugLog(`üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ loading indicator –¥–ª—è: ${filename}`, 'info');
    }
    
    if (item) {
      item.appendChild(img);
      item.dataset.status = 'loaded';
      debugLog(` –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–æ–¥–∞–Ω–æ –¥–ª—è: ${filename}`, 'success');
    }
    
  } else {
    debugLog(` –ü–æ–º–∏–ª–∫–∞: base64 –¥–∞–Ω—ñ –Ω–µ —î –≤–∞–ª—ñ–¥–Ω–∏–º –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º –¥–ª—è: ${filename}`, 'error');
    // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏, –ø–æ–∫–∞–∑—É—î–º–æ –∑–∞–≥–ª—É—à–∫—É
    if (item && loadingDiv) createPlaceholder(item, loadingDiv, `–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó\n${filename}`);
  }
  
  // –û—á–∏—â–∞—î–º–æ pending
  delete window.pendingPreviews[componentPath];
  debugLog(`üßπ –û—á–∏—â–µ–Ω–æ pending –¥–ª—è: ${componentPath}`, 'info');
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–µ–≤—å—é
function handlePreviewError(componentPath, errorMessage) {
  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ SketchUpBridge —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π
  if (window.ProGran3 && window.ProGran3.Communication && window.ProGran3.Communication.SketchUpBridge) {
    window.ProGran3.Communication.SketchUpBridge.handlePreviewError(componentPath, errorMessage);
    return;
  }
  
  // Fallback –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
  const pendingData = window.pendingPreviews && window.pendingPreviews[componentPath];
  if (!pendingData) return;
  
  const { item, loadingDiv, filename } = pendingData;
  createPlaceholder(item, loadingDiv, `–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó\n${filename}`);
  
  // –û—á–∏—â–∞—î–º–æ pending
  delete window.pendingPreviews[componentPath];
}



function moveMainStelesCarousel(category, direction) {
  const state = carouselState[category];
  const newIndex = state.index + direction;
  const track = document.getElementById(`${category}-carousel-track`);
  const items = track.querySelectorAll('.carousel-item');
  
  // –¶–∏–∫–ª—ñ—á–Ω–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∞: —è–∫—â–æ –≤–∏—Ö–æ–¥–∏–º–æ –∑–∞ –º–µ–∂—ñ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω–∏–π –∫—ñ–Ω–µ—Ü—å
  let finalIndex = newIndex;
  if (newIndex < 0) {
    finalIndex = items.length - 1; // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç
  } else if (newIndex >= items.length) {
    finalIndex = 0; // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç
  }
  
  showMainStelesCarouselItem(category, finalIndex);
}



function showMainStelesCarouselItem(category, index) {
  const track = document.getElementById(`${category}-carousel-track`);
  const viewport = document.getElementById(`${category}-carousel-viewport`);
  const items = track.querySelectorAll('.carousel-item');
  
  if (!track || items.length === 0 || !items[index]) return;

  items.forEach((item, i) => {
    item.classList.toggle('active', i === index);
  });
  
  const viewportCenter = viewport.offsetWidth / 2;
  const targetItem = items[index];
  const itemCenter = targetItem.offsetLeft + targetItem.offsetWidth / 2;
  const newTransform = viewportCenter - itemCenter;

  carouselState[category].index = index;
  track.style.transform = `translateX(${newTransform}px)`;
  
  // –õ–µ–¥–∞—á–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ —Ç–∞ —Å—É—Å—ñ–¥—ñ–≤
  loadOrGenerateMainStelesPreview(category, index);
  if (index + 1 < items.length) loadOrGenerateMainStelesPreview(category, index + 1);
  if (index - 1 >= 0) loadOrGenerateMainStelesPreview(category, index - 1);
  
  // updateAllDisplays() –≤–∏–¥–∞–ª–µ–Ω–æ - —Ñ—É–Ω–∫—Ü—ñ—è –Ω–µ —ñ—Å–Ω—É—î
}





// --- –£–ù–Ü–í–ï–†–°–ê–õ–¨–ù–Ü –§–£–ù–ö–¶–Ü–á –î–õ–Ø –ö–ê–†–£–°–ï–õ–ï–ô ---

// –ó–∞–º—ñ–Ω—é—î–º–æ —Å—Ç–∞—Ä—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –Ω–∞ —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω—ñ
function initializeCarousel(category) {
  CarouselManager.initialize(category);
}

function showCarouselItem(category, index) {
  CarouselManager.showCarouselItem(category, index);
}

function moveCarousel(category, direction) {
  CarouselManager.moveCarousel(category, direction);
}

function addModel(category) {
  CarouselManager.addModel(category);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∏–ø—É —Å—Ç–µ–ª
// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–±–æ—Ä—É —Ç–∏–ø—É —Å—Ç–µ–ª–∏ (–Ω–æ–≤–∞ Apple-style –ª–æ–≥—ñ–∫–∞)
function selectSteleType(button) {
  debugLog('selectSteleType –≤–∏–∫–ª–∏–∫–∞–Ω–æ!', 'info');
  const segments = document.querySelectorAll('.segment');
  const steleOptionsSection = document.getElementById('stele-options-section');
  const steleScalingSection = document.getElementById('stele-scaling-section');
  
  // –û–Ω–æ–≤–ª—é—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π —Å—Ç–∞–Ω —Å–µ–≥–º–µ–Ω—Ç—ñ–≤
  segments.forEach(segment => segment.classList.remove('active'));
  button.classList.add('active');
  
  const steleType = button.getAttribute('data-value');
  carouselState.steles.type = steleType;
  
  debugLog(`–í–∏–±—Ä–∞–Ω–æ —Ç–∏–ø —Å—Ç–µ–ª–∏: ${steleType} (${typeof steleType})`, 'info');
  debugLog(`–°—Ç–∞–Ω —Å—Ç–µ–ª –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É: ${JSON.stringify(carouselState.steles)}`, 'info');
  
  if (steleType === 'single') {
    // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —Å–µ–∫—Ü—ñ—é –¥–ª—è –ø–∞—Ä–Ω–∏—Ö —Å—Ç–µ–ª
    steleOptionsSection.style.display = 'none';
    
    // –ü–æ–∫–∞–∑—É—î–º–æ —Å–µ–∫—Ü—ñ—é –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è –¥–ª—è –æ–¥–Ω—ñ—î—ó —Å—Ç–µ–ª–∏
    if (steleScalingSection) {
      steleScalingSection.style.display = 'block';
      debugLog('–ü–æ–∫–∞–∑–∞–Ω–æ —Å–µ–∫—Ü—ñ—é –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è –¥–ª—è –æ–¥–∏–Ω–∞—Ä–Ω–æ—ó —Å—Ç–µ–ª–∏', 'info');
      
      // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–µ—Ä–µ–∑ –∑–∞—Ç—Ä–∏–º–∫—É
      setTimeout(() => {
        if (steleScalingSection.style.display !== 'block') {
          steleScalingSection.style.display = 'block';
          debugLog('–ü—Ä–∏–º—É—Å–æ–≤–æ –ø–æ–∫–∞–∑–∞–Ω–æ —Å–µ–∫—Ü—ñ—é –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è (—á–µ—Ä–µ–∑ –∑–∞—Ç—Ä–∏–º–∫—É)', 'info');
        }
      }, 50);
    } else {
      debugLog('stele-scaling-section –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ DOM –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ single', 'error');
    }
    
    // –í–∏–¥–∞–ª—è—î–º–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É –¥–µ—Ç–∞–ª—å, —è–∫—â–æ –≤–æ–Ω–∞ –±—É–ª–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞
    if (carouselState.steles.centralDetail && carouselState.steles.centralDetailCreated) {
      debugLog('–í–∏–¥–∞–ª—è—î–º–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É –¥–µ—Ç–∞–ª—å –ø—Ä–∏ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—ñ –Ω–∞ –æ–¥–Ω—É —Å—Ç–µ–ª—É', 'info');
      deleteCentralDetail();
      carouselState.steles.centralDetail = false;
    }
    
    // –û–Ω–æ–≤–ª—é—î–º–æ —á–µ–∫–±–æ–∫—Å —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ—ó –¥–µ—Ç–∞–ª—ñ
    const centralDetailCheckbox = document.getElementById('central-detail');
    if (centralDetailCheckbox) {
      centralDetailCheckbox.checked = false;
    }
    
    debugLog('–¢–∏–ø —Å—Ç–µ–ª–∏: –æ–¥–Ω–∞', 'info');
  } else if (steleType === 'paired') {
    // –ü–æ–∫–∞–∑—É—î–º–æ —Å–µ–∫—Ü—ñ—é –¥–ª—è –ø–∞—Ä–Ω–∏—Ö —Å—Ç–µ–ª –∑ –∞–Ω—ñ–º–∞—Ü—ñ—î—é
    steleOptionsSection.style.display = 'block';
    
    // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —Å–µ–∫—Ü—ñ—é –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–∞—Ä–Ω–∏—Ö —Å—Ç–µ–ª
    if (steleScalingSection) {
      steleScalingSection.style.display = 'none';
    }
    
    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –¥–ª—è –ø–∞—Ä–Ω–∏—Ö —Å—Ç–µ–ª
    if (!carouselState.steles.distance) {
      carouselState.steles.distance = 200;
    }
    if (!carouselState.steles.centralDetail) {
      carouselState.steles.centralDetail = false;
    }
    if (!carouselState.steles.centralDetailWidth) {
      carouselState.steles.centralDetailWidth = 200;
    }
    if (!carouselState.steles.centralDetailDepth) {
      carouselState.steles.centralDetailDepth = 50;
    }
    if (!carouselState.steles.centralDetailHeight) {
      carouselState.steles.centralDetailHeight = 250;
    }
    
    updateCentralDetailDisplay();
    debugLog('–¢–∏–ø —Å—Ç–µ–ª–∏: –ø–∞—Ä–Ω—ñ', 'info');
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∏–ø—É —Å—Ç–µ–ª–∏ (legacy support)
function updateSteleType() {
  const singleRadio = document.querySelector('input[name="stele-type"][value="single"]');
  const pairedRadio = document.querySelector('input[name="stele-type"][value="paired"]');
  
  if (singleRadio && pairedRadio) {
    if (singleRadio.checked) {
      const singleButton = document.querySelector('.segment[data-value="single"]');
      if (singleButton) selectSteleType(singleButton);
    } else if (pairedRadio.checked) {
      const pairedButton = document.querySelector('.segment[data-value="paired"]');
      if (pairedButton) selectSteleType(pairedButton);
    }
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥—Å—Ç–∞–Ω—ñ –º—ñ–∂ —Å—Ç–µ–ª–∞–º–∏
function updateSteleDistance() {
  const distanceInput = document.getElementById('stele-distance');
  if (distanceInput) {
    // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –º—ñ–ª—ñ–º–µ—Ç—Ä–∏ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ —Å—Ç–∞–Ω—ñ
    const distanceMm = convertToMm(distanceInput.value);
    carouselState.steles.distance = distanceMm;
    debugLog(`–í—ñ–¥—Å—Ç–∞–Ω—å –º—ñ–∂ —Å—Ç–µ–ª–∞–º–∏ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: ${distanceMm}–º–º`, 'info');
    
    // –û–Ω–æ–≤–ª—é—î–º–æ —Ä–æ–∑–º—ñ—Ä–∏ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ—ó –¥–µ—Ç–∞–ª—ñ
    if (carouselState.steles.centralDetail) {
      updateCentralDetailFromSteleDistance();
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–Ω–æ–≤–ª—é—î–º–æ —ñ—Å–Ω—É—é—á—É –º–æ–¥–µ–ª—å —Å—Ç–µ–ª
    updateExistingSteleModel();
  } else {
    debugLog('–ü–æ–ª–µ stele-distance –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ', 'error');
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ—ó –º–æ–¥–µ–ª—ñ —Å—Ç–µ–ª
function updateExistingSteleModel() {
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤–∂–µ —Å—Ç–≤–æ—Ä–µ–Ω–∞ –º–æ–¥–µ–ª—å —Å—Ç–µ–ª
  if (carouselState.steles.modelCreated && window.sketchup && (window.sketchup.update_model || window.sketchup.add_model)) {
    const state = carouselState.steles;
    const filename = modelLists.steles[state.index];
    
    if (filename) {
      const steleType = state.type || 'single';
      const steleDistance = state.distance || 200;
      const centralDetail = state.centralDetail || false;
      const centralDetailWidth = state.centralDetailWidth || 200;
      const centralDetailDepth = state.centralDetailDepth || 50;
      const centralDetailHeight = state.centralDetailHeight || 1200;
      
      debugLog(`–û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ —Å—Ç–µ–ª: ${filename}, –≤—ñ–¥—Å—Ç–∞–Ω—å: ${steleDistance}–º–º, —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ –¥–µ—Ç–∞–ª—å: ${centralDetail} (${centralDetailWidth}x${centralDetailDepth}x${centralDetailHeight}–º–º)`, 'info');
      
      // –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ update_model, —è–∫—â–æ –≤–æ–Ω–∞ —ñ—Å–Ω—É—î
      if (window.sketchup.update_model) {
        window.sketchup.update_model('steles', filename, steleType, steleDistance, centralDetail, centralDetailWidth, centralDetailDepth, centralDetailHeight);
      } else if (window.sketchup.add_model) {
        // Fallback: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ add_model —è–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        window.sketchup.add_model('steles', filename, steleType, steleDistance, centralDetail, centralDetailWidth, centralDetailDepth, centralDetailHeight);
      }
    }
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–º–∏–∫–∞—á–∞ –ø—Ä–æ–º—ñ–∂–Ω–∏—Ö
function updateStandsGaps() {
  const gapsCheckbox = document.getElementById('stands-gaps');
  if (gapsCheckbox) {
    carouselState.stands.gaps = gapsCheckbox.checked;
    debugLog(`–ü—Ä–æ–º—ñ–∂–Ω–∞ –ø—ñ–¥—Å—Ç–∞–≤–∫–∏: ${gapsCheckbox.checked ? '—É–≤—ñ–º–∫–Ω–µ–Ω–æ' : '–≤–∏–º–∫–Ω–µ–Ω–æ'}`, 'info');
    
    // –ü–æ–∫–∞–∑—É—î–º–æ/–ø—Ä–∏—Ö–æ–≤—É—î–º–æ –ø–æ–ª—è —Ä–æ–∑–º—ñ—Ä—ñ–≤ –ø—Ä–æ–º—ñ–∂–Ω–æ—ó
    const gapsDimensionsGroup = document.getElementById('gaps-dimensions-group');
    if (gapsDimensionsGroup) {
      if (gapsCheckbox.checked) {
        gapsDimensionsGroup.style.display = 'block';
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–ø–æ–≤–Ω—é—î–º–æ –¥–æ–≤–∂–∏–Ω—É —Ç–∞ —à–∏—Ä–∏–Ω—É –∑ —Ä–æ–∑–º—ñ—Ä—ñ–≤ –ø—ñ–¥—Å—Ç–∞–≤–∫–∏
        updateGapsFromStandDimensions();
      } else {
        gapsDimensionsGroup.style.display = 'none';
      }
    }
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—ñ–≤ –ø—Ä–æ–º—ñ–∂–Ω–æ—ó –∑ —Ä–æ–∑–º—ñ—Ä—ñ–≤ –ø—ñ–¥—Å—Ç–∞–≤–∫–∏
function updateGapsFromStandDimensions() {
  const standDepth = document.getElementById('stands-depth');
  const standWidth = document.getElementById('stands-width');
  const gapsDepth = document.getElementById('gaps-depth');
  const gapsWidth = document.getElementById('gaps-width');
  
  if (standDepth && standWidth && gapsDepth && gapsWidth) {
    const currentUnit = getCurrentUnit();
    
    // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Ä–æ–∑–º—ñ—Ä–∏ –ø—ñ–¥—Å—Ç–∞–≤–∫–∏ –≤ –º—ñ–ª—ñ–º–µ—Ç—Ä–∏
    const standDepthMm = convertToMm(standDepth.value);
    const standWidthMm = convertToMm(standWidth.value);
    
    // –î–æ–¥–∞—î–º–æ 50 –º–º –¥–æ —Ä–æ–∑–º—ñ—Ä—ñ–≤ –ø—ñ–¥—Å—Ç–∞–≤–∫–∏
    const newDepthMm = standDepthMm + 50;
    const newWidthMm = standWidthMm + 50;
    
    // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –Ω–∞–∑–∞–¥ –≤ –ø–æ—Ç–æ—á–Ω—ñ –æ–¥–∏–Ω–∏—Ü—ñ
    const newDepth = currentUnit === 'cm' ? Math.round(newDepthMm / 10) : newDepthMm;
    const newWidth = currentUnit === 'cm' ? Math.round(newWidthMm / 10) : newWidthMm;
    
    gapsDepth.value = newDepth;
    gapsWidth.value = newWidth;
    debugLog(`–†–æ–∑–º—ñ—Ä–∏ –ø—Ä–æ–º—ñ–∂–Ω–æ—ó –æ–Ω–æ–≤–ª–µ–Ω–æ –∑ –ø—ñ–¥—Å—Ç–∞–≤–∫–∏ (+50–º–º): ${newDepth}√ó${newWidth} ${currentUnit}`, 'info');
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—ñ–≤ –ø—Ä–æ–º—ñ–∂–Ω–æ—ó
function updateGapsDisplay() {
  const depthInput = document.getElementById('gaps-depth');
  const widthInput = document.getElementById('gaps-width');
  const heightInput = document.getElementById('gaps-height');
  
  if (depthInput && widthInput && heightInput) {
    const depth = parseInt(depthInput.value) || 650;
    const width = parseInt(widthInput.value) || 200;
    const height = parseInt(heightInput.value) || 50;
    
    debugLog(`–†–æ–∑–º—ñ—Ä–∏ –ø—Ä–æ–º—ñ–∂–Ω–æ—ó: ${height}√ó${width}√ó${depth} –º–º (–í√ó–®√ó–î)`, 'info');
  }
}


// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–∏–ø—É —Å—Ç–µ–ª –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
function initializeSteleType() {
  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å—Ç–∞–Ω —Å—Ç–µ–ª, —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
  if (!carouselState.steles) {
    carouselState.steles = {
      type: 'single',
      distance: 200,
      centralDetail: false,
      centralDetailWidth: 200,
      centralDetailDepth: 50,
      centralDetailHeight: 250,
      centralDetailCreated: false,
      modelCreated: false
    };
    debugLog('–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —Å—Ç–∞–Ω —Å—Ç–µ–ª –∑ —Ç–∏–ø–æ–º single', 'info');
  } else {
    debugLog(`–°—Ç–∞–Ω —Å—Ç–µ–ª –≤–∂–µ —ñ—Å–Ω—É—î: ${JSON.stringify(carouselState.steles)}`, 'info');
  }
  
  // –ü—Ä–∏–º—É—Å–æ–≤–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–∏–ø single, —è–∫—â–æ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π
  if (!carouselState.steles.type) {
    carouselState.steles.type = 'single';
    debugLog('–ü—Ä–∏–º—É—Å–æ–≤–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ç–∏–ø —Å—Ç–µ–ª: single', 'info');
  }
  
  const steleTypeInputs = document.querySelectorAll('input[name="stele-type"]');
  if (steleTypeInputs.length > 0) {
    const checkedInput = document.querySelector('input[name="stele-type"]:checked');
    if (checkedInput) {
      carouselState.steles.type = checkedInput.value;
      debugLog(`–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —Ç–∏–ø —Å—Ç–µ–ª: ${checkedInput.value}`, 'info');
    }
  }
  initializeCentralDetail();
  
  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –Ω–æ–≤—É Apple-style —Å—Ç—Ä—É–∫—Ç—É—Ä—É
  initializeSteleSections();
  
  // –ü–æ–∫–∞–∑—É—î–º–æ —Å–µ–∫—Ü—ñ—é –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è –¥–ª—è –æ–¥–∏–Ω–∞—Ä–Ω–æ—ó —Å—Ç–µ–ª–∏, —è–∫—â–æ –≤–æ–Ω–∞ –≤–∂–µ –≤–∏–±—Ä–∞–Ω–∞
  setTimeout(() => {
    if (carouselState.steles.type === 'single') {
      const steleScalingSection = document.getElementById('stele-scaling-section');
      if (steleScalingSection) {
        steleScalingSection.style.display = 'block';
        debugLog('–ü–æ–∫–∞–∑–∞–Ω–æ —Å–µ–∫—Ü—ñ—é –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó (–∑ –∑–∞—Ç—Ä–∏–º–∫–æ—é)', 'info');
      } else {
        debugLog('stele-scaling-section –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ DOM', 'error');
      }
    }
  }, 200);
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ—ó –¥–µ—Ç–∞–ª—ñ
function initializeCentralDetail() {
  const centralDetailCheckbox = document.getElementById('central-detail');
  if (centralDetailCheckbox) {
    carouselState.steles.centralDetail = centralDetailCheckbox.checked;
    carouselState.steles.centralDetailCreated = false; // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ñ–ª–∞–≥
    updateCentralDetailDisplay();
    debugLog(`–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É –¥–µ—Ç–∞–ª—å: ${centralDetailCheckbox.checked}`, 'info');
  }
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –Ω–æ–≤–æ—ó Apple-style —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Å—Ç–µ–ª
function initializeSteleSections() {
  // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω —Å–µ–≥–º–µ–Ω—Ç—ñ–≤ –∑ –∑–∞—Ç—Ä–∏–º–∫–æ—é
  setTimeout(() => {
    const singleButton = document.querySelector('.segment[data-value="single"]');
    if (singleButton && !singleButton.classList.contains('active')) {
      debugLog('initializeSteleSections: –≤–∏–∫–ª–∏–∫–∞—î–º–æ selectSteleType –¥–ª—è single', 'info');
      selectSteleType(singleButton);
    }
  }, 100);
  
  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É –¥–µ—Ç–∞–ª—å
  initializeCentralDetail();
  
  debugLog('–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —Å–µ–∫—Ü—ñ—ó —Å—Ç–µ–ª —É Apple —Å—Ç–∏–ª—ñ', 'info');
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ—ó –¥–µ—Ç–∞–ª—ñ
function updateCentralDetail() {
  const centralDetailCheckbox = document.getElementById('central-detail');
  if (centralDetailCheckbox) {
    const wasEnabled = carouselState.steles.centralDetail;
    const isNowEnabled = centralDetailCheckbox.checked;
    carouselState.steles.centralDetail = isNowEnabled;
    
    if (isNowEnabled) {
      // –ü—Ä–∏ –≤–º–∏–∫–∞–Ω–Ω—ñ - —Å—Ç–≤–æ—Ä—é—î–º–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É –¥–µ—Ç–∞–ª—å
      updateCentralDetailDisplay();
      // –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–Ω—ñ–º–∞—Ü—ñ—ó –ø–æ–∫–∞–∑—É –ø–æ–ª—ñ–≤
      setTimeout(() => {
        createCentralDetail();
      }, 100);
    } else {
      // –ü—Ä–∏ –≤–∏–º–∏–∫–∞–Ω–Ω—ñ - –≤–∏–¥–∞–ª—è—î–º–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É –¥–µ—Ç–∞–ª—å
      if (carouselState.steles.centralDetailCreated) {
        deleteCentralDetail();
      }
      updateCentralDetailDisplay();
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–Ω–æ–≤–ª—é—î–º–æ —ñ—Å–Ω—É—é—á—É –º–æ–¥–µ–ª—å —Å—Ç–µ–ª
    updateExistingSteleModel();
    
    debugLog(`–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ –¥–µ—Ç–∞–ª—å: ${isNowEnabled ? '—É–≤—ñ–º–∫–Ω–µ–Ω–æ' : '–≤–∏–º–∫–Ω–µ–Ω–æ'} (–±—É–ª–æ: ${wasEnabled}, —Å—Ç–≤–æ—Ä–µ–Ω–∞: ${carouselState.steles.centralDetailCreated})`, 'info');
  }
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ—ó –¥–µ—Ç–∞–ª—ñ
function updateCentralDetailDisplay() {
  const centralDetailDimensionsGroup = document.getElementById('central-detail-dimensions-group');
  
  if (centralDetailDimensionsGroup) {
    if (carouselState.steles.type === 'paired') {
      if (carouselState.steles.centralDetail) {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ–ª—è –±—É–ª–∏ –ø—Ä–∏—Ö–æ–≤–∞–Ω—ñ —Ä–∞–Ω—ñ—à–µ
        const wasHidden = centralDetailDimensionsGroup.style.display === 'none';
        centralDetailDimensionsGroup.style.display = 'block';
        
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –ø–æ–∫–∞–∑—ñ
        if (wasHidden) {
          updateCentralDetailFromSteleDistance();
        }
      } else {
        centralDetailDimensionsGroup.style.display = 'none';
      }
    } else {
      centralDetailDimensionsGroup.style.display = 'none';
    }
  }
  
  // –û–Ω–æ–≤–ª—é—î–º–æ —Ä–æ–∑–º—ñ—Ä–∏ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ—ó –¥–µ—Ç–∞–ª—ñ –≤ —Å—Ç–∞–Ω—ñ
  const centralDetailWidth = document.getElementById('central-detail-width');
  const centralDetailDepth = document.getElementById('central-detail-depth');
  const centralDetailHeight = document.getElementById('central-detail-height');
  
  if (centralDetailWidth && centralDetailDepth && centralDetailHeight) {
    const widthMm = convertToMm(centralDetailWidth.value);
    const depthMm = convertToMm(centralDetailDepth.value);
    const heightMm = convertToMm(centralDetailHeight.value);
    
    carouselState.steles.centralDetailWidth = widthMm;
    carouselState.steles.centralDetailDepth = depthMm;
    carouselState.steles.centralDetailHeight = heightMm;
    
    debugLog(`–†–æ–∑–º—ñ—Ä–∏ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ—ó –¥–µ—Ç–∞–ª—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ –≤ —Å—Ç–∞–Ω—ñ: ${widthMm}x${depthMm}x${heightMm}–º–º`, 'info');
  }
}


// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ —Å—Ç–µ–ª –∑ –Ω–æ–≤–∏–º–∏ —Ä–æ–∑–º—ñ—Ä–∞–º–∏
function updateSteleModelWithNewDimensions() {
  debugLog('=== –ö–ù–û–ü–ö–ê "–û–ù–û–í–ò–¢–ò –†–û–ó–ú–Ü–†–ò" –ù–ê–¢–ò–°–ù–£–¢–ê ===', 'info');
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —Å—Ç–≤–æ—Ä–µ–Ω–∞ –º–æ–¥–µ–ª—å —Å—Ç–µ–ª
  if (!carouselState.steles.modelCreated) {
    debugLog('–ü–û–ú–ò–õ–ö–ê: –ú–æ–¥–µ–ª—å —Å—Ç–µ–ª —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–∞', 'error');
    alert('–°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π—Ç–µ —Å—Ç–µ–ª—É!');
    return;
  }
  
  debugLog('–ú–æ–¥–µ–ª—å —Å—Ç–≤–æ—Ä–µ–Ω–∞, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è...', 'info');
  
  // –û–Ω–æ–≤–ª—é—î–º–æ —Ä–æ–∑–º—ñ—Ä–∏ –≤ —Å—Ç–∞–Ω—ñ –ø–µ—Ä–µ–¥ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º –º–æ–¥–µ–ª—ñ
  updateCentralDetailDisplay();
  
  // –í–∏–∫–ª–∏–∫–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ —Å—Ç–µ–ª
  updateExistingSteleModel();
  
  // –Ø–∫—â–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ –¥–µ—Ç–∞–ª—å —É–≤—ñ–º–∫–Ω–µ–Ω–∞, –æ–Ω–æ–≤–ª—é—î–º–æ —ó—ó –æ–∫—Ä–µ–º–æ
  if (carouselState.steles.centralDetail) {
    debugLog('–û–Ω–æ–≤–ª—é—î–º–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É –¥–µ—Ç–∞–ª—å –∑ –Ω–æ–≤–∏–º–∏ —Ä–æ–∑–º—ñ—Ä–∞–º–∏...', 'info');
    createCentralDetail();
  }
  
  debugLog('–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ', 'info');
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—ñ–≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ—ó –¥–µ—Ç–∞–ª—ñ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤—ñ–¥—Å—Ç–∞–Ω—ñ –º—ñ–∂ —Å—Ç–µ–ª–∞–º–∏
function updateCentralDetailFromSteleDistance() {
  const steleDistance = parseFloat(document.getElementById('stele-distance').value) || 200;
  const centralDetailWidth = document.getElementById('central-detail-width');
  const centralDetailDepth = document.getElementById('central-detail-depth');
  const centralDetailHeight = document.getElementById('central-detail-height');
  
  if (centralDetailWidth && centralDetailDepth && centralDetailHeight) {
    const currentUnit = getCurrentUnit();
    
    // –®–∏—Ä–∏–Ω–∞ = –≤—ñ–¥—Å—Ç–∞–Ω—å –º—ñ–∂ —Å—Ç–µ–ª–∞–º–∏
    centralDetailWidth.value = steleDistance;
    
    // –¢–æ–≤—â–∏–Ω–∞ = 50–º–º (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º) - –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ –ø–æ—Ç–æ—á–Ω—ñ –æ–¥–∏–Ω–∏—Ü—ñ
    const defaultDepth = currentUnit === 'cm' ? 5 : 50;
    centralDetailDepth.value = defaultDepth;
    
    // –í–∏—Å–æ—Ç–∞ = 1200–º–º (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º) - –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ –ø–æ—Ç–æ—á–Ω—ñ –æ–¥–∏–Ω–∏—Ü—ñ
    const defaultHeight = currentUnit === 'cm' ? 120 : 1200;
    centralDetailHeight.value = defaultHeight;
    
    debugLog(`–û–Ω–æ–≤–ª–µ–Ω–æ —Ä–æ–∑–º—ñ—Ä–∏ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ—ó –¥–µ—Ç–∞–ª—ñ: ${steleDistance}√ó${defaultDepth}√ó${defaultHeight} ${currentUnit}`, 'info');
  }
}

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ—ó –¥–µ—Ç–∞–ª—ñ
function createCentralDetail() {
  const centralDetailWidthRaw = parseFloat(document.getElementById('central-detail-width').value) || 200;
  const centralDetailDepthRaw = parseFloat(document.getElementById('central-detail-depth').value) || 50;
  const centralDetailHeightRaw = parseFloat(document.getElementById('central-detail-height').value) || 1200;
  
  // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –º—ñ–ª—ñ–º–µ—Ç—Ä–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ –≤ Ruby
  const centralDetailWidth = convertToMm(centralDetailWidthRaw);
  const centralDetailDepth = convertToMm(centralDetailDepthRaw);
  const centralDetailHeight = convertToMm(centralDetailHeightRaw);
  
  const currentUnit = getCurrentUnit();
  debugLog(`–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ—ó –¥–µ—Ç–∞–ª—ñ (${currentUnit} ‚Üí –º–º):`, 'info');
  debugLog(`  - –®–∏—Ä–∏–Ω–∞: ${centralDetailWidthRaw} ${currentUnit} ‚Üí ${centralDetailWidth} –º–º`, 'info');
  debugLog(`  - –¢–æ–≤—â–∏–Ω–∞: ${centralDetailDepthRaw} ${currentUnit} ‚Üí ${centralDetailDepth} –º–º`, 'info');
  debugLog(`  - –í–∏—Å–æ—Ç–∞: ${centralDetailHeightRaw} ${currentUnit} ‚Üí ${centralDetailHeight} –º–º`, 'info');
  debugLog(`–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ –¥–µ—Ç–∞–ª—å: ${centralDetailWidth}√ó${centralDetailDepth}√ó${centralDetailHeight} –º–º`, 'info');
  
  // –í–∏–∫–ª–∏–∫–∞—î–º–æ Ruby –º–µ—Ç–æ–¥ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ—ó –¥–µ—Ç–∞–ª—ñ
  if (window.sketchup && window.sketchup.create_central_detail) {
    window.sketchup.create_central_detail(centralDetailWidth, centralDetailDepth, centralDetailHeight);
    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ñ–ª–∞–≥, —â–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ –¥–µ—Ç–∞–ª—å –±—É–ª–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞
    carouselState.steles.centralDetailCreated = true;
  } else {
    debugLog('SketchUp bridge –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ—ó –¥–µ—Ç–∞–ª—ñ', 'error');
  }
}

// –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ—ó –¥–µ—Ç–∞–ª—ñ
function deleteCentralDetail() {
  debugLog('–í–∏–¥–∞–ª–µ–Ω–Ω—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ—ó –¥–µ—Ç–∞–ª—ñ', 'info');
  
  // –í–∏–∫–ª–∏–∫–∞—î–º–æ Ruby –º–µ—Ç–æ–¥ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ—ó –¥–µ—Ç–∞–ª—ñ
  if (window.sketchup && window.sketchup.delete_central_detail) {
    window.sketchup.delete_central_detail();
    // –°–∫–∏–¥–∞—î–º–æ —Ñ–ª–∞–≥, —â–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ –¥–µ—Ç–∞–ª—å –±—É–ª–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞
    carouselState.steles.centralDetailCreated = false;
  } else {
    debugLog('SketchUp bridge –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ—ó –¥–µ—Ç–∞–ª—ñ', 'error');
  }
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤–º–∏–∫–∞—á–∞ –ø—Ä–æ–º—ñ–∂–Ω–∏—Ö –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
function initializeStandsGaps() {
  const gapsCheckbox = document.getElementById('stands-gaps');
  if (gapsCheckbox) {
    carouselState.stands.gaps = gapsCheckbox.checked;
    debugLog(`–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –ø—Ä–æ–º—ñ–∂–Ω—É –ø—ñ–¥—Å—Ç–∞–≤–∫–∏: ${gapsCheckbox.checked}`, 'info');
    
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –≤–∏–¥–∏–º—ñ—Å—Ç—å –ø–æ–ª—ñ–≤ –ø—Ä–æ–º—ñ–∂–Ω–æ—ó
    const gapsDimensionsGroup = document.getElementById('gaps-dimensions-group');
    if (gapsDimensionsGroup) {
      if (gapsCheckbox.checked) {
        gapsDimensionsGroup.style.display = 'block';
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–ø–æ–≤–Ω—é—î–º–æ —Ä–æ–∑–º—ñ—Ä–∏ –∑ –ø—ñ–¥—Å—Ç–∞–≤–∫–∏
        updateGapsFromStandDimensions();
      } else {
        gapsDimensionsGroup.style.display = 'none';
      }
    }
  }
}

// --- –Ü–ù–®–Ü –§–£–ù–ö–¶–Ü–á ---

function updateTilingControls() {
  const tilingMode = getSelectedTilingMode();
  const frameControls = document.getElementById('frame-controls');
  const modularControls = document.getElementById('modular-controls');
  
  if (tilingMode === 'frame') {
    frameControls.classList.remove('hidden');
    modularControls.classList.add('hidden');
  } else {
    frameControls.classList.add('hidden');
    modularControls.classList.remove('hidden');
  }
}

function selectBlindAreaMode(button) {
  // –í–∏–¥–∞–ª—è—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–ª–∞—Å –∑ —É—Å—ñ—Ö –∫–Ω–æ–ø–æ–∫ —Ä–µ–∂–∏–º—É —à–∏—Ä–∏–Ω–∏
  document.querySelectorAll('.button-group-tiling-mode .tiling-mode-btn').forEach(btn => {
    btn.classList.remove('active');
  });
  
  // –î–æ–¥–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–ª–∞—Å –¥–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ—ó –∫–Ω–æ–ø–∫–∏
  button.classList.add('active');
  
  // –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏
  updateBlindAreaControls();
}

// –§—É–Ω–∫—Ü—ñ—è –≤–∏–¥–∞–ª–µ–Ω–∞ - –∑–∞–º—ñ–Ω–µ–Ω–∞ –Ω–∞ –Ω–æ–≤—É –≤–µ—Ä—Å—ñ—é –Ω–∏–∂—á–µ

function updateBlindAreaControls() {
  const mode = getSelectedBlindAreaMode();
  const uniformControls = document.getElementById('blind-area-uniform-controls');
  const customControls = document.getElementById('blind-area-custom-controls');
  
  if (mode === 'uniform') {
    uniformControls.classList.remove('hidden');
    customControls.classList.add('hidden');
  } else {
    uniformControls.classList.add('hidden');
    customControls.classList.remove('hidden');
  }
}




// updateAllDisplays() –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ modules/ui/AccordionManager.js

function updateModelDisplays() {
  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—ñ–¥—Å—Ç–∞–≤–∫–∏ - —Ç–µ–ø–µ—Ä –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ updateStandsDisplay
  updateStandsDisplay();
  
  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–≤—ñ—Ç–Ω–∏–∫–∞
  if (carouselState.flowerbeds && modelLists.flowerbeds) {
    const flowerbedIndex = carouselState.flowerbeds.index;
    const flowerbedFilename = modelLists.flowerbeds[flowerbedIndex];
    if (flowerbedFilename) {
      document.getElementById('flowerbeds-dimensions-display').textContent = 
        flowerbedFilename.replace('.skp', '');
    }
  }
  
  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–µ–ª–∏
  if (carouselState.steles && modelLists.steles) {
    const steleIndex = carouselState.steles.index;
    const steleFilename = modelLists.steles[steleIndex];
    if (steleFilename) {
      document.getElementById('steles-dimensions-display').textContent = 
        steleFilename.replace('.skp', '');
    }
  }
  
  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–∞–¥–≥—Ä–æ–±–Ω–æ—ó –ø–ª–∏—Ç–∏
  if (carouselState.gravestones && modelLists.gravestones) {
    const gravestoneIndex = carouselState.gravestones.index;
    const gravestoneFilename = modelLists.gravestones[gravestoneIndex];
    if (gravestoneFilename) {
      document.getElementById('gravestones-dimensions-display').textContent = 
        gravestoneFilename.replace('.skp', '');
    }
  }
  
  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–µ–∫–æ—Ä—É –æ–≥–æ—Ä–æ–∂—ñ
  if (carouselState.fence_decor && modelLists.fence_decor) {
    const fenceDecorIndex = carouselState.fence_decor.index;
    const fenceDecorFilename = modelLists.fence_decor[fenceDecorIndex];
    if (fenceDecorFilename) {
      document.getElementById('fence-decor-dimensions-display').textContent = 
        fenceDecorFilename.replace('.skp', '');
    }
  }
}

function updateSummaryTable() {
  try {
    debugLog(` updateSummaryTable() –≤–∏–∫–ª–∏–∫–∞–Ω–æ`, 'info');
    const unitText = currentUnit === 'mm' ? '–º–º' : '—Å–º';
    
    // –§—É–Ω–¥–∞–º–µ–Ω—Ç
    if (addedElements.foundation) {
    const foundationDepthEl = document.getElementById('foundation-depth');
    const foundationWidthEl = document.getElementById('foundation-width');
    const foundationHeightEl = document.getElementById('foundation-height');
    const summaryFoundationEl = document.getElementById('summary-foundation');
    
    if (foundationDepthEl && foundationWidthEl && foundationHeightEl && summaryFoundationEl) {
      const foundationDepth = foundationDepthEl.value;
      const foundationWidth = foundationWidthEl.value;
      const foundationHeight = foundationHeightEl.value;
      summaryFoundationEl.textContent = 
        `${foundationDepth}√ó${foundationWidth}√ó${foundationHeight} ${unitText}`;
    }
  } else {
    const summaryFoundationEl = document.getElementById('summary-foundation');
    if (summaryFoundationEl) {
      summaryFoundationEl.textContent = '--';
    }
  }
  
  // –ü–ª–∏—Ç–∫–∞
  if (addedElements.tiling) {
    const activeButton = document.querySelector('.tiling-mode-btn.active');
    const summaryTilingEl = document.getElementById('summary-tiling');
    if (activeButton && summaryTilingEl) {
      summaryTilingEl.textContent = activeButton.textContent;
    }
  } else {
    const summaryTilingEl = document.getElementById('summary-tiling');
    if (summaryTilingEl) {
      summaryTilingEl.textContent = '--';
    }
  }
  
  // –û–±–ª–∏—Ü—é–≤–∞–Ω–Ω—è
  if (addedElements.cladding) {
    const claddingThicknessEl = document.getElementById('cladding-thickness');
    const summaryCladdingEl = document.getElementById('summary-cladding');
    if (claddingThicknessEl && summaryCladdingEl) {
      const claddingThickness = claddingThicknessEl.value;
      summaryCladdingEl.textContent = 
        `–¢–æ–≤—â–∏–Ω–∞: ${claddingThickness} ${unitText}`;
    }
  } else {
    const summaryCladdingEl = document.getElementById('summary-cladding');
    if (summaryCladdingEl) {
      summaryCladdingEl.textContent = '--';
    }
  }
  
  // –í—ñ–¥–º–æ—Å—Ç–∫–∞
  if (addedElements.blindArea) {
    const blindAreaThicknessEl = document.getElementById('blind-area-thickness');
    const blindAreaModeEl = document.getElementById('blind-area-mode');
    const summaryBlindAreaEl = document.getElementById('summary-blind-area');
    
    if (blindAreaThicknessEl && blindAreaModeEl && summaryBlindAreaEl) {
      const blindAreaThickness = blindAreaThicknessEl.value;
      const blindAreaMode = blindAreaModeEl.value;
      
      if (blindAreaMode === 'uniform') {
        const uniformWidthEl = document.getElementById('blind-area-uniform-width');
        if (uniformWidthEl) {
          const uniformWidth = uniformWidthEl.value;
          summaryBlindAreaEl.textContent = 
            `–®–∏—Ä–∏–Ω–∞: ${uniformWidth} ${unitText}, –¢–æ–≤—â–∏–Ω–∞: ${blindAreaThickness} ${unitText}`;
        }
      } else {
        const blindAreaNorthEl = document.getElementById('blind-area-north');
        const blindAreaSouthEl = document.getElementById('blind-area-south');
        const blindAreaEastEl = document.getElementById('blind-area-east');
        const blindAreaWestEl = document.getElementById('blind-area-west');
        
        if (blindAreaNorthEl && blindAreaSouthEl && blindAreaEastEl && blindAreaWestEl) {
          const blindAreaNorth = blindAreaNorthEl.value;
          const blindAreaSouth = blindAreaSouthEl.value;
          const blindAreaEast = blindAreaEastEl.value;
          const blindAreaWest = blindAreaWestEl.value;
          summaryBlindAreaEl.textContent = 
            `–ü:${blindAreaNorth} –ü–¥:${blindAreaSouth} –°:${blindAreaEast} –ó:${blindAreaWest} ${unitText}, –¢:${blindAreaThickness} ${unitText}`;
        }
      }
    }
  } else {
    const summaryBlindAreaEl = document.getElementById('summary-blind-area');
    if (summaryBlindAreaEl) {
      summaryBlindAreaEl.textContent = '--';
    }
  }
  
  // –ü—ñ–¥—Å—Ç–∞–≤–∫–∞
  if (addedElements.stands) {
    const summaryStandEl = document.getElementById('summary-stand');
    if (summaryStandEl) {
      if (typeof addedElements.stands === 'object' && addedElements.stands.filename) {
        summaryStandEl.textContent = addedElements.stands.filename.replace('.skp', '');
      } else {
        summaryStandEl.textContent = '–ü—ñ–¥—Å—Ç–∞–≤–∫–∞';
      }
    }
  } else {
    const summaryStandEl = document.getElementById('summary-stand');
    if (summaryStandEl) {
      summaryStandEl.textContent = '--';
    }
  }
  
  // –ö–≤—ñ—Ç–Ω–∏–∫
  if (addedElements.flowerbeds && carouselState.flowerbeds && modelLists.flowerbeds) {
    const flowerbedFilename = modelLists.flowerbeds[carouselState.flowerbeds.index];
    const summaryFlowerbedEl = document.getElementById('summary-flowerbed');
    if (summaryFlowerbedEl) {
      summaryFlowerbedEl.textContent = 
        flowerbedFilename ? flowerbedFilename.replace('.skp', '') : '--';
    }
  } else {
    const summaryFlowerbedEl = document.getElementById('summary-flowerbed');
    if (summaryFlowerbedEl) {
      summaryFlowerbedEl.textContent = '--';
    }
  }
  
  // –ù–∞–¥–≥—Ä–æ–±–Ω–∞ –ø–ª–∏—Ç–∞
  if (addedElements.gravestones && carouselState.gravestones && modelLists.gravestones) {
    const gravestoneFilename = modelLists.gravestones[carouselState.gravestones.index];
    const summaryGravestoneEl = document.getElementById('summary-gravestone');
    if (summaryGravestoneEl) {
      summaryGravestoneEl.textContent = 
        gravestoneFilename ? gravestoneFilename.replace('.skp', '') : '--';
    }
  } else {
    const summaryGravestoneEl = document.getElementById('summary-gravestone');
    if (summaryGravestoneEl) {
      summaryGravestoneEl.textContent = '--';
    }
  }
  
  // –°—Ç–µ–ª–∞
  if (addedElements.steles && carouselState.steles && modelLists.steles) {
    const steleFilename = modelLists.steles[carouselState.steles.index];
    const summarySteleEl = document.getElementById('summary-stele');
    if (summarySteleEl) {
      summarySteleEl.textContent = 
        steleFilename ? steleFilename.replace('.skp', '') : '--';
    }
  } else {
    const summarySteleEl = document.getElementById('summary-stele');
    if (summarySteleEl) {
      summarySteleEl.textContent = '--';
    }
  }
  
  // –ö—É—Ç–æ–≤–∞ –æ–≥–æ—Ä–æ–∂–∞
  if (addedElements.fence_corner) {
    const postHeightEl = document.getElementById('fence-corner-post-height');
    const postSizeEl = document.getElementById('fence-corner-post-size');
    const sideHeightEl = document.getElementById('fence-corner-side-height');
    const sideLengthEl = document.getElementById('fence-corner-side-length');
    const summaryFenceCornerEl = document.getElementById('summary-fence-corner');
    
    if (postHeightEl && postSizeEl && sideHeightEl && sideLengthEl && summaryFenceCornerEl) {
      const postHeight = postHeightEl.value;
      const postSize = postSizeEl.value;
      const sideHeight = sideHeightEl.value;
      const sideLength = sideLengthEl.value;
      const decorativeSize = 100; // –§—ñ–∫—Å–æ–≤–∞–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
      
      summaryFenceCornerEl.textContent = 
        `–°—Ç–æ–≤–ø: ${postHeight}√ó${postSize}√ó${postSize}${unitText}, –ü–∞–Ω–µ–ª—å: ${sideHeight}√ó${sideLength}${unitText}, –î–µ–∫–æ—Ä: ${decorativeSize}${unitText}`;
    }
  } else {
    const summaryFenceCornerEl = document.getElementById('summary-fence-corner');
    if (summaryFenceCornerEl) {
      summaryFenceCornerEl.textContent = '--';
    }
  }
  
  // –ü–µ—Ä–∏–º–µ—Ç—Ä–∞–ª—å–Ω–∞ –æ–≥–æ—Ä–æ–∂–∞
  if (addedElements.fence_perimeter) {
    const postHeightEl = document.getElementById('fence-perimeter-post-height');
    const postSizeEl = document.getElementById('fence-perimeter-post-size');
    const northCountEl = document.getElementById('fence-perimeter-north-count');
    const southCountEl = document.getElementById('fence-perimeter-south-count');
    const eastWestCountEl = document.getElementById('fence-perimeter-east-west-count');
    const summaryFencePerimeterEl = document.getElementById('summary-fence-perimeter');
    
    if (postHeightEl && postSizeEl && northCountEl && southCountEl && eastWestCountEl && summaryFencePerimeterEl) {
      const postHeight = postHeightEl.value;
      const postSize = postSizeEl.value;
      const northCount = northCountEl.value;
      const southCount = southCountEl.value;
      const eastWestCount = eastWestCountEl.value;
      const decorativeHeight = 100; // –§—ñ–∫—Å–æ–≤–∞–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
      const decorativeThickness = 100; // –§—ñ–∫—Å–æ–≤–∞–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
      
      summaryFencePerimeterEl.textContent = 
        `–°—Ç–æ–≤–ø: ${postHeight}√ó${postSize}√ó${postSize}${unitText}, –°—Ç–æ—Ä–æ–Ω–∏: –ó${northCount} –í${southCount} –ë${eastWestCount}, –î–µ–∫–æ—Ä: ${decorativeHeight}√ó${decorativeThickness}${unitText}`;
    }
  } else {
    const summaryFencePerimeterEl = document.getElementById('summary-fence-perimeter');
    if (summaryFencePerimeterEl) {
      summaryFencePerimeterEl.textContent = '--';
    }
  }
  
  // –î–µ–∫–æ—Ä –æ–≥–æ—Ä–æ–∂—ñ
  const summaryFenceDecor = document.getElementById('summary-fence-decor');
  if (summaryFenceDecor) {
    if (addedElements.fence_decor && carouselState.fence_decor && modelLists.fence_decor) {
      const fenceDecorFilename = modelLists.fence_decor[carouselState.fence_decor.index];
      summaryFenceDecor.textContent = 
        fenceDecorFilename ? fenceDecorFilename.replace('.skp', '') : '--';
    } else {
      summaryFenceDecor.textContent = '--';
    }
  }
  
  // –ü—ñ–¥—Å—Ç–∞–≤–∫–∞
  const summaryStands = document.getElementById('summary-stands');
  if (summaryStands) {
    if (addedElements.stands) {
      const heightEl = document.getElementById('stands-height');
      const widthEl = document.getElementById('stands-width');
      const depthEl = document.getElementById('stands-depth');
      
      if (heightEl && widthEl && depthEl) {
        const height = heightEl.value;
        const width = widthEl.value;
        const depth = depthEl.value;
        summaryStands.textContent = `${height}√ó${width}√ó${depth} ${unitText}`;
      } else {
        summaryStands.textContent = '–î–æ–¥–∞–Ω–æ';
      }
    } else {
      summaryStands.textContent = '--';
    }
  }
  } catch (error) {
    debugLog(` –ü–æ–º–∏–ª–∫–∞ –≤ updateSummaryTable(): ${error.message}`, 'error');
    debugLog(` Stack trace: ${error.stack}`, 'error');
  }
}

// ============================================================================
// üèóÔ∏è –ë–£–î–Ü–í–ï–õ–¨–ù–ò–ö–ò (SKETCHUP –Ü–ù–¢–ï–ì–†–ê–¶–Ü–Ø)
// ============================================================================
// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —á–µ—Ä–µ–∑ SketchUp API
// –í–°–Ü –§–£–ù–ö–¶–Ü–á –ó window.sketchup - –ù–ï –¢–û–†–ö–ê–¢–ò–°–Ø!

// --- –§–£–ù–î–ê–ú–ï–ù–¢ ---
// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç—É

/**
 * –°—Ç–≤–æ—Ä—é—î —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç –≤ SketchUp –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∑ UI
 * –ó–±–∏—Ä–∞—î —Ä–æ–∑–º—ñ—Ä–∏ –∑ –ø–æ–ª—ñ–≤ –≤–≤–æ–¥—É, –∫–æ–Ω–≤–µ—Ä—Ç—É—î –≤ –º–º —Ç–∞ –≤–∏–∫–ª–∏–∫–∞—î Ruby —Ñ—É–Ω–∫—Ü—ñ—é
 * @example
 * addFoundation(); // –°—Ç–≤–æ—Ä—é—î —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç –∑ –ø–æ—Ç–æ—á–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏ –∑ UI
 */
function addFoundation() {
  const depth = document.getElementById('foundation-depth').value;
  const width = document.getElementById('foundation-width').value;
  const height = document.getElementById('foundation-height').value;
  
  if (window.sketchup && window.sketchup.add_foundation) {
    try {
      const depthMm = convertToMm(depth);
      const widthMm = convertToMm(width);
      const heightMm = convertToMm(height);
      
      debugLog(` –î–æ–¥–∞—î–º–æ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç: ${depthMm}√ó${widthMm}√ó${heightMm} –º–º`, 'info');
      
      window.sketchup.add_foundation(depthMm, widthMm, heightMm);
      addedElements.foundation = true;
      updateSummaryTable();
      
      debugLog(` –§—É–Ω–¥–∞–º–µ–Ω—Ç –¥–æ–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ`, 'success');
    } catch (error) {
      debugLog(` –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç—É: ${error.message}`, 'error');
    }
  } else {
    debugLog(` window.sketchup.add_foundation –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π`, 'error');
  }
}

// --- –ü–õ–ò–¢–ö–ê ---
// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∏—Ç–∫–∏ —Ç–∞ –æ–±–ª–∏—Ü—é–≤–∞–Ω–Ω—è

// –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–ª–∏—Ç–∫–∏
function addTiles() {
  const mode = getSelectedTilingMode();
  debugLog(`üèóÔ∏è –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–ª–∏—Ç–∫–∏, —Ä–µ–∂–∏–º: ${mode}`, 'info');
  
  if (window.sketchup && window.sketchup.add_tiles) {
    try {
      if (mode === 'frame') {
        const thickness = getSelectedThickness();
        const borderWidth = document.getElementById('tile-border-width').value;
        const overhang = document.getElementById('tile-overhang').value;
        const seam = getSelectedSeam();
        
        debugLog(` –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ä–∞–º–∫–∏: —Ç–æ–≤—â–∏–Ω–∞=${thickness}, —à–∏—Ä–∏–Ω–∞=${borderWidth}, –≤–∏—Å—Ç—É–ø=${overhang}, —à–æ–≤=${seam}`, 'info');
        
        // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ –º–º
        const thicknessMm = convertToMm(thickness);
        const borderWidthMm = convertToMm(borderWidth);
        const overhangMm = convertToMm(overhang);
        const seamMm = convertToMm(seam, true); // –®–≤–∏ –∑–∞–≤–∂–¥–∏ –≤ –º–º
        
        debugLog(` –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤ –º–º: —Ç–æ–≤—â–∏–Ω–∞=${thicknessMm}, —à–∏—Ä–∏–Ω–∞=${borderWidthMm}, –≤–∏—Å—Ç—É–ø=${overhangMm}, —à–æ–≤=${seamMm}`, 'info');
        
        window.sketchup.add_tiles('frame', thicknessMm, borderWidthMm, overhangMm, seamMm);
      } else {
        const size = document.getElementById('modular-tile-size').value;
        const thickness = document.getElementById('modular-thickness').value;
        const seam = getSelectedSeam();
        const overhang = document.getElementById('modular-overhang').value;
        
        debugLog(` –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –º–æ–¥—É–ª—å–Ω–æ—ó: —Ä–æ–∑–º—ñ—Ä=${size}, —Ç–æ–≤—â–∏–Ω–∞=${thickness}, —à–æ–≤=${seam}, –≤–∏—Å—Ç—É–ø=${overhang}`, 'info');
        
        // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ –º–º
        const thicknessMm = convertToMm(thickness);
        const seamMm = convertToMm(seam, true); // –®–≤–∏ –∑–∞–≤–∂–¥–∏ –≤ –º–º
        const overhangMm = convertToMm(overhang);
        
        debugLog(` –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤ –º–º: —Ç–æ–≤—â–∏–Ω–∞=${thicknessMm}, —à–æ–≤=${seamMm}, –≤–∏—Å—Ç—É–ø=${overhangMm}`, 'info');
        
        window.sketchup.add_tiles('modular', size, thicknessMm, seamMm, overhangMm);
      }
      addedElements.tiling = true;
      updateSummaryTable();
      debugLog(` –ü–ª–∏—Ç–∫–∞ –¥–æ–¥–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ`, 'success');
    } catch (error) {
      debugLog(` –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –ø–ª–∏—Ç–∫–∏: ${error.message}`, 'error');
    }
  } else {
    debugLog(` window.sketchup.add_tiles –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π`, 'error');
  }
}

// –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±–ª–∏—Ü—é–≤–∞–Ω–Ω—è
function addSideCladding() {
  const thickness = document.getElementById('cladding-thickness').value;
  
  if (window.sketchup && window.sketchup.add_side_cladding) {
    const thicknessMm = convertToMm(thickness);
    
    debugLog(` –î–æ–¥–∞—î–º–æ –æ–±–ª–∏—Ü—é–≤–∞–Ω–Ω—è: —Ç–æ–≤—â–∏–Ω–∞=${thicknessMm}–º–º`, 'info');
    
    window.sketchup.add_side_cladding(thicknessMm);
    addedElements.cladding = true;
    updateSummaryTable();
    
    debugLog(` –û–±–ª–∏—Ü—é–≤–∞–Ω–Ω—è –¥–æ–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ`, 'success');
  } else {
    debugLog(` window.sketchup.add_side_cladding –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π`, 'error');
  }
}

// --- –û–ì–û–†–Ü–ñ–Ü ---
// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–≥–æ—Ä–æ–∂ (–∫—É—Ç–æ–≤—ñ, –ø–µ—Ä–∏–º–µ—Ç—Ä–∞–ª—å–Ω—ñ, –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ñ)

// –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫—É—Ç–æ–≤–æ—ó –æ–≥–æ—Ä–æ–∂—ñ
function addFenceCorner() {
  const postHeight = document.getElementById('fence-corner-post-height').value;
  const postSize = document.getElementById('fence-corner-post-size').value;
  const sideHeight = document.getElementById('fence-corner-side-height').value;
  const sideLength = document.getElementById('fence-corner-side-length').value;
  const sideThickness = document.getElementById('fence-corner-side-thickness').value;
  const decorativeSize = 100; // –§—ñ–∫—Å–æ–≤–∞–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
  
  if (window.sketchup && window.sketchup.add_fence_corner) {
    const postHeightMm = convertToMm(postHeight);
    const postSizeMm = convertToMm(postSize);
    const sideHeightMm = convertToMm(sideHeight);
    const sideLengthMm = convertToMm(sideLength);
    const sideThicknessMm = convertToMm(sideThickness);
    
    debugLog(` –î–æ–¥–∞—î–º–æ –∫—É—Ç–æ–≤—É –æ–≥–æ—Ä–æ–∂—É: —Å—Ç–æ–≤–ø=${postHeightMm}√ó${postSizeMm}–º–º`, 'info');
    
    window.sketchup.add_fence_corner(
      postHeightMm, 
      postSizeMm, 
      sideHeightMm, 
      sideLengthMm, 
      sideThicknessMm, 
      decorativeSize
    );
    addedElements.fence_corner = true;
    updateSummaryTable();
    
    debugLog(` –ö—É—Ç–æ–≤–∞ –æ–≥–æ—Ä–æ–∂–∞ –¥–æ–¥–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ`, 'success');
  } else {
    debugLog(` window.sketchup.add_fence_corner –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π`, 'error');
  }
}

// –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–µ—Ä–∏–º–µ—Ç—Ä–∞–ª—å–Ω–æ—ó –æ–≥–æ—Ä–æ–∂—ñ
function addFencePerimeter() {
  const postHeight = document.getElementById('fence-perimeter-post-height').value;
  const postSize = document.getElementById('fence-perimeter-post-size').value;
  const northCount = document.getElementById('fence-perimeter-north-count').value;
  const southCount = document.getElementById('fence-perimeter-south-count').value;
  const eastWestCount = document.getElementById('fence-perimeter-east-west-count').value;
  const decorativeHeight = 100; // –§—ñ–∫—Å–æ–≤–∞–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
  const decorativeThickness = 100; // –§—ñ–∫—Å–æ–≤–∞–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
  
  if (window.sketchup && window.sketchup.add_fence_perimeter) {
    const postHeightMm = convertToMm(postHeight);
    const postSizeMm = convertToMm(postSize);
    
    debugLog(` –î–æ–¥–∞—î–º–æ –ø–µ—Ä–∏–º–µ—Ç—Ä–∞–ª—å–Ω—É –æ–≥–æ—Ä–æ–∂—É: —Å—Ç–æ–≤–ø–∏=${postHeightMm}√ó${postSizeMm}–º–º`, 'info');
    
    window.sketchup.add_fence_perimeter(
      postHeightMm, 
      postSizeMm, 
      parseInt(northCount), 
      parseInt(southCount), 
      parseInt(eastWestCount), 
      decorativeHeight, 
      decorativeThickness
    );
    addedElements.fence_perimeter = true;
    updateSummaryTable();
    
    debugLog(` –ü–µ—Ä–∏–º–µ—Ç—Ä–∞–ª—å–Ω–∞ –æ–≥–æ—Ä–æ–∂–∞ –¥–æ–¥–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ`, 'success');
  } else {
    debugLog(` window.sketchup.add_fence_perimeter –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π`, 'error');
  }
}

// –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–æ—ó –æ–≥–æ—Ä–æ–∂—ñ
function addFenceDecor() {
  if (window.sketchup && window.sketchup.add_fence_decor) {
    debugLog(` –î–æ–¥–∞—î–º–æ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—É –æ–≥–æ—Ä–æ–∂—É`, 'info');
    
    window.sketchup.add_fence_decor();
    addedElements.fence_decor = true;
    updateSummaryTable();
    
    debugLog(` –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–∞ –æ–≥–æ—Ä–æ–∂–∞ –¥–æ–¥–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ`, 'success');
  } else {
    debugLog(` window.sketchup.add_fence_decor –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π`, 'error');
  }
}

// --- –°–¢–ï–õ–ò ---
// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–µ–ª —Ç–∞ –ø—ñ–¥—Å—Ç–∞–≤–æ–∫

// –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø—ñ–¥—Å—Ç–∞–≤–∫–∏ –∑ –∫–∞—Å—Ç–æ–º–Ω–∏–º–∏ —Ä–æ–∑–º—ñ—Ä–∞–º–∏
function addStandWithCustomSize() {
  const height = document.getElementById('stands-height').value;
  const width = document.getElementById('stands-width').value;
  const depth = document.getElementById('stands-depth').value;
  
  if (window.sketchup && window.sketchup.add_stand_with_custom_size) {
    const heightMm = convertToMm(height);
    const widthMm = convertToMm(width);
    const depthMm = convertToMm(depth);
    
    debugLog(` –î–æ–¥–∞—î–º–æ –ø—ñ–¥—Å—Ç–∞–≤–∫—É: ${heightMm}√ó${widthMm}√ó${depthMm} –º–º`, 'info');
    
    window.sketchup.add_stand_with_custom_size(heightMm, widthMm, depthMm);
    addedElements.stands = true;
    updateSummaryTable();
    
    debugLog(` –ü—ñ–¥—Å—Ç–∞–≤–∫–∞ –¥–æ–¥–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ`, 'success');
  } else {
    debugLog(` window.sketchup.add_stand_with_custom_size –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π`, 'error');
  }
}

// --- –í–Ü–î–ú–û–°–¢–ö–ê ---
// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–º–æ—Å—Ç–∫–∏

/**
 * –°—Ç–≤–æ—Ä—é—î –≤—ñ–¥–º–æ—Å—Ç–∫—É –≤ SketchUp –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∑ UI
 * –ü—ñ–¥—Ç—Ä–∏–º—É—î –¥–≤–∞ —Ä–µ–∂–∏–º–∏: –æ–¥–Ω–∞–∫–æ–≤–∞ —à–∏—Ä–∏–Ω–∞ (uniform) —Ç–∞ —Ä—ñ–∑–Ω–∞ —à–∏—Ä–∏–Ω–∞ (custom)
 * @example
 * addBlindArea(); // –°—Ç–≤–æ—Ä—é—î –≤—ñ–¥–º–æ—Å—Ç–∫—É –∑ –ø–æ—Ç–æ—á–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏ –∑ UI
 */
function addBlindArea() {
  const thickness = document.getElementById('blind-area-thickness').value;
  const mode = getSelectedBlindAreaMode();
  
  if (mode === 'uniform') {
    const width = document.getElementById('blind-area-uniform-width').value;
    
    if (window.sketchup && window.sketchup.add_blind_area_uniform) {
      const thicknessMm = convertToMm(thickness);
      const widthMm = convertToMm(width);
      
      debugLog(` –î–æ–¥–∞—î–º–æ –≤—ñ–¥–º–æ—Å—Ç–∫—É (–æ–¥–Ω–∞–∫–æ–≤–∞ —à–∏—Ä–∏–Ω–∞): ${widthMm}–º–º, —Ç–æ–≤—â–∏–Ω–∞: ${thicknessMm}–º–º`, 'info');
      
      window.sketchup.add_blind_area_uniform(widthMm, thicknessMm);
      addedElements.blindArea = true;
      updateSummaryTable();
      
      debugLog(` –í—ñ–¥–º–æ—Å—Ç–∫–∞ –¥–æ–¥–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ`, 'success');
    } else {
      debugLog(` window.sketchup.add_blind_area_uniform –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π`, 'error');
    }
  } else {
    const north = document.getElementById('blind-area-north').value;
    const south = document.getElementById('blind-area-south').value;
    const east = document.getElementById('blind-area-east').value;
    const west = document.getElementById('blind-area-west').value;
    
    if (window.sketchup && window.sketchup.add_blind_area_custom) {
      const thicknessMm = convertToMm(thickness);
      const northMm = convertToMm(north);
      const southMm = convertToMm(south);
      const eastMm = convertToMm(east);
      const westMm = convertToMm(west);
      
      debugLog(` –î–æ–¥–∞—î–º–æ –≤—ñ–¥–º–æ—Å—Ç–∫—É (—Ä—ñ–∑–Ω–∞ —à–∏—Ä–∏–Ω–∞): –ü:${northMm}–º–º, –ü–¥:${southMm}–º–º, –°:${eastMm}–º–º, –ó:${westMm}–º–º, —Ç–æ–≤—â–∏–Ω–∞: ${thicknessMm}–º–º`, 'info');
      
      window.sketchup.add_blind_area_custom(northMm, southMm, eastMm, westMm, thicknessMm);
      addedElements.blindArea = true;
      updateSummaryTable();
      
      debugLog(` –í—ñ–¥–º–æ—Å—Ç–∫–∞ –¥–æ–¥–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ`, 'success');
    } else {
      debugLog(` window.sketchup.add_blind_area_custom –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π`, 'error');
    }
  }
}









// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∑ –º–æ–¥–µ–ª—ñ
function refreshSpecification() {
  debugLog(` –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∑ –º–æ–¥–µ–ª—ñ`, 'info');
  
  if (window.sketchup && window.sketchup.get_model_status) {
    // –í–∏–∫–ª–∏–∫–∞—î–º–æ Ruby callback –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É –º–æ–¥–µ–ª—ñ
    window.sketchup.get_model_status();
  } else {
    debugLog(` window.sketchup.get_model_status –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π`, 'error');
    // –Ø–∫—â–æ callback –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –ø—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞—î–º–æ —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—é
    clearSpecification();
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
function clearSpecification() {
  debugLog(`üßπ –û—á–∏—â–µ–Ω–Ω—è —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó`, 'info');
  
  // –°–∫–∏–¥–∞—î–º–æ –≤—Å—ñ –¥–æ–¥–∞–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
  Object.keys(addedElements).forEach(key => {
    addedElements[key] = false;
  });
  
  // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é
  updateSummaryTable();
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –º–æ–¥–µ–ª—ñ –∑ Ruby (callback)
function receiveModelStatus(statusData) {
  debugLog(`üì• –û—Ç—Ä–∏–º–∞–Ω–æ —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª—ñ: ${JSON.stringify(statusData)}`, 'info');
  
  // –û–Ω–æ–≤–ª—é—î–º–æ addedElements –Ω–∞ –æ—Å–Ω–æ–≤—ñ –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
  if (statusData) {
    // –û–Ω–æ–≤–ª—é—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç—ñ –µ–ª–µ–º–µ–Ω—Ç–∏, —è–∫—ñ –¥—ñ–π—Å–Ω–æ –∑–Ω–∞–π–¥–µ–Ω—ñ –≤ –º–æ–¥–µ–ª—ñ
    // –Ø–∫—â–æ –µ–ª–µ–º–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –≤ –º–æ–¥–µ–ª—ñ, –∑–∞–ª–∏—à–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
    if (statusData.foundation === true) {
      addedElements.foundation = true;
    }
    if (statusData.tiling === true) {
      addedElements.tiling = true;
    }
    if (statusData.cladding === true) {
      addedElements.cladding = true;
    }
    if (statusData.blindArea === true) {
      addedElements.blindArea = true;
    }
    if (statusData.stands === true) {
      addedElements.stands = true;
    }
    if (statusData.flowerbeds === true) {
      addedElements.flowerbeds = true;
    }
    if (statusData.gravestones === true) {
      addedElements.gravestones = true;
    }
    if (statusData.steles === true) {
      addedElements.steles = true;
    }
    if (statusData.fence_corner === true) {
      addedElements.fence_corner = true;
    }
    if (statusData.fence_perimeter === true) {
      addedElements.fence_perimeter = true;
    }
    if (statusData.fence_decor === true) {
      addedElements.fence_decor = true;
    }
    
    debugLog(`üìä –û–Ω–æ–≤–ª–µ–Ω–∏–π addedElements: ${JSON.stringify(addedElements)}`, 'info');
  } else {
    debugLog(` –î–∞–Ω—ñ —Å—Ç–∞—Ç—É—Å—É –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω—ñ`, 'error');
  }
  
  // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é
  updateSummaryTable();
  debugLog(` –°–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–∞`, 'success');
}

// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–º–æ—Å—Ç–∫–∏

// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –æ–¥–∏–Ω–∏—Ü—è–º–∏ –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è
function changeUnit(newUnit) {
  debugLog(` –ó–º—ñ–Ω–∞ –æ–¥–∏–Ω–∏—Ü—ñ –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è: ${currentUnit} -> ${newUnit}`, 'info');
  
  if (currentUnit === newUnit) {
    debugLog(`‚ÑπÔ∏è –û–¥–∏–Ω–∏—Ü—è –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${newUnit}`, 'info');
    return;
  }
  
  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞—Ä—ñ –∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∞ –æ–¥–∏–Ω–∏—Ü—é
  const oldValues = getAllInputValues();
  const oldUnit = currentUnit;
  
  // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω—É –æ–¥–∏–Ω–∏—Ü—é
  currentUnit = newUnit;
  
  // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤—Å—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
  convertAllValues(oldValues, oldUnit, newUnit);
  
  // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
  updateUnitLabels();
  updateThicknessButtons();
  updateSeamButtons();
  
  // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–º—ñ–Ω—É –≤ Ruby
  if (window.sketchup && window.sketchup.change_unit) {
    window.sketchup.change_unit(newUnit);
  }
  
  debugLog(` –û–¥–∏–Ω–∏—Ü—è –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è –∑–º—ñ–Ω–µ–Ω–∞ –Ω–∞: ${newUnit}`, 'success');
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–µ–π–±–ª—ñ–≤ –æ–¥–∏–Ω–∏—Ü—å –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è
function updateUnitLabels() {
  const unitSuffix = currentUnit === 'mm' ? '–º–º' : '—Å–º';
  
  // –õ–µ–π–±–ª–∏ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç—É
  updateLabelText('foundation-depth-label', `–î–æ–≤–∂–∏–Ω–∞ (${unitSuffix})`);
  updateLabelText('foundation-width-label', `–®–∏—Ä–∏–Ω–∞ (${unitSuffix})`);
  updateLabelText('foundation-height-label', `–í–∏—Å–æ—Ç–∞ (${unitSuffix})`);
  
  // –õ–µ–π–±–ª–∏ –≤—ñ–¥–º–æ—Å—Ç–∫–∏
  updateLabelText('blind-area-thickness-label', `–¢–æ–≤—â–∏–Ω–∞ (${unitSuffix})`);
  updateLabelText('blind-area-uniform-width-label', `–®–∏—Ä–∏–Ω–∞ (${unitSuffix})`);
  updateLabelText('blind-area-north-label', `–ü—ñ–≤–Ω—ñ—á–Ω–∞ —Å—Ç–æ—Ä–æ–Ω–∞ (${unitSuffix})`);
  updateLabelText('blind-area-south-label', `–ü—ñ–≤–¥–µ–Ω–Ω–∞ —Å—Ç–æ—Ä–æ–Ω–∞ (${unitSuffix})`);
  updateLabelText('blind-area-east-label', `–°—Ö—ñ–¥–Ω–∞ —Å—Ç–æ—Ä–æ–Ω–∞ (${unitSuffix})`);
  updateLabelText('blind-area-west-label', `–ó–∞—Ö—ñ–¥–Ω–∞ —Å—Ç–æ—Ä–æ–Ω–∞ (${unitSuffix})`);
  
  // –õ–µ–π–±–ª–∏ –ø–ª–∏—Ç–∫–∏
  updateLabelText('tile-border-width-label', `–®–∏—Ä–∏–Ω–∞ —Ä–∞–º–∫–∏ (${unitSuffix})`);
  updateLabelText('tile-overhang-label', `–í–∏—Å—Ç—É–ø (${unitSuffix})`);
  updateLabelText('modular-thickness-label', `–¢–æ–≤—â–∏–Ω–∞ (${unitSuffix})`);
  updateLabelText('modular-overhang-label', `–í–∏—Å—Ç—É–ø (${unitSuffix})`);
  
  // –õ–µ–π–±–ª–∏ –æ–±–ª–∏—Ü—é–≤–∞–Ω–Ω—è
  updateLabelText('cladding-thickness-label', `–¢–æ–≤—â–∏–Ω–∞ (${unitSuffix})`);
  
  // –õ–µ–π–±–ª–∏ –ø—ñ–¥—Å—Ç–∞–≤–∫–∏
  updateLabelText('stands-depth-label', `–î–æ–≤–∂–∏–Ω–∞ (${unitSuffix})`);
  updateLabelText('stands-width-label', `–®–∏—Ä–∏–Ω–∞ (${unitSuffix})`);
  updateLabelText('stands-height-label', `–í–∏—Å–æ—Ç–∞ (${unitSuffix})`);
  updateLabelText('gaps-depth-label', `–î–æ–≤–∂–∏–Ω–∞ –ø—Ä–æ–º—ñ–∂–∫–∏ (${unitSuffix})`);
  updateLabelText('gaps-width-label', `–®–∏—Ä–∏–Ω–∞ –ø—Ä–æ–º—ñ–∂–∫–∏ (${unitSuffix})`);
  updateLabelText('gaps-height-label', `–í–∏—Å–æ—Ç–∞ –ø—Ä–æ–º—ñ–∂–∫–∏ (${unitSuffix})`);
  
  // –õ–µ–π–±–ª–∏ —Å—Ç–µ–ª–∏
  updateLabelText('stele-distance-label', `–í—ñ–¥—Å—Ç–∞–Ω—å –º—ñ–∂ —Å—Ç–µ–ª–∞–º–∏ (${unitSuffix})`);
  updateLabelText('stele-width-label', `–®–∏—Ä–∏–Ω–∞ —Å—Ç–µ–ª–∏ (${unitSuffix})`);
  updateLabelText('stele-height-label', `–í–∏—Å–æ—Ç–∞ —Å—Ç–µ–ª–∏ (${unitSuffix})`);
  updateLabelText('stele-depth-label', `–ì–ª–∏–±–∏–Ω–∞ —Å—Ç–µ–ª–∏ (${unitSuffix})`);
  updateLabelText('central-detail-width-label', `–®–∏—Ä–∏–Ω–∞ (${unitSuffix})`);
  updateLabelText('central-detail-depth-label', `–¢–æ–≤—â–∏–Ω–∞ (${unitSuffix})`);
  updateLabelText('central-detail-height-label', `–í–∏—Å–æ—Ç–∞ (${unitSuffix})`);
  
  // –õ–µ–π–±–ª–∏ –æ–≥–æ—Ä–æ–∂—ñ
  updateLabelText('fence-corner-post-height-label', `–í–∏—Å–æ—Ç–∞ —Å—Ç–æ–≤–ø–∞ (${unitSuffix})`);
  updateLabelText('fence-corner-post-size-label', `–†–æ–∑–º—ñ—Ä —Å—Ç–æ–≤–ø–∞ (${unitSuffix})`);
  updateLabelText('fence-corner-side-height-label', `–í–∏—Å–æ—Ç–∞ –ø–∞–Ω–µ–ª—ñ (${unitSuffix})`);
  updateLabelText('fence-corner-side-length-label', `–î–æ–≤–∂–∏–Ω–∞ –ø–∞–Ω–µ–ª—ñ (${unitSuffix})`);
  updateLabelText('fence-corner-side-thickness-label', `–¢–æ–≤—â–∏–Ω–∞ –ø–∞–Ω–µ–ª—ñ (${unitSuffix})`);
  updateLabelText('fence-perimeter-post-height-label', `–í–∏—Å–æ—Ç–∞ —Å—Ç–æ–≤–ø–∞ (${unitSuffix})`);
  updateLabelText('fence-perimeter-post-size-label', `–†–æ–∑–º—ñ—Ä —Å—Ç–æ–≤–ø–∞ (${unitSuffix})`);
  
  debugLog(`–õ–µ–π–±–ª–∏ –æ–¥–∏–Ω–∏—Ü—å –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: ${unitSuffix}`, 'info');
}

// –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –ª–µ–π–±–ª–∞
function updateLabelText(labelId, newText) {
  const label = document.getElementById(labelId);
  if (label) {
    label.textContent = newText;
  }
}

// ============================================================================
// üîß –£–¢–ò–õ–Ü–¢–ò
// ============================================================================
// –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –¥–∞–Ω–∏–º–∏ —Ç–∞ –æ–¥–∏–Ω–∏—Ü—è–º–∏ –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è

// --- –ó–ë–Ü–† –î–ê–ù–ò–• ---
// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∑–±–æ—Ä—É –∑–Ω–∞—á–µ–Ω—å –∑ UI

/**
 * –ó–±–∏—Ä–∞—î –≤—Å—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ UI –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —É —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–æ–º—É –≤–∏–≥–ª—è–¥—ñ
 * @returns {Object} –û–±'—î–∫—Ç –∑ —É—Å—ñ–º–∞ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏ –∑ —Ñ–æ—Ä–º–∏, –∑–≥—Ä—É–ø–æ–≤–∞–Ω–∏–º–∏ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏
 * @example
 * const values = getAllInputValues();
 * console.log(values.foundation.depth); // –ó–Ω–∞—á–µ–Ω–Ω—è –≥–ª–∏–±–∏–Ω–∏ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç—É
 * console.log(values.tiles.thickness); // –í–∏–±—Ä–∞–Ω–∞ —Ç–æ–≤—â–∏–Ω–∞ –ø–ª–∏—Ç–∫–∏
 */
function getAllInputValues() {
  return {
    foundation: {
      depth: document.getElementById('foundation-depth').value,
      width: document.getElementById('foundation-width').value,
      height: document.getElementById('foundation-height').value
    },
    blindArea: {
      thickness: document.getElementById('blind-area-thickness').value,
      uniformWidth: document.getElementById('blind-area-uniform-width').value,
      north: document.getElementById('blind-area-north').value,
      south: document.getElementById('blind-area-south').value,
      east: document.getElementById('blind-area-east').value,
      west: document.getElementById('blind-area-west').value
    },
    tiles: {
      thickness: getSelectedThickness(),
      borderWidth: document.getElementById('tile-border-width').value,
      overhang: document.getElementById('tile-overhang').value,
      modularThickness: document.getElementById('modular-thickness').value,
      modularSeam: getSelectedSeam(),
      modularOverhang: document.getElementById('modular-overhang').value
    },
    cladding: {
      thickness: document.getElementById('cladding-thickness').value
    },
    stands: {
      height: document.getElementById('stands-height').value,
      width: document.getElementById('stands-width').value,
      depth: document.getElementById('stands-depth').value
    },
    gaps: {
      height: document.getElementById('gaps-height').value,
      width: document.getElementById('gaps-width').value,
      depth: document.getElementById('gaps-depth').value
    },
    steleDistance: document.getElementById('stele-distance').value,
    centralDetail: {
      width: document.getElementById('central-detail-width').value,
      depth: document.getElementById('central-detail-depth').value,
      height: document.getElementById('central-detail-height').value
    },
    steleScaling: {
      width: document.getElementById('stele-width') ? document.getElementById('stele-width').value : null,
      height: document.getElementById('stele-height') ? document.getElementById('stele-height').value : null,
      depth: document.getElementById('stele-depth') ? document.getElementById('stele-depth').value : null
    },
    fenceCorner: {
      postHeight: document.getElementById('fence-corner-post-height').value,
      postSize: document.getElementById('fence-corner-post-size').value,
      sideHeight: document.getElementById('fence-corner-side-height').value,
      sideLength: document.getElementById('fence-corner-side-length').value,
      sideThickness: document.getElementById('fence-corner-side-thickness').value,
      decorativeSize: 100 // –§—ñ–∫—Å–æ–≤–∞–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
    },
    fencePerimeter: {
      postHeight: document.getElementById('fence-perimeter-post-height').value,
      postSize: document.getElementById('fence-perimeter-post-size').value,
      northCount: document.getElementById('fence-perimeter-north-count').value,
      southCount: document.getElementById('fence-perimeter-south-count').value,
      eastWestCount: document.getElementById('fence-perimeter-east-west-count').value,
      decorativeHeight: 100, // –§—ñ–∫—Å–æ–≤–∞–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
      decorativeThickness: 100 // –§—ñ–∫—Å–æ–≤–∞–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
    }
  };
}

// --- –ö–û–ù–í–ï–†–¢–ê–¶–Ü–Ø –û–î–ò–ù–ò–¶–¨ ---
// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –º—ñ–∂ –º–º/—Å–º

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç—É—î –≤—Å—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –æ–¥–Ω—ñ—î—ó –æ–¥–∏–Ω–∏—Ü—ñ –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è –≤ —ñ–Ω—à—É
 * @param {Object} oldValues - –û–±'—î–∫—Ç –∑—ñ —Å—Ç–∞—Ä–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏ (—Ä–µ–∑—É–ª—å—Ç–∞—Ç getAllInputValues())
 * @param {string} oldUnit - –°—Ç–∞—Ä–∞ –æ–¥–∏–Ω–∏—Ü—è –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è ('mm' –∞–±–æ 'cm')
 * @param {string} newUnit - –ù–æ–≤–∞ –æ–¥–∏–Ω–∏—Ü—è –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è ('mm' –∞–±–æ 'cm')
 * @example
 * const values = getAllInputValues();
 * convertAllValues(values, 'mm', 'cm'); // –ö–æ–Ω–≤–µ—Ä—Ç—É—î –≤—Å—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –º–º –≤ —Å–º
 */
function convertAllValues(oldValues, oldUnit, newUnit) {
  // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç—É
  if (oldValues.foundation) {
    document.getElementById('foundation-depth').value = convertValue(oldValues.foundation.depth, oldUnit, newUnit);
    document.getElementById('foundation-width').value = convertValue(oldValues.foundation.width, oldUnit, newUnit);
    document.getElementById('foundation-height').value = convertValue(oldValues.foundation.height, oldUnit, newUnit);
  }
  
  // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –≤—ñ–¥–º–æ—Å—Ç–∫–∏
  if (oldValues.blindArea) {
    document.getElementById('blind-area-thickness').value = convertValue(oldValues.blindArea.thickness, oldUnit, newUnit);
    document.getElementById('blind-area-uniform-width').value = convertValue(oldValues.blindArea.uniformWidth, oldUnit, newUnit);
    document.getElementById('blind-area-north').value = convertValue(oldValues.blindArea.north, oldUnit, newUnit);
    document.getElementById('blind-area-south').value = convertValue(oldValues.blindArea.south, oldUnit, newUnit);
    document.getElementById('blind-area-east').value = convertValue(oldValues.blindArea.east, oldUnit, newUnit);
    document.getElementById('blind-area-west').value = convertValue(oldValues.blindArea.west, oldUnit, newUnit);
  }
  
  // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–∏—Ç–∫–∏
  if (oldValues.tiles) {
    // –û–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫–∏ —Ç–æ–≤—â–∏–Ω–∏
    updateThicknessButtons();
    // –û–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫–∏ —à–≤—É (—à–≤–∏ –∑–∞–≤–∂–¥–∏ –≤ –º–º)
    updateSeamButtons();
    document.getElementById('tile-border-width').value = convertValue(oldValues.tiles.borderWidth, oldUnit, newUnit);
    document.getElementById('tile-overhang').value = convertValue(oldValues.tiles.overhang, oldUnit, newUnit);
    document.getElementById('modular-thickness').value = convertValue(oldValues.tiles.modularThickness, oldUnit, newUnit);
    document.getElementById('modular-overhang').value = convertValue(oldValues.tiles.modularOverhang, oldUnit, newUnit);
    // –®–≤–∏ –Ω–µ –∫–æ–Ω–≤–µ—Ä—Ç—É—é—Ç—å—Å—è - –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –≤ –º–º
  }
  
  // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –æ–±–ª–∏—Ü—é–≤–∞–Ω–Ω—è
  if (oldValues.cladding) {
    document.getElementById('cladding-thickness').value = convertValue(oldValues.cladding.thickness, oldUnit, newUnit);
  }
  
  // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –ø—ñ–¥—Å—Ç–∞–≤–æ–∫
  if (oldValues.stands) {
    document.getElementById('stands-height').value = convertValue(oldValues.stands.height, oldUnit, newUnit);
    document.getElementById('stands-width').value = convertValue(oldValues.stands.width, oldUnit, newUnit);
    document.getElementById('stands-depth').value = convertValue(oldValues.stands.depth, oldUnit, newUnit);
  }
  
  // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞–∑–æ—Ä—ñ–≤
  if (oldValues.gaps) {
    document.getElementById('gaps-height').value = convertValue(oldValues.gaps.height, oldUnit, newUnit);
    document.getElementById('gaps-width').value = convertValue(oldValues.gaps.width, oldUnit, newUnit);
    document.getElementById('gaps-depth').value = convertValue(oldValues.gaps.depth, oldUnit, newUnit);
  }
  
  // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤—ñ–¥—Å—Ç–∞–Ω—å –º—ñ–∂ —Å—Ç–µ–ª–∞–º–∏
  if (oldValues.steleDistance) {
    document.getElementById('stele-distance').value = convertValue(oldValues.steleDistance, oldUnit, newUnit);
  }
  
  // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É –¥–µ—Ç–∞–ª—å
  if (oldValues.centralDetail) {
    document.getElementById('central-detail-width').value = convertValue(oldValues.centralDetail.width, oldUnit, newUnit);
    document.getElementById('central-detail-depth').value = convertValue(oldValues.centralDetail.depth, oldUnit, newUnit);
    document.getElementById('central-detail-height').value = convertValue(oldValues.centralDetail.height, oldUnit, newUnit);
  }
  
  // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è —Å—Ç–µ–ª
  if (oldValues.steleScaling) {
    if (oldValues.steleScaling.width && document.getElementById('stele-width')) {
    document.getElementById('stele-width').value = convertValue(oldValues.steleScaling.width, oldUnit, newUnit);
    }
    if (oldValues.steleScaling.height && document.getElementById('stele-height')) {
    document.getElementById('stele-height').value = convertValue(oldValues.steleScaling.height, oldUnit, newUnit);
    }
    if (oldValues.steleScaling.depth && document.getElementById('stele-depth')) {
    document.getElementById('stele-depth').value = convertValue(oldValues.steleScaling.depth, oldUnit, newUnit);
    }
  }
  
  // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –æ–≥–æ—Ä–æ–∂—ñ
  if (oldValues.fenceCorner) {
    document.getElementById('fence-corner-post-height').value = convertValue(oldValues.fenceCorner.postHeight, oldUnit, newUnit);
    document.getElementById('fence-corner-post-size').value = convertValue(oldValues.fenceCorner.postSize, oldUnit, newUnit);
    document.getElementById('fence-corner-side-height').value = convertValue(oldValues.fenceCorner.sideHeight, oldUnit, newUnit);
    document.getElementById('fence-corner-side-length').value = convertValue(oldValues.fenceCorner.sideLength, oldUnit, newUnit);
    document.getElementById('fence-corner-side-thickness').value = convertValue(oldValues.fenceCorner.sideThickness, oldUnit, newUnit);
  }
  
  if (oldValues.fencePerimeter) {
    document.getElementById('fence-perimeter-post-height').value = convertValue(oldValues.fencePerimeter.postHeight, oldUnit, newUnit);
    document.getElementById('fence-perimeter-post-size').value = convertValue(oldValues.fencePerimeter.postSize, oldUnit, newUnit);
  }
}

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –æ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è
function convertValue(value, oldUnit, newUnit, isSeam = false) {
  const numValue = parseFloat(value);
  if (isNaN(numValue)) return value;
  
  // –®–≤–∏ –∑–∞–≤–∂–¥–∏ –≤ –º–º, –Ω–µ –∫–æ–Ω–≤–µ—Ä—Ç—É—é—Ç—å—Å—è
  if (isSeam) return numValue;
  
  if (oldUnit === newUnit) return numValue;
  
  if (oldUnit === 'mm' && newUnit === 'cm') {
    return Math.round(numValue / 10 * 100) / 100; // –û–∫—Ä—É–≥–ª—é—î–º–æ –¥–æ 2 –∑–Ω–∞–∫—ñ–≤ –ø—ñ—Å–ª—è –∫–æ–º–∏
  } else if (oldUnit === 'cm' && newUnit === 'mm') {
    return Math.round(numValue * 10);
  }
  
  return numValue;
}

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –æ–¥–∏–Ω–∏—Ü—ñ –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è
function getCurrentUnit() {
  return currentUnit || 'mm';
}

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –º–º –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ Ruby
function convertToMm(value, isSeam = false) {
  const numValue = parseFloat(value);
  if (isNaN(numValue)) {
    debugLog(`convertToMm: –Ω–µ–≤–∞–ª—ñ–¥–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è "${value}"`, 'warn');
    return value;
  }
  
  // –®–≤–∏ –∑–∞–≤–∂–¥–∏ –≤–∂–µ –≤ –º–º, –Ω–µ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó
  if (isSeam) {
    debugLog(`convertToMm: —à–æ–≤ "${value}" ‚Üí ${numValue} –º–º (–±–µ–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó)`, 'info');
    return numValue;
  }
  
  if (currentUnit === 'mm') {
    debugLog(`convertToMm: "${value}" –º–º ‚Üí ${numValue} –º–º (–±–µ–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó)`, 'info');
    return numValue;
  } else if (currentUnit === 'cm') {
    const result = Math.round(numValue * 10);
    debugLog(`convertToMm: "${value}" —Å–º ‚Üí ${numValue} √ó 10 = ${result} –º–º`, 'info');
    return result;
  }
  
  debugLog(`convertToMm: –Ω–µ–≤—ñ–¥–æ–º–∞ –æ–¥–∏–Ω–∏—Ü—è "${currentUnit}", –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ ${numValue}`, 'warn');
  return numValue;
}

// --- –§–û–†–ú–ê–¢–£–í–ê–ù–ù–Ø ---
// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å

// –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
// –í–∞–ª—ñ–¥–∞—Ü—ñ—è —á–∏—Å–ª–æ–≤–∏—Ö –∑–Ω–∞—á–µ–Ω—å
function validateNumericInput(value, min = 0, max = 10000, allowDecimals = true) {
  if (value === null || value === undefined || value === '') {
    return { valid: false, error: '–ó–Ω–∞—á–µ–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º' };
  }
  
  const numValue = parseFloat(value);
  if (isNaN(numValue)) {
    return { valid: false, error: '–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ' };
  }
  
  if (numValue < min) {
    return { valid: false, error: `–ó–Ω–∞—á–µ–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –º–µ–Ω—à–µ ${min}` };
  }
  
  if (numValue > max) {
    return { valid: false, error: `–ó–Ω–∞—á–µ–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –±—ñ–ª—å—à–µ ${max}` };
  }
  
  if (!allowDecimals && numValue % 1 !== 0) {
    return { valid: false, error: '–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–ª–µ —á–∏—Å–ª–æ' };
  }
  
  return { valid: true, value: numValue };
}

function formatValue(value, unit = null) {
  try {
    const u = unit || currentUnit;
    const numValue = parseFloat(value);
    if (isNaN(numValue)) return value;
    
    if (u === 'mm') {
      return `${Math.round(numValue)}–º–º`;
    } else if (u === 'cm') {
      return `${numValue.toFixed(0)}—Å–º`; // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –¥–µ—Å—è—Ç–∫–æ–≤—ñ –∑–Ω–∞–∫–∏ –¥–ª—è —Å–º
    }
  } catch (error) {
    debugLog(`–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è: ${error.message}`, 'error');
    return value;
  }
  
  return value;
}

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –º–º –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ Ruby
function convertToMm(value, isSeam = false) {
  const numValue = parseFloat(value);
  if (isNaN(numValue)) {
    debugLog(`convertToMm: –Ω–µ–≤–∞–ª—ñ–¥–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è "${value}"`, 'warn');
    return value;
  }
  
  // –®–≤–∏ –∑–∞–≤–∂–¥–∏ –≤–∂–µ –≤ –º–º, –Ω–µ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó
  if (isSeam) {
    debugLog(`convertToMm: —à–æ–≤ "${value}" ‚Üí ${numValue} –º–º (–±–µ–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó)`, 'info');
    return numValue;
  }
  
  if (currentUnit === 'mm') {
    debugLog(`convertToMm: "${value}" –º–º ‚Üí ${numValue} –º–º (–±–µ–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó)`, 'info');
    return numValue;
  } else if (currentUnit === 'cm') {
    const result = Math.round(numValue * 10);
    debugLog(`convertToMm: "${value}" —Å–º ‚Üí ${numValue} √ó 10 = ${result} –º–º`, 'info');
    return result;
  }
  
  debugLog(`convertToMm: –Ω–µ–≤—ñ–¥–æ–º–∞ –æ–¥–∏–Ω–∏—Ü—è "${currentUnit}", –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ ${numValue}`, 'warn');
  return numValue;
}



// ============================================================================
// üéõÔ∏è UI –ö–û–ù–¢–†–û–õ–ò
// ============================================================================
// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ UI –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ (–∫–Ω–æ–ø–∫–∏, —Å–µ–ª–µ–∫—Ç–æ—Ä–∏, —Ç–æ—â–æ)

// --- –ö–û–ù–¢–†–û–õ–ò –¢–û–í–©–ò–ù–ò ---
// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–∏–±–æ—Ä—É —Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–≤—â–∏–Ω–∏ –ø–ª–∏—Ç–∫–∏

/**
 * –û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä —Ç–æ–≤—â–∏–Ω–∏ –ø–ª–∏—Ç–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
 * @param {HTMLElement} button - –ö–Ω–æ–ø–∫–∞, —è–∫—É –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
 * @example
 * selectThickness(document.querySelector('.thickness-btn[data-value="20"]'));
 */
function selectThickness(button) {
  // –í–∏–¥–∞–ª—è—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–ª–∞—Å –∑ —É—Å—ñ—Ö –∫–Ω–æ–ø–æ–∫
  const buttons = document.querySelectorAll('.thickness-btn');
  buttons.forEach(btn => btn.classList.remove('active'));
  
  // –î–æ–¥–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–ª–∞—Å –¥–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ—ó –∫–Ω–æ–ø–∫–∏
  button.classList.add('active');
  
  // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
  // updateAllDisplays() –≤–∏–¥–∞–ª–µ–Ω–æ - —Ñ—É–Ω–∫—Ü—ñ—è –Ω–µ —ñ—Å–Ω—É—î
  
  debugLog(` –í–∏–±—Ä–∞–Ω–æ —Ç–æ–≤—â–∏–Ω—É –ø–ª–∏—Ç–∫–∏: ${button.dataset.value}`, 'success');
}

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–æ—ó —Ç–æ–≤—â–∏–Ω–∏
function getSelectedThickness() {
  const activeButton = document.querySelector('.thickness-btn.active');
  if (activeButton) {
    return activeButton.dataset.value;
  }
  return '20'; // –ó–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ —Ç–æ–≤—â–∏–Ω–∏
function updateThicknessButtons() {
  const buttons = document.querySelectorAll('.thickness-btn');
  buttons.forEach(button => {
    const originalValue = button.dataset.originalValue || button.dataset.value;
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –º–º –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –≤–∏–∫–ª–∏–∫—É
    if (!button.dataset.originalValue) {
      button.dataset.originalValue = button.dataset.value;
    }
    
    if (currentUnit === 'mm') {
      button.textContent = `${originalValue} –º–º`;
      button.dataset.value = originalValue;
    } else {
      const cmValue = (originalValue / 10).toFixed(0); // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –¥–µ—Å—è—Ç–∫–æ–≤—ñ –∑–Ω–∞–∫–∏ –¥–ª—è —Å–º
      button.textContent = `${cmValue} —Å–º`;
      button.dataset.value = cmValue;
    }
  });
}

// --- –ö–û–ù–¢–†–û–õ–ò –ü–õ–ò–¢–ö–ò ---
// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–∏–±–æ—Ä—É —Å–ø–æ—Å–æ–±—É —É–∫–ª–∞–¥–∞–Ω–Ω—è –ø–ª–∏—Ç–∫–∏

// –í–∏–±—ñ—Ä —Å–ø–æ—Å–æ–±—É —É–∫–ª–∞–¥–∞–Ω–Ω—è –ø–ª–∏—Ç–∫–∏
function selectTilingMode(button) {
  // –í–∏–¥–∞–ª—è—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–ª–∞—Å –∑ —É—Å—ñ—Ö –∫–Ω–æ–ø–æ–∫
  const buttons = document.querySelectorAll('.tiling-mode-btn');
  buttons.forEach(btn => btn.classList.remove('active'));
  
  // –î–æ–¥–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–ª–∞—Å –¥–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ—ó –∫–Ω–æ–ø–∫–∏
  button.classList.add('active');
  
  // –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏
  updateTilingControls();
  
  debugLog(` –í–∏–±—Ä–∞–Ω–æ —Å–ø–æ—Å—ñ–± —É–∫–ª–∞–¥–∞–Ω–Ω—è: ${button.dataset.value}`, 'success');
}

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±—É —É–∫–ª–∞–¥–∞–Ω–Ω—è
function getSelectedTilingMode() {
  const activeButton = document.querySelector('.tiling-mode-btn.active');
  if (activeButton) {
    return activeButton.dataset.value;
  }
  return 'standard'; // –ó–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
}

// --- –ö–û–ù–¢–†–û–õ–ò –®–í–Ü–í ---
// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–∏–±–æ—Ä—É —Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —à–≤—ñ–≤

// –í–∏–±—ñ—Ä —à–≤—É
function selectSeam(button) {
  // –í–∏–¥–∞–ª—è—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–ª–∞—Å –∑ —É—Å—ñ—Ö –∫–Ω–æ–ø–æ–∫
  const buttons = document.querySelectorAll('.seam-btn');
  buttons.forEach(btn => btn.classList.remove('active'));
  
  // –î–æ–¥–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–ª–∞—Å –¥–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ—ó –∫–Ω–æ–ø–∫–∏
  button.classList.add('active');
  
  // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
  // updateAllDisplays() –≤–∏–¥–∞–ª–µ–Ω–æ - —Ñ—É–Ω–∫—Ü—ñ—è –Ω–µ —ñ—Å–Ω—É—î
  
  debugLog(` –í–∏–±—Ä–∞–Ω–æ —à–æ–≤: ${button.dataset.value} –º–º`, 'success');
}

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ —à–≤—É
function getSelectedSeam() {
  const activeButton = document.querySelector('.seam-btn.active');
  if (activeButton) {
    return activeButton.dataset.value;
  }
  return '3'; // –ó–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ —à–≤—ñ–≤
function updateSeamButtons() {
  const buttons = document.querySelectorAll('.seam-btn');
  buttons.forEach(btn => {
    const value = parseFloat(btn.dataset.value);
    btn.textContent = `${value}–º–º`; // –®–≤–∏ –∑–∞–≤–∂–¥–∏ –≤ –º–º
  });
}

// --- –ö–û–ù–¢–†–û–õ–ò –°–¢–ï–õ ---
// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–∏–±–æ—Ä—É —Ç–∏–ø—É —Å—Ç–µ–ª (–¥—É–±–ª—ñ–∫–∞—Ç –≤–∏–¥–∞–ª–µ–Ω–æ)

// --- –ö–û–ù–¢–†–û–õ–ò –í–Ü–î–ú–û–°–¢–ö–ò ---
// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–∏–±–æ—Ä—É —Ä–µ–∂–∏–º—É –≤—ñ–¥–º–æ—Å—Ç–∫–∏

// –ü–µ—Ä–µ–º–∏–∫–∞—á —Ä–µ–∂–∏–º—É –≤—ñ–¥–º–æ—Å—Ç–∫–∏
function toggleBlindAreaCustomMode(checkbox) {
  const customControls = document.getElementById('blind-area-custom-controls');
  const uniformControls = document.getElementById('blind-area-uniform-controls');
  
  if (checkbox.checked) {
    // –í–º–∏–∫–∞—î–º–æ —Ä–µ–∂–∏–º —Ä—ñ–∑–Ω–æ—ó —à–∏—Ä–∏–Ω–∏
    customControls.classList.remove('hidden');
    uniformControls.classList.add('hidden');
    debugLog(' –£–≤—ñ–º–∫–Ω–µ–Ω–æ —Ä–µ–∂–∏–º —Ä—ñ–∑–Ω–æ—ó —à–∏—Ä–∏–Ω–∏ –≤—ñ–¥–º–æ—Å—Ç–∫–∏', 'info');
  } else {
    // –í–∏–º—ñ–∫–∞—î–º–æ —Ä–µ–∂–∏–º —Ä—ñ–∑–Ω–æ—ó —à–∏—Ä–∏–Ω–∏ (–æ–¥–Ω–∞–∫–æ–≤–∞ —à–∏—Ä–∏–Ω–∞)
    customControls.classList.add('hidden');
    uniformControls.classList.remove('hidden');
    debugLog(' –£–≤—ñ–º–∫–Ω–µ–Ω–æ —Ä–µ–∂–∏–º –æ–¥–Ω–∞–∫–æ–≤–æ—ó —à–∏—Ä–∏–Ω–∏ –≤—ñ–¥–º–æ—Å—Ç–∫–∏', 'info');
  }
  
  // –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏ –≤—ñ–¥–º–æ—Å—Ç–∫–∏
  updateBlindAreaControls();
}

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É –≤—ñ–¥–º–æ—Å—Ç–∫–∏
function getSelectedBlindAreaMode() {
  const customModeCheckbox = document.getElementById('blind-area-custom-mode');
  if (customModeCheckbox && customModeCheckbox.checked) {
    return 'custom';
  }
  return 'uniform'; // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –æ–¥–Ω–∞–∫–æ–≤–∞ —à–∏—Ä–∏–Ω–∞
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–±–æ—Ä—É —Ç–æ–≤—â–∏–Ω–∏ –ø–ª–∏—Ç–∫–∏
function selectThickness(button) {
  // –í–∏–¥–∞–ª—è—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–ª–∞—Å –∑ —É—Å—ñ—Ö –∫–Ω–æ–ø–æ–∫
  const buttons = document.querySelectorAll('.thickness-btn');
  buttons.forEach(btn => btn.classList.remove('active'));
  
  // –î–æ–¥–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–ª–∞—Å –¥–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ—ó –∫–Ω–æ–ø–∫–∏
  button.classList.add('active');
  
  // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
  // updateAllDisplays() –≤–∏–¥–∞–ª–µ–Ω–æ - —Ñ—É–Ω–∫—Ü—ñ—è –Ω–µ —ñ—Å–Ω—É—î
  
  debugLog(` –í–∏–±—Ä–∞–Ω–æ —Ç–æ–≤—â–∏–Ω—É –ø–ª–∏—Ç–∫–∏: ${button.dataset.value}`, 'success');
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–±–æ—Ä—É —Å–ø–æ—Å–æ–±—É —É–∫–ª–∞–¥–∞–Ω–Ω—è
function selectTilingMode(button) {
  // –í–∏–¥–∞–ª—è—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–ª–∞—Å –∑ —É—Å—ñ—Ö –∫–Ω–æ–ø–æ–∫
  const buttons = document.querySelectorAll('.tiling-mode-btn');
  buttons.forEach(btn => btn.classList.remove('active'));
  
  // –î–æ–¥–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–ª–∞—Å –¥–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ—ó –∫–Ω–æ–ø–∫–∏
  button.classList.add('active');
  
  // –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏
  updateTilingControls();
  
  debugLog(` –í–∏–±—Ä–∞–Ω–æ —Å–ø–æ—Å—ñ–± —É–∫–ª–∞–¥–∞–Ω–Ω—è: ${button.dataset.value}`, 'success');
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–±–æ—Ä—É —à–≤—É
function selectSeam(button) {
  // –í–∏–¥–∞–ª—è—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–ª–∞—Å –∑ —É—Å—ñ—Ö –∫–Ω–æ–ø–æ–∫
  const buttons = document.querySelectorAll('.seam-btn');
  buttons.forEach(btn => btn.classList.remove('active'));
  
  // –î–æ–¥–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–ª–∞—Å –¥–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ—ó –∫–Ω–æ–ø–∫–∏
  button.classList.add('active');
  
  // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
  // updateAllDisplays() –≤–∏–¥–∞–ª–µ–Ω–æ - —Ñ—É–Ω–∫—Ü—ñ—è –Ω–µ —ñ—Å–Ω—É—î
  
  debugLog(` –í–∏–±—Ä–∞–Ω–æ —à–æ–≤: ${button.dataset.value} –º–º`, 'success');
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–æ—ó —Ç–æ–≤—â–∏–Ω–∏ –ø–ª–∏—Ç–∫–∏
function getSelectedThickness() {
  const activeButton = document.querySelector('.thickness-btn.active');
  if (!activeButton) return '30';
  
  // –Ø–∫—â–æ –æ–¥–∏–Ω–∏—Ü—ñ –≤ —Å–º, —Ç–æ data-value –º—ñ—Å—Ç–∏—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è –≤ —Å–º
  if (currentUnit === 'cm') {
    return activeButton.dataset.value;
  } else {
    // –Ø–∫—â–æ –æ–¥–∏–Ω–∏—Ü—ñ –≤ –º–º, —Ç–æ data-value –º—ñ—Å—Ç–∏—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –º–º
    return activeButton.dataset.value;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±—É —É–∫–ª–∞–¥–∞–Ω–Ω—è
function getSelectedTilingMode() {
  const activeButton = document.querySelector('.tiling-mode-btn.active');
  return activeButton ? activeButton.dataset.value : 'modular';
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ —à–≤—É
function getSelectedSeam() {
  const activeButton = document.querySelector('.seam-btn.active');
  if (!activeButton) return '2';
  
  // –®–≤–∏ –∑–∞–≤–∂–¥–∏ –ø–æ–≤–µ—Ä—Ç–∞—é—Ç—å—Å—è –≤ –º–º, –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –ø–æ—Ç–æ—á–Ω–∏—Ö –æ–¥–∏–Ω–∏—Ü—å
  return activeButton.dataset.value;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∫–Ω–æ–ø–æ–∫ —Ç–æ–≤—â–∏–Ω–∏ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –æ–¥–∏–Ω–∏—Ü—å

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∫–Ω–æ–ø–æ–∫ —à–≤—É –ø—Ä–∏ –∑–º—ñ–Ω—ñ –æ–¥–∏–Ω–∏—Ü—å
// –î—É–±–ª—ñ–∫–∞—Ç —Ñ—É–Ω–∫—Ü—ñ—ó updateSeamButtons –≤–∏–¥–∞–ª–µ–Ω–æ

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è –æ–ø—Ü—ñ–π —Ç–æ–≤—â–∏–Ω–∏ –ø–ª–∏—Ç–∫–∏ –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –∑–Ω–∞—á–µ–Ω—å (–¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)
function resetTileThicknessOptions() {
  debugLog(` –§—É–Ω–∫—Ü—ñ—è resetTileThicknessOptions –∑–∞—Å—Ç–∞—Ä—ñ–ª–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏`, 'warning');
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è —Å–ª–∞–π–¥–µ—Ä–∞



// ========== MISSING FUNCTIONS ==========

// –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ
// currentTheme —Ç–∞ currentAccent –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ modules/core/GlobalState.js



// ============================================================================
// üé® –¢–ï–ú–ê
// ============================================================================
// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è —Ç–µ–º–∏ —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É

function toggleTheme() {
  currentTheme = currentTheme === 'light' ? 'dark' : 'light';
  document.documentElement.classList.toggle('dark', currentTheme === 'dark');
  localStorage.setItem('theme', currentTheme);

  // Update header text to show current theme
  const header = document.querySelector('header h1');
  if (header) {
    header.textContent = 'ProGran';
  }


}


function initializeTheme() {
  const savedTheme = localStorage.getItem('theme') || 'light';
  const savedAccent = localStorage.getItem('accent') || 'blue';

  currentTheme = savedTheme;
  currentAccent = savedAccent;

  document.documentElement.classList.toggle('dark', currentTheme === 'dark');
  document.documentElement.setAttribute('data-accent', currentAccent);

  // Set initial header text
  const header = document.querySelector('header h1');
  if (header) {
    header.textContent = 'ProGran';
  }
}







// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–µ–º–∏ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
// –í–ò–î–ê–õ–ï–ù–û - —Ç–µ–ø–µ—Ä —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –≤ index.js

// ========== GRAVESTONES CAROUSEL FUNCTIONS ==========

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–∞—Ä—É—Å–µ–ª—ñ –Ω–∞–¥–≥—Ä–æ–±–Ω–∏—Ö –ø–ª–∏—Ç –∑ –ø—Ä–µ–≤—å—é




// –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ –¥–µ–∫–æ—Ä—É –æ–≥–æ—Ä–æ–∂—ñ –¥–æ –º–æ–¥–µ–ª—ñ

// --- FENCE –§–£–ù–ö–¶–Ü–á ---

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫—É—Ç–æ–≤–æ—ó –æ–≥–æ—Ä–æ–∂—ñ
function updateFenceCornerDisplay() {
  const postHeight = document.getElementById('fence-corner-post-height').value;
  const postSize = document.getElementById('fence-corner-post-size').value;
  const sideHeight = document.getElementById('fence-corner-side-height').value;
  const sideLength = document.getElementById('fence-corner-side-length').value;
  const sideThickness = document.getElementById('fence-corner-side-thickness').value;
  const decorativeSize = 100; // –§—ñ–∫—Å–æ–≤–∞–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
  
  const display = document.getElementById('fence-corner-dimensions-display');
  if (display) {
    const unit = getCurrentUnit();
    const unitText = unit === 'cm' ? '—Å–º' : '–º–º';
    
    // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    const postHeightDisplay = unit === 'cm' ? (postHeight / 10).toFixed(0) : postHeight;
    const postSizeDisplay = unit === 'cm' ? (postSize / 10).toFixed(0) : postSize;
    const sideHeightDisplay = unit === 'cm' ? (sideHeight / 10).toFixed(0) : sideHeight;
    const sideLengthDisplay = unit === 'cm' ? (sideLength / 10).toFixed(0) : sideLength;
    const sideThicknessDisplay = unit === 'cm' ? (sideThickness / 10).toFixed(0) : sideThickness;
    const decorativeSizeDisplay = unit === 'cm' ? (decorativeSize / 10).toFixed(0) : decorativeSize;
    
    const dimensions = [
      `–°—Ç–æ–≤–ø: ${postHeightDisplay}√ó${postSizeDisplay}√ó${postSizeDisplay}${unitText}`,
      `–ü–∞–Ω–µ–ª—å: ${sideLengthDisplay}√ó${sideHeightDisplay}√ó${sideThicknessDisplay}${unitText}`,
      `–î–µ–∫–æ—Ä: ${decorativeSizeDisplay}${unitText}`
    ];
    
    display.textContent = dimensions.join(' | ');
  }
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—ñ–≤ –ø—ñ–¥—Å—Ç–∞–≤–∫–∏
// toggleDebugLog –≤–∏–Ω–µ—Å–µ–Ω–æ –≤ modules/core/DebugManager.js


function updateStandsDisplay() {
  const height = document.getElementById('stands-height').value;
  const width = document.getElementById('stands-width').value;
  const depth = document.getElementById('stands-depth').value;
  
  debugLog(` updateStandsDisplay: –æ—Ç—Ä–∏–º–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–Ω—è`, 'info');
  debugLog(`   - –í–∏—Å–æ—Ç–∞: ${height}`, 'info');
  debugLog(`   - –®–∏—Ä–∏–Ω–∞: ${width}`, 'info');
  debugLog(`   - –î–æ–≤–∂–∏–Ω–∞: ${depth}`, 'info');
  
  const display = document.getElementById('stands-dimensions-display');
  if (display) {
    const unit = getCurrentUnit();
    const unitText = unit === 'cm' ? '—Å–º' : '–º–º';
    
    // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    const heightDisplay = unit === 'cm' ? (height / 10).toFixed(0) : height;
    const widthDisplay = unit === 'cm' ? (width / 10).toFixed(0) : width;
    const depthDisplay = unit === 'cm' ? (depth / 10).toFixed(0) : depth;
    
    const displayText = `${heightDisplay}√ó${widthDisplay}√ó${depthDisplay} ${unitText}`;
    display.textContent = displayText;
    
    debugLog(` –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ: ${displayText}`, 'info');
  } else {
    debugLog(` –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –µ–ª–µ–º–µ–Ω—Ç stands-dimensions-display`, 'warning');
  }
  
  // –Ø–∫—â–æ –ø—Ä–æ–º—ñ–∂–Ω–∞ —É–≤—ñ–º–∫–Ω–µ–Ω–∞, –æ–Ω–æ–≤–ª—é—î–º–æ —ó—ó —Ä–æ–∑–º—ñ—Ä–∏
  const gapsCheckbox = document.getElementById('stands-gaps');
  if (gapsCheckbox && gapsCheckbox.checked) {
    updateGapsFromStandDimensions();
  }
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–µ—Ä–∏–º–µ—Ç—Ä–∞–ª—å–Ω–æ—ó –æ–≥–æ—Ä–æ–∂—ñ
function updateFencePerimeterDisplay() {
  const postHeight = document.getElementById('fence-perimeter-post-height').value;
  const postSize = document.getElementById('fence-perimeter-post-size').value;
  const northCount = document.getElementById('fence-perimeter-north-count').value;
  const southCount = document.getElementById('fence-perimeter-south-count').value;
  const eastWestCount = document.getElementById('fence-perimeter-east-west-count').value;
  const decorativeHeight = 100; // –§—ñ–∫—Å–æ–≤–∞–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
  const decorativeThickness = 100; // –§—ñ–∫—Å–æ–≤–∞–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
  
  const display = document.getElementById('fence-perimeter-dimensions-display');
  if (display) {
    const unit = getCurrentUnit();
    const unitText = unit === 'cm' ? '—Å–º' : '–º–º';
    
    // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    const postHeightDisplay = unit === 'cm' ? (postHeight / 10).toFixed(0) : postHeight;
    const postSizeDisplay = unit === 'cm' ? (postSize / 10).toFixed(0) : postSize;
    const decorativeHeightDisplay = unit === 'cm' ? (decorativeHeight / 10).toFixed(0) : decorativeHeight;
    const decorativeThicknessDisplay = unit === 'cm' ? (decorativeThickness / 10).toFixed(0) : decorativeThickness;
    
    const dimensions = [
      `–°—Ç–æ–≤–ø–∏: ${postHeightDisplay}√ó${postSizeDisplay}√ó${postSizeDisplay}${unitText}`,
      `–°—Ç–æ—Ä–æ–Ω–∏: –ó${northCount} –í${southCount} –ë${eastWestCount}`,
      `–î–µ–∫–æ—Ä: ${decorativeHeightDisplay}√ó${decorativeThicknessDisplay}${unitText}`
    ];
    
    display.textContent = dimensions.join(' | ');
  }
}

// –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫—É—Ç–æ–≤–æ—ó –æ–≥–æ—Ä–æ–∂—ñ
function addFenceCorner() {
  try {
    const postHeight = parseInt(document.getElementById('fence-corner-post-height').value);
    const postSize = parseInt(document.getElementById('fence-corner-post-size').value);
    const sideHeight = parseInt(document.getElementById('fence-corner-side-height').value);
    const sideLength = parseInt(document.getElementById('fence-corner-side-length').value);
    const sideThickness = parseInt(document.getElementById('fence-corner-side-thickness').value);
    const decorativeSize = 100; // –§—ñ–∫—Å–æ–≤–∞–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
    
    // –î–µ–∫–æ—Ä —Ç–µ–ø–µ—Ä –¥–æ–¥–∞—î—Ç—å—Å—è –æ–∫—Ä–µ–º–æ —á–µ—Ä–µ–∑ –±–ª–æ–∫ "–î–µ–∫–æ—Ä –æ–≥–æ—Ä–æ–∂—ñ"
    
    debugLog(`üèóÔ∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫—É—Ç–æ–≤–æ—ó –æ–≥–æ—Ä–æ–∂—ñ: ${postHeight}√ó${postSize}√ó${postSize}—Å–º`, 'info');
    debugLog(` –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Ñ—É–Ω–∫—Ü—ñ–π:`, 'info');
    debugLog(`   - window.sketchup: ${typeof window.sketchup}`, 'info');
    debugLog(`   - window.sketchup?.add_fence_corner: ${typeof window.sketchup?.add_fence_corner}`, 'info');
    
    if (window.sketchup && window.sketchup.add_fence_corner) {
      try {
        debugLog(`üìû –í–∏–∫–ª–∏–∫ window.sketchup.add_fence_corner –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:`, 'info');
        debugLog(`   - postHeight: ${postHeight}`, 'info');
        debugLog(`   - postSize: ${postSize}`, 'info');
        debugLog(`   - sideHeight: ${sideHeight}`, 'info');
        debugLog(`   - sideLength: ${sideLength}`, 'info');
        debugLog(`   - sideThickness: ${sideThickness}`, 'info');
        debugLog(`   - decorativeSize: ${decorativeSize} (—Ñ—ñ–∫—Å–æ–≤–∞–Ω–µ)`, 'info');
        
        // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ –º–º –ø–µ—Ä–µ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é –≤ Ruby
        const postHeightMm = convertToMm(postHeight);
        const postSizeMm = convertToMm(postSize);
        const sideHeightMm = convertToMm(sideHeight);
        const sideLengthMm = convertToMm(sideLength);
        const sideThicknessMm = convertToMm(sideThickness);
        const decorativeSizeMm = convertToMm(decorativeSize);
        
        const result = window.sketchup.add_fence_corner(postHeightMm, postSizeMm, postSizeMm, sideHeightMm, sideLengthMm, sideThicknessMm, decorativeSizeMm);
        debugLog(`üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫–ª–∏–∫—É: ${result}`, 'info');
        
        // –î–µ–∫–æ—Ä —Ç–µ–ø–µ—Ä –¥–æ–¥–∞—î—Ç—å—Å—è –æ–∫—Ä–µ–º–æ —á–µ—Ä–µ–∑ –±–ª–æ–∫ "–î–µ–∫–æ—Ä –æ–≥–æ—Ä–æ–∂—ñ"
        
        addedElements['fence_corner'] = true;
        updateSummaryTable();
        debugLog(` –ö—É—Ç–æ–≤–∞ –æ–≥–æ—Ä–æ–∂–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ`, 'success');
      } catch (error) {
        debugLog(` –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫—É—Ç–æ–≤–æ—ó –æ–≥–æ—Ä–æ–∂—ñ: ${error.message}`, 'error');
        debugLog(` Stack trace: ${error.stack}`, 'error');
      }
    } else {
      debugLog(` window.sketchup.add_fence_corner –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π`, 'error');
      debugLog(` –î–æ—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –≤ window.sketchup:`, 'info');
      if (window.sketchup) {
        Object.keys(window.sketchup).forEach(key => {
          if (key.includes('fence') || key.includes('Fence')) {
            debugLog(`   - ${key}: ${typeof window.sketchup[key]}`, 'info');
          }
        });
      }
    }
  } catch (error) {
    debugLog(` –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ addFenceCorner: ${error.message}`, 'error');
    debugLog(` Stack trace: ${error.stack}`, 'error');
  }
}

// –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–µ—Ä–∏–º–µ—Ç—Ä–∞–ª—å–Ω–æ—ó –æ–≥–æ—Ä–æ–∂—ñ
function addFencePerimeter() {
  console.log(' addFencePerimeter() –≤–∏–∫–ª–∏–∫–∞–Ω–æ!');
  debugLog(' addFencePerimeter() –≤–∏–∫–ª–∏–∫–∞–Ω–æ!', 'info');
  
  try {
    const postHeight = parseInt(document.getElementById('fence-perimeter-post-height').value);
    const postSize = parseInt(document.getElementById('fence-perimeter-post-size').value);
    const northCount = parseInt(document.getElementById('fence-perimeter-north-count').value);
    const southCount = parseInt(document.getElementById('fence-perimeter-south-count').value);
    const eastWestCount = parseInt(document.getElementById('fence-perimeter-east-west-count').value);
    const decorativeHeight = 100; // –§—ñ–∫—Å–æ–≤–∞–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
    const decorativeThickness = 100; // –§—ñ–∫—Å–æ–≤–∞–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
    
    // –î–µ–∫–æ—Ä —Ç–µ–ø–µ—Ä –¥–æ–¥–∞—î—Ç—å—Å—è –æ–∫—Ä–µ–º–æ —á–µ—Ä–µ–∑ –±–ª–æ–∫ "–î–µ–∫–æ—Ä –æ–≥–æ—Ä–æ–∂—ñ"
    
    debugLog(`üèóÔ∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–µ—Ä–∏–º–µ—Ç—Ä–∞–ª—å–Ω–æ—ó –æ–≥–æ—Ä–æ–∂—ñ: ${postHeight}√ó${postSize}√ó${postSize}—Å–º`, 'info');
    debugLog(` –î–µ—Ç–∞–ª—å–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤:`, 'info');
    debugLog(`   - postHeight: ${postHeight} (—Ç–∏–ø: ${typeof postHeight})`, 'info');
    debugLog(`   - postSize: ${postSize} (—Ç–∏–ø: ${typeof postSize})`, 'info');
    debugLog(`   - northCount: ${northCount} (—Ç–∏–ø: ${typeof northCount})`, 'info');
    debugLog(`   - southCount: ${southCount} (—Ç–∏–ø: ${typeof southCount})`, 'info');
    debugLog(`   - eastWestCount: ${eastWestCount} (—Ç–∏–ø: ${typeof eastWestCount})`, 'info');
    debugLog(`   - decorativeHeight: ${decorativeHeight} (—Ç–∏–ø: ${typeof decorativeHeight})`, 'info');
    debugLog(`   - decorativeThickness: ${decorativeThickness} (—Ç–∏–ø: ${typeof decorativeThickness})`, 'info');
    debugLog(` –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Ñ—É–Ω–∫—Ü—ñ–π:`, 'info');
    debugLog(`   - window.sketchup: ${typeof window.sketchup}`, 'info');
    debugLog(`   - window.sketchup?.add_fence_perimeter: ${typeof window.sketchup?.add_fence_perimeter}`, 'info');
    debugLog(` –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω addedElements:`, 'info');
    debugLog(`   - addedElements.fence_perimeter: ${addedElements.fence_perimeter}`, 'info');
    debugLog(`   - addedElements.fence_corner: ${addedElements.fence_corner}`, 'info');
    
    if (window.sketchup && window.sketchup.add_fence_perimeter) {
      try {
        debugLog(`üìû –í–∏–∫–ª–∏–∫ window.sketchup.add_fence_perimeter –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:`, 'info');
        debugLog(`   - postHeight: ${postHeight}`, 'info');
        debugLog(`   - postSize: ${postSize}`, 'info');
        debugLog(`   - northCount: ${northCount}`, 'info');
        debugLog(`   - southCount: ${southCount}`, 'info');
        debugLog(`   - eastWestCount: ${eastWestCount}`, 'info');
        debugLog(`   - decorativeHeight: ${decorativeHeight} (—Ñ—ñ–∫—Å–æ–≤–∞–Ω–µ)`, 'info');
        debugLog(`   - decorativeThickness: ${decorativeThickness} (—Ñ—ñ–∫—Å–æ–≤–∞–Ω–µ)`, 'info');
        
        // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ –º–º –ø–µ—Ä–µ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é –≤ Ruby
        const postHeightMm = convertToMm(postHeight);
        const postSizeMm = convertToMm(postSize);
        const decorativeHeightMm = convertToMm(decorativeHeight);
        const decorativeThicknessMm = convertToMm(decorativeThickness);
        
        const result = window.sketchup.add_fence_perimeter(postHeightMm, postSizeMm, postSizeMm, northCount, southCount, eastWestCount, decorativeHeightMm, decorativeThicknessMm);
        debugLog(`üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫–ª–∏–∫—É: ${result}`, 'info');
        
        // –î–µ–∫–æ—Ä —Ç–µ–ø–µ—Ä –¥–æ–¥–∞—î—Ç—å—Å—è –æ–∫—Ä–µ–º–æ —á–µ—Ä–µ–∑ –±–ª–æ–∫ "–î–µ–∫–æ—Ä –æ–≥–æ—Ä–æ–∂—ñ"
        
        addedElements['fence_perimeter'] = true;
        updateSummaryTable();
        debugLog(` –ü–µ—Ä–∏–º–µ—Ç—Ä–∞–ª—å–Ω–∞ –æ–≥–æ—Ä–æ–∂–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ`, 'success');
        debugLog(` –°—Ç–∞–Ω –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è:`, 'info');
        debugLog(`   - addedElements.fence_perimeter: ${addedElements.fence_perimeter}`, 'info');
        debugLog(`   - addedElements.fence_corner: ${addedElements.fence_corner}`, 'info');
      } catch (error) {
        debugLog(` –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–µ—Ä–∏–º–µ—Ç—Ä–∞–ª—å–Ω–æ—ó –æ–≥–æ—Ä–æ–∂—ñ: ${error.message}`, 'error');
        debugLog(` Stack trace: ${error.stack}`, 'error');
      }
    } else {
      debugLog(` window.sketchup.add_fence_perimeter –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π`, 'error');
      debugLog(` –î–æ—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –≤ window.sketchup:`, 'info');
      if (window.sketchup) {
        Object.keys(window.sketchup).forEach(key => {
          if (key.includes('fence') || key.includes('Fence')) {
            debugLog(`   - ${key}: ${typeof window.sketchup[key]}`, 'info');
          }
        });
      }
    }
  } catch (error) {
    debugLog(` –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ addFencePerimeter: ${error.message}`, 'error');
    debugLog(` Stack trace: ${error.stack}`, 'error');
  }
  
  console.log('üèÅ addFencePerimeter() –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  debugLog('üèÅ addFencePerimeter() –∑–∞–≤–µ—Ä—à–µ–Ω–æ!', 'info');
}

// –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–µ–∫–æ—Ä—É –æ–≥–æ—Ä–æ–∂—ñ
function addFenceDecor() {
  console.log(' addFenceDecor() –≤–∏–∫–ª–∏–∫–∞–Ω–æ!');
  debugLog(' addFenceDecor() –≤–∏–∫–ª–∏–∫–∞–Ω–æ!', 'info');
  
  try {
    debugLog(` –ö—Ä–æ–∫ 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–∞—Ä—É—Å–µ–ª—ñ –¥–µ–∫–æ—Ä—É`, 'info');
    
    // –û—Ç—Ä–∏–º—É—î–º–æ –≤–∏–±—Ä–∞–Ω–∏–π –¥–µ–∫–æ—Ä –∑ –∫–∞—Ä—É—Å–µ–ª—ñ
    let selectedDecor = null;
    debugLog(` –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞—Ä—É—Å–µ–ª—ñ –¥–µ–∫–æ—Ä—É:`, 'info');
    debugLog(`   - carouselState.fence_decor: ${JSON.stringify(carouselState.fence_decor)}`, 'info');
    debugLog(`   - modelLists.fence_decor: ${JSON.stringify(modelLists.fence_decor)}`, 'info');
    
    if (carouselState.fence_decor && modelLists.fence_decor && modelLists.fence_decor[carouselState.fence_decor.index]) {
      selectedDecor = modelLists.fence_decor[carouselState.fence_decor.index];
      debugLog(` –í–∏–±—Ä–∞–Ω–∏–π –¥–µ–∫–æ—Ä –¥–ª—è –æ–≥–æ—Ä–æ–∂—ñ: ${selectedDecor}`, 'info');
    } else {
      debugLog(` –î–µ–∫–æ—Ä –Ω–µ –≤–∏–±—Ä–∞–Ω–æ`, 'warning');
      alert('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –¥–µ–∫–æ—Ä –∑ –∫–∞—Ä—É—Å–µ–ª—ñ');
      return;
    }
    
    debugLog(` –ö—Ä–æ–∫ 2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –æ–≥–æ—Ä–æ–∂—ñ`, 'info');
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –æ–≥–æ—Ä–æ–∂–∞ –≤ –º–æ–¥–µ–ª—ñ
    if (!addedElements['fence_corner'] && !addedElements['fence_perimeter']) {
      debugLog(` –ù–µ–º–∞—î –æ–≥–æ—Ä–æ–∂—ñ –≤ –º–æ–¥–µ–ª—ñ`, 'warning');
      alert('–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –æ–≥–æ—Ä–æ–∂—É (–∫—É—Ç–æ–≤—É –∞–±–æ –ø–µ—Ä–∏–º–µ—Ç—Ä–∞–ª—å–Ω—É)');
      return;
    }
    
    debugLog(` –ö—Ä–æ–∫ 3: –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–µ–∫–æ—Ä—É —á–µ—Ä–µ–∑ SketchUp API`, 'info');
    
    // –î–æ–¥–∞—î–º–æ –¥–µ–∫–æ—Ä
    if (window.sketchup.add_model) {
      debugLog(` –î–æ–¥–∞—î–º–æ –¥–µ–∫–æ—Ä –Ω–∞ –≤—Å—ñ —Å—Ç–æ–≤–ø—á–∏–∫–∏ –æ–≥–æ—Ä–æ–∂—ñ: ${selectedDecor}`, 'info');
      debugLog(` –í–∏–∫–ª–∏–∫–∞—î–º–æ window.sketchup.add_model('fence_decor', '${selectedDecor}')`, 'info');
      const decorResult = window.sketchup.add_model('fence_decor', selectedDecor);
      debugLog(`üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–µ–∫–æ—Ä—É: ${decorResult}`, 'info');
      
      debugLog(` –ö—Ä–æ–∫ 4: –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É`, 'info');
      addedElements['fence_decor'] = true;
      
      debugLog(` –ö—Ä–æ–∫ 5: –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó`, 'info');
      updateSummaryTable();
      
      debugLog(` –î–µ–∫–æ—Ä —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –Ω–∞ –æ–≥–æ—Ä–æ–∂—É`, 'success');
    } else {
      debugLog(` window.sketchup.add_model –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π`, 'warning');
      alert('–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –¥–µ–∫–æ—Ä');
    }
    
  } catch (error) {
    debugLog(` –ü–æ–º–∏–ª–∫–∞ –≤ addFenceDecor(): ${error.message}`, 'error');
    debugLog(` Stack trace: ${error.stack}`, 'error');
    debugLog(` –ü–æ–º–∏–ª–∫–∞ –Ω–∞ —Ä—è–¥–∫—É: ${error.lineNumber}`, 'error');
    alert(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –¥–µ–∫–æ—Ä—É: ${error.message}`);
  }
  
  console.log('üèÅ addFenceDecor() –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  debugLog('üèÅ addFenceDecor() –∑–∞–≤–µ—Ä—à–µ–Ω–æ!', 'info');
}

// –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø—ñ–¥—Å—Ç–∞–≤–∫–∏ –∑ –∫–∞—Å—Ç–æ–º–Ω–∏–º–∏ —Ä–æ–∑–º—ñ—Ä–∞–º–∏
function addStandWithCustomSize() {
  console.log('üèóÔ∏è addStandWithCustomSize() –≤–∏–∫–ª–∏–∫–∞–Ω–æ!');
  debugLog('üèóÔ∏è addStandWithCustomSize() –≤–∏–∫–ª–∏–∫–∞–Ω–æ!', 'info');
  
  try {
    // –û—Ç—Ä–∏–º—É—î–º–æ —Ä–æ–∑–º—ñ—Ä–∏ –∑ –ø–æ–ª—ñ–≤ –≤–≤–æ–¥—É (–ø–æ—Ä—è–¥–æ–∫: –¥–æ–≤–∂–∏–Ω–∞, —à–∏—Ä–∏–Ω–∞, –≤–∏—Å–æ—Ç–∞)
    const depthRaw = parseInt(document.getElementById('stands-depth').value);  // –î–æ–≤–∂–∏–Ω–∞ (–ø–µ—Ä—à–µ –ø–æ–ª–µ)
    const widthRaw = parseInt(document.getElementById('stands-width').value);  // –®–∏—Ä–∏–Ω–∞ (–¥—Ä—É–≥–µ –ø–æ–ª–µ)
    const heightRaw = parseInt(document.getElementById('stands-height').value); // –í–∏—Å–æ—Ç–∞ (—Ç—Ä–µ—Ç—î –ø–æ–ª–µ)
    
    debugLog(` –û—Ç—Ä–∏–º–∞–Ω–æ —Ä–æ–∑–º—ñ—Ä–∏ –∑ –ø–æ–ª—ñ–≤:`, 'info');
    debugLog(`   - –í–∏—Å–æ—Ç–∞ (stands-height): ${heightRaw}`, 'info');
    debugLog(`   - –®–∏—Ä–∏–Ω–∞ (stands-width): ${widthRaw}`, 'info');
    debugLog(`   - –î–æ–≤–∂–∏–Ω–∞ (stands-depth): ${depthRaw}`, 'info');
    
    // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ –º—ñ–ª—ñ–º–µ—Ç—Ä–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ –¥–æ Ruby
    const height = convertToMm(heightRaw);
    const width = convertToMm(widthRaw);
    const depth = convertToMm(depthRaw);
    
    const currentUnit = getCurrentUnit();
    debugLog(` –ö–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ –≤ –º—ñ–ª—ñ–º–µ—Ç—Ä–∏ (${currentUnit} ‚Üí –º–º):`, 'info');
    debugLog(`   - –í–∏—Å–æ—Ç–∞: ${heightRaw} ${currentUnit} ‚Üí ${height} –º–º`, 'info');
    debugLog(`   - –®–∏—Ä–∏–Ω–∞: ${widthRaw} ${currentUnit} ‚Üí ${width} –º–º`, 'info');
    debugLog(`   - –î–æ–≤–∂–∏–Ω–∞: ${depthRaw} ${currentUnit} ‚Üí ${depth} –º–º`, 'info');
    debugLog(` –†–æ–∑–º—ñ—Ä–∏ –ø—ñ–¥—Å—Ç–∞–≤–∫–∏: ${height}√ó${width}√ó${depth} –º–º (–í√ó–®√ó–î)`, 'info');
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å —Ä–æ–∑–º—ñ—Ä—ñ–≤
    if (isNaN(height) || isNaN(width) || isNaN(depth) || height <= 0 || width <= 0 || depth <= 0) {
      debugLog(` –ù–µ–≤–∞–ª—ñ–¥–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏ –ø—ñ–¥—Å—Ç–∞–≤–∫–∏`, 'error');
      alert('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏ –ø—ñ–¥—Å—Ç–∞–≤–∫–∏');
      return;
    }
    
    // –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞–Ω –≤–º–∏–∫–∞—á–∞ –ø—Ä–æ–º—ñ–∂–Ω–æ—ó
    const gapsEnabled = carouselState.stands.gaps || false;
    debugLog(` –ü—Ä–æ–º—ñ–∂–Ω–∞ –ø—ñ–¥—Å—Ç–∞–≤–∫–∏: ${gapsEnabled ? '—É–≤—ñ–º–∫–Ω–µ–Ω–æ' : '–≤–∏–º–∫–Ω–µ–Ω–æ'}`, 'info');
    
    // –û—Ç—Ä–∏–º—É—î–º–æ —Ä–æ–∑–º—ñ—Ä–∏ –ø—Ä–æ–º—ñ–∂–Ω–æ—ó —è–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ
    let gapsHeight = 0, gapsWidth = 0, gapsDepth = 0;
    if (gapsEnabled) {
      const gapsDepthRaw = parseInt(document.getElementById('gaps-depth').value);
      const gapsWidthRaw = parseInt(document.getElementById('gaps-width').value);
      const gapsHeightRaw = parseInt(document.getElementById('gaps-height').value);
      
      gapsHeight = convertToMm(gapsHeightRaw);
      gapsWidth = convertToMm(gapsWidthRaw);
      gapsDepth = convertToMm(gapsDepthRaw);
      
      debugLog(` –†–æ–∑–º—ñ—Ä–∏ –ø—Ä–æ–º—ñ–∂–Ω–æ—ó: ${gapsHeight}√ó${gapsWidth}√ó${gapsDepth} –º–º (–í√ó–®√ó–î)`, 'info');
    }
    
    // –î–æ–¥–∞—î–º–æ –ø—ñ–¥—Å—Ç–∞–≤–∫—É —á–µ—Ä–µ–∑ SketchUp API
    if (window.sketchup.add_stand) {
      debugLog(`üèóÔ∏è –î–æ–¥–∞—î–º–æ –ø—ñ–¥—Å—Ç–∞–≤–∫—É –∑ —Ä–æ–∑–º—ñ—Ä–∞–º–∏: ${height}√ó${width}√ó${depth}`, 'info');
      // –ü–µ—Ä–µ–¥–∞—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤ –ø–æ—Ä—è–¥–∫—É: height, width, depth, gaps, gapsHeight, gapsWidth, gapsDepth
      const result = window.sketchup.add_stand(height, width, depth, gapsEnabled, gapsHeight, gapsWidth, gapsDepth);
      debugLog(`üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—ñ–¥—Å—Ç–∞–≤–∫–∏: ${result}`, 'info');
      
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ä–æ–∑–º—ñ—Ä–∏
      if (!window.standCustomSizes) {
        window.standCustomSizes = {};
      }
      window.standCustomSizes['stand_custom'] = { height, width, depth };
      
      addedElements['stands'] = {
        filename: 'stand_custom',
        height: height,
        width: width,
        depth: depth,
        gaps: gapsEnabled,
        gapsHeight: gapsHeight,
        gapsWidth: gapsWidth,
        gapsDepth: gapsDepth
      };
      updateSummaryTable();
      debugLog(` –ü—ñ–¥—Å—Ç–∞–≤–∫–∞ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∞`, 'success');
    } else {
      debugLog(` window.sketchup.add_stand –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π`, 'warning');
      alert('–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –ø—ñ–¥—Å—Ç–∞–≤–∫—É');
    }
    
  } catch (error) {
    debugLog(` –ü–æ–º–∏–ª–∫–∞ –≤ addStandWithCustomSize(): ${error.message}`, 'error');
    debugLog(` Stack trace: ${error.stack}`, 'error');
    alert(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –ø—ñ–¥—Å—Ç–∞–≤–∫–∏: ${error.message}`);
  }
  
  console.log('üèÅ addStandWithCustomSize() –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  debugLog('üèÅ addStandWithCustomSize() –∑–∞–≤–µ—Ä—à–µ–Ω–æ!', 'info');
}



// –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–∞—Ä—É—Å–µ–ª—ñ –ø—ñ–¥—Å—Ç–∞–≤–æ–∫

// --- –§–£–ù–ö–¶–Ü–á –î–õ–Ø –ü–†–ï–í–¨–Æ –ú–û–î–ï–õ–Ü ---

// –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è –ø—Ä–µ–≤—å—é
// currentPreviewData —Ç–∞ previewSettings –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ modules/core/GlobalState.js

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø—Ä–µ–≤—å—é
function updatePreviewSettings() {
  const sizeSelect = document.getElementById('preview-size');
  const qualitySelect = document.getElementById('preview-quality');
  
  if (sizeSelect) {
    previewSettings.size = parseInt(sizeSelect.value);
  }
  
  if (qualitySelect) {
    previewSettings.quality = qualitySelect.value;
  }
  
  debugLog(`–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–µ–≤—å—é –æ–Ω–æ–≤–ª–µ–Ω–æ: —Ä–æ–∑–º—ñ—Ä=${previewSettings.size}, —è–∫—ñ—Å—Ç—å=${previewSettings.quality}`, 'info');
}

// –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–µ–≤—å—é –º–æ–¥–µ–ª—ñ
function generateModelPreview() {
  debugLog('üé® –ü–æ—á–∞—Ç–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–µ–≤—å—é –º–æ–¥–µ–ª—ñ', 'info');
  
  // –û–Ω–æ–≤–ª—é—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
  updatePreviewSettings();
  
  // –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
  showPreviewStatus(true);
  
  // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø—Ä–µ–≤—å—é
  hidePreviewContainer();
  
  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å SketchUp API
    if (!window.sketchup || !window.sketchup.generate_model_preview) {
      throw new Error('SketchUp API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–µ–≤—å—é –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π');
    }
    
    debugLog(`üìê –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø—Ä–µ–≤—å—é: —Ä–æ–∑–º—ñ—Ä=${previewSettings.size}, —è–∫—ñ—Å—Ç—å=${previewSettings.quality}`, 'info');
    
    // –í–∏–∫–ª–∏–∫–∞—î–º–æ SketchUp API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–µ–≤—å—é
    const result = window.sketchup.generate_model_preview(previewSettings.size, previewSettings.quality);
    
    debugLog(`üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç callback: ${result} (—Ç–∏–ø: ${typeof result})`, 'info');
    
    // Callback —Ç–µ–ø–µ—Ä –ø–æ–≤–µ—Ä—Ç–∞—î 1 –∞–±–æ 0, –∞ –¥–∞–Ω—ñ –ø—Ä–∏—Ö–æ–¥—è—Ç—å —á–µ—Ä–µ–∑ execute_script
    if (result === 1) {
      debugLog('‚úÖ Callback —É—Å–ø—ñ—à–Ω–∏–π, –æ—á—ñ–∫—É—î–º–æ –¥–∞–Ω—ñ —á–µ—Ä–µ–∑ execute_script', 'success');
    } else if (result === 0) {
      throw new Error('Callback –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ–º–∏–ª–∫—É');
    } else {
      debugLog(`‚ö†Ô∏è Callback –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è: ${result}, –∞–ª–µ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ`, 'warn');
      // –ù–µ –∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É, –æ—Å–∫—ñ–ª—å–∫–∏ –ø—Ä–µ–≤—å—é –≤—Å–µ –æ–¥–Ω–æ –≥–µ–Ω–µ—Ä—É—î—Ç—å—Å—è
    }
    
  } catch (error) {
    debugLog(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–µ–≤—å—é: ${error.message}`, 'error');
    alert(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø—Ä–µ–≤—å—é: ${error.message}`);
    showPreviewStatus(false);
  }
}

// –û–±—Ä–æ–±–∫–∞ —É—Å–ø—ñ—à–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –ø—Ä–µ–≤—å—é (–≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∑ Ruby)
function receiveModelPreview(result) {
  debugLog('üì• –û—Ç—Ä–∏–º–∞–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–≤—å—é –∑ Ruby', 'info');
  debugLog(`üìä –î–∞–Ω—ñ: success=${result.success}, size=${result.size}, quality=${result.quality}`, 'info');
  
  try {
    if (result && result.success && result.data) {
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –ø—Ä–µ–≤—å—é
      currentPreviewData = {
        base64: result.data,
        size: result.size,
        quality: result.quality,
        generatedAt: result.generated_at || new Date().toISOString(),
        filename: `model_preview_${Date.now()}.png`
      };
      
      // –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–µ–≤—å—é
      showPreviewContainer();
      updatePreviewInfo();
      
      debugLog('‚úÖ –ü—Ä–µ–≤—å—é —É—Å–ø—ñ—à–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–æ', 'success');
    } else {
      throw new Error('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ –ø—Ä–µ–≤—å—é');
    }
  } catch (error) {
    debugLog(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø—Ä–µ–≤—å—é: ${error.message}`, 'error');
    alert(`–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø—Ä–µ–≤—å—é: ${error.message}`);
  } finally {
    // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
    showPreviewStatus(false);
  }
}

// –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–∫–∏ –ø—Ä–µ–≤—å—é (–≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∑ Ruby)
function handleModelPreviewError(errorMessage) {
  debugLog(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–µ–≤—å—é –∑ Ruby: ${errorMessage}`, 'error');
  alert(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø—Ä–µ–≤—å—é: ${errorMessage}`);
  showPreviewStatus(false);
}

// –ü–æ–∫–∞–∑/–ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
function showPreviewStatus(show) {
  const statusElement = document.getElementById('preview-status');
  if (statusElement) {
    statusElement.style.display = show ? 'block' : 'none';
  }
  
  // –ë–ª–æ–∫—É—î–º–æ/—Ä–æ–∑–±–ª–æ–∫—É—î–º–æ –∫–Ω–æ–ø–∫—É
  const button = document.getElementById('generate-preview-btn');
  if (button) {
    button.disabled = show;
    button.textContent = show ? '–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è...' : 'üì∑ –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–µ–≤—å—é';
  }
}

// –ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ø—Ä–µ–≤—å—é
function showPreviewContainer() {
  const container = document.getElementById('preview-container');
  if (container) {
    container.style.display = 'block';
    
    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    const img = document.getElementById('preview-image');
    if (img && currentPreviewData) {
      img.src = currentPreviewData.base64;
      img.alt = '–ü—Ä–µ–≤—å—é –º–æ–¥–µ–ª—ñ';
    }
  }
}

// –ü—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ø—Ä–µ–≤—å—é
function hidePreviewContainer() {
  const container = document.getElementById('preview-container');
  if (container) {
    container.style.display = 'none';
  }
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø—Ä–µ–≤—å—é
function updatePreviewInfo() {
  const infoElement = document.getElementById('preview-info-text');
  if (infoElement && currentPreviewData) {
    const size = currentPreviewData.size;
    const quality = currentPreviewData.quality;
    const date = new Date(currentPreviewData.generatedAt).toLocaleString();
    
    infoElement.textContent = `–†–æ–∑–º—ñ—Ä: ${size}√ó${size} –ø—ñ–∫—Å–µ–ª—ñ–≤ | –Ø–∫—ñ—Å—Ç—å: ${quality} | –°—Ç–≤–æ—Ä–µ–Ω–æ: ${date}`;
  }
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–µ–≤—å—é
function downloadPreview() {
  if (!currentPreviewData) {
    alert('–ù–µ–º–∞—î –ø—Ä–µ–≤—å—é –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è');
    return;
  }
  
  try {
    debugLog('üíæ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–µ–≤—å—é', 'info');
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    const link = document.createElement('a');
    link.href = currentPreviewData.base64;
    link.download = currentPreviewData.filename;
    
    // –î–æ–¥–∞—î–º–æ –¥–æ DOM, –∫–ª—ñ–∫–∞—î–º–æ —ñ –≤–∏–¥–∞–ª—è—î–º–æ
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    debugLog(`‚úÖ –ü—Ä–µ–≤—å—é –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: ${currentPreviewData.filename}`, 'success');
    
  } catch (error) {
    debugLog(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–µ–≤—å—é: ${error.message}`, 'error');
    alert(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –ø—Ä–µ–≤—å—é: ${error.message}`);
  }
}

// –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è –ø—Ä–µ–≤—å—é –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É
async function copyPreviewToClipboard() {
  if (!currentPreviewData) {
    alert('–ù–µ–º–∞—î –ø—Ä–µ–≤—å—é –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è');
    return;
  }
  
  try {
    debugLog('üìã –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è –ø—Ä–µ–≤—å—é –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É', 'info');
    
    // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ base64 –≤ blob
    const response = await fetch(currentPreviewData.base64);
    const blob = await response.blob();
    
    // –ö–æ–ø—ñ—é—î–º–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É
    await navigator.clipboard.write([
      new ClipboardItem({
        [blob.type]: blob
      })
    ]);
    
    debugLog('‚úÖ –ü—Ä–µ–≤—å—é —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É', 'success');
    alert('–ü—Ä–µ–≤—å—é —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É!');
    
  } catch (error) {
    debugLog(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –ø—Ä–µ–≤—å—é: ${error.message}`, 'error');
    alert(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—ñ –ø—Ä–µ–≤—å—é: ${error.message}`);
  }
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–µ–≤—å—é –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
function initializePreviewTab() {
  debugLog('üé® –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–∞–±–∞ –ø—Ä–µ–≤—å—é', 'info');
  
  // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
  updatePreviewSettings();
  
  // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
  const sizeSelect = document.getElementById('preview-size');
  const qualitySelect = document.getElementById('preview-quality');
  
  if (sizeSelect) {
    sizeSelect.addEventListener('change', updatePreviewSettings);
  }
  
  if (qualitySelect) {
    qualitySelect.addEventListener('change', updatePreviewSettings);
  }
  
  debugLog('‚úÖ –¢–∞–± –ø—Ä–µ–≤—å—é —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ', 'success');
}


// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Å–µ–∫—Ü—ñ—ó –≤–∏–±–æ—Ä—É –º–æ–¥–µ–ª—ñ —Å—Ç–µ–ª–∏
function toggleSteleModelSection(headerElement) {
  const section = headerElement.closest('.stele-section');
  if (section) {
    const wasCollapsed = section.classList.contains('collapsed');
    section.classList.toggle('collapsed');
    
    if (wasCollapsed) {
      debugLog('–°–µ–∫—Ü—ñ—è –≤–∏–±–æ—Ä—É –º–æ–¥–µ–ª—ñ —Å—Ç–µ–ª–∏ —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–∞', 'info');
    } else {
      debugLog('–°–µ–∫—Ü—ñ—è –≤–∏–±–æ—Ä—É –º–æ–¥–µ–ª—ñ —Å—Ç–µ–ª–∏ –∑–≥–æ—Ä–Ω—É—Ç–∞', 'info');
    }
  }
}

// –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–∫–æ—Ä–¥–µ–æ–Ω –ø–æ–≤–µ–¥—ñ–Ω–∫–∏ –≤ –±—É–¥—å-—è–∫–æ–º—É —Ç–∞–±—ñ
// toggleAccordionPanel() –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ modules/ui/AccordionManager.js

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∞–∫–æ—Ä–¥–µ–æ–Ω –ø–æ–≤–µ–¥—ñ–Ω–∫–∏ –¥–æ –≤—Å—ñ—Ö –ø–∞–Ω–µ–ª–µ–π
function initializeAccordionBehavior() {
  // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ —Ç–∞–±–∏
  const tabs = document.querySelectorAll('.tab-content');
  
  tabs.forEach(tab => {
    const panels = tab.querySelectorAll('.panel');
    
    panels.forEach(panel => {
      const header = panel.querySelector('.panel-header');
      if (header) {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ —î onclick –æ–±—Ä–æ–±–Ω–∏–∫
        const currentOnclick = header.getAttribute('onclick');
        
        // –Ø–∫—â–æ —î togglePanel, –∑–∞–º—ñ–Ω—é—î–º–æ –Ω–∞ toggleAccordionPanel
        if (currentOnclick && currentOnclick.includes('togglePanel')) {
          header.setAttribute('onclick', 'toggleAccordionPanel(this)');
          debugLog(`–ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ –∞–∫–æ—Ä–¥–µ–æ–Ω –ø–æ–≤–µ–¥—ñ–Ω–∫—É –¥–æ –ø–∞–Ω–µ–ª—ñ –≤ —Ç–∞–±—ñ ${tab.id}`, 'info');
        }
        // –Ø–∫—â–æ —î toggleBasePanel, –∑–∞–º—ñ–Ω—é—î–º–æ –Ω–∞ toggleAccordionPanel
        else if (currentOnclick && currentOnclick.includes('toggleBasePanel')) {
          header.setAttribute('onclick', 'toggleAccordionPanel(this)');
          debugLog(`–ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ –∞–∫–æ—Ä–¥–µ–æ–Ω –ø–æ–≤–µ–¥—ñ–Ω–∫—É –¥–æ –ø–∞–Ω–µ–ª—ñ –≤ —Ç–∞–±—ñ ${tab.id}`, 'info');
        }
        // –Ø–∫—â–æ –Ω–µ–º–∞—î onclick, –¥–æ–¥–∞—î–º–æ toggleAccordionPanel
        else if (!currentOnclick) {
          header.setAttribute('onclick', 'toggleAccordionPanel(this)');
          debugLog(`–î–æ–¥–∞–Ω–æ –∞–∫–æ—Ä–¥–µ–æ–Ω –ø–æ–≤–µ–¥—ñ–Ω–∫—É –¥–æ –ø–∞–Ω–µ–ª—ñ –≤ —Ç–∞–±—ñ ${tab.id}`, 'info');
        }
      }
    });
  });
  
  debugLog('‚úÖ –ê–∫–æ—Ä–¥–µ–æ–Ω –ø–æ–≤–µ–¥—ñ–Ω–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –¥–ª—è –≤—Å—ñ—Ö —Ç–∞–±—ñ–≤', 'success');
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∞–∫–æ—Ä–¥–µ–æ–Ω –ø–æ–≤–µ–¥—ñ–Ω–∫–∏ –¥–æ –Ω–æ–≤–æ—ó –ø–∞–Ω–µ–ª—ñ
function applyAccordionToNewPanel(panelElement) {
  if (!panelElement) return;
  
  const header = panelElement.querySelector('.panel-header');
  if (!header) return;
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ —î onclick –æ–±—Ä–æ–±–Ω–∏–∫
  const currentOnclick = header.getAttribute('onclick');
  
  // –Ø–∫—â–æ –Ω–µ–º–∞—î onclick –∞–±–æ —î togglePanel, –∑–∞–º—ñ–Ω—é—î–º–æ –Ω–∞ toggleAccordionPanel
  if (!currentOnclick || currentOnclick.includes('togglePanel')) {
    header.setAttribute('onclick', 'toggleAccordionPanel(this)');
    debugLog(`–ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ –∞–∫–æ—Ä–¥–µ–æ–Ω –ø–æ–≤–µ–¥—ñ–Ω–∫—É –¥–æ –Ω–æ–≤–æ—ó –ø–∞–Ω–µ–ª—ñ`, 'info');
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∞–∫–æ—Ä–¥–µ–æ–Ω –ø–æ–≤–µ–¥—ñ–Ω–∫–∏ –¥–æ –≤—Å—ñ—Ö –ø–∞–Ω–µ–ª–µ–π –≤ —Ç–∞–±—ñ
function applyAccordionToTab(tabElement) {
  if (!tabElement) return;
  
  const panels = tabElement.querySelectorAll('.panel');
  panels.forEach(panel => {
    applyAccordionToNewPanel(panel);
  });
  
  debugLog(`–ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ –∞–∫–æ—Ä–¥–µ–æ–Ω –ø–æ–≤–µ–¥—ñ–Ω–∫—É –¥–æ –≤—Å—ñ—Ö –ø–∞–Ω–µ–ª–µ–π –≤ —Ç–∞–±—ñ ${tabElement.id}`, 'info');
}

// === –§–£–ù–ö–¶–Ü–á –î–õ–Ø –ú–ê–°–®–¢–ê–ë–£–í–ê–ù–ù–Ø –°–¢–ï–õ–ò ===

// –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏—Ö —Ä–æ–∑–º—ñ—Ä—ñ–≤ —Å—Ç–µ–ª–∏
// originalSteleDimensions —Ç–∞ currentSteleDimensions –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ modules/core/GlobalState.js

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–∏—Ö —Ä–æ–∑–º—ñ—Ä—ñ–≤ —Å—Ç–µ–ª–∏ –∑ SketchUp (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞)
function getCurrentSteleDimensions() {
  return new Promise((resolve, reject) => {
    debugLog('getCurrentSteleDimensions: –ø–æ—á–∞—Ç–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è', 'info');
    
    if (!window.sketchup) {
      debugLog('getCurrentSteleDimensions: window.sketchup –Ω–µ —ñ—Å–Ω—É—î', 'error');
      reject(new Error('window.sketchup –Ω–µ —ñ—Å–Ω—É—î'));
      return;
    }
    
    if (!window.sketchup.get_stele_dimensions) {
      debugLog('getCurrentSteleDimensions: window.sketchup.get_stele_dimensions –Ω–µ —ñ—Å–Ω—É—î', 'error');
      debugLog(`–î–æ—Å—Ç—É–ø–Ω—ñ –º–µ—Ç–æ–¥–∏: ${Object.keys(window.sketchup)}`, 'info');
      reject(new Error('window.sketchup.get_stele_dimensions –Ω–µ —ñ—Å–Ω—É—î'));
      return;
    }
    
    try {
      debugLog('getCurrentSteleDimensions: –≤–∏–∫–ª–∏–∫–∞—î–º–æ window.sketchup.get_stele_dimensions()', 'info');
      window.sketchup.get_stele_dimensions();
      
      // –ß–µ–∫–∞—î–º–æ, —â–æ–± Ruby callback –≤—Å—Ç–∏–≥ –≤–∏–∫–æ–Ω–∞—Ç–∏—Å—è
      setTimeout(() => {
        const dimensions = window.sketchup.steleDimensions;
        debugLog(`getCurrentSteleDimensions: –æ—Ç—Ä–∏–º–∞–Ω–æ —Ä–æ–∑–º—ñ—Ä–∏ —Å—Ç–µ–ª–∏ –∑ SketchUp: ${JSON.stringify(dimensions)}`, 'info');
        
        if (!dimensions) {
          debugLog('getCurrentSteleDimensions: dimensions is null', 'warn');
          reject(new Error('–†–æ–∑–º—ñ—Ä–∏ —Å—Ç–µ–ª–∏ –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–æ'));
          return;
        }
        
        if (typeof dimensions.width === 'undefined' || typeof dimensions.height === 'undefined' || typeof dimensions.depth === 'undefined') {
          debugLog(`getCurrentSteleDimensions: –Ω–µ–≤–∞–ª—ñ–¥–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏: width=${dimensions.width}, height=${dimensions.height}, depth=${dimensions.depth}`, 'warn');
          reject(new Error('–ù–µ–≤–∞–ª—ñ–¥–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏ —Å—Ç–µ–ª–∏'));
          return;
        }
        
        debugLog(`getCurrentSteleDimensions: –≤–∞–ª—ñ–¥–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏: ${dimensions.width}√ó${dimensions.height}√ó${dimensions.depth} –º–º`, 'info');
        resolve(dimensions);
      }, 200); // –ó–±—ñ–ª—å—à—É—î–º–æ —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
      
    } catch (error) {
      debugLog(`getCurrentSteleDimensions: –ø–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—ñ–≤ —Å—Ç–µ–ª–∏: ${error.message}`, 'error');
      debugLog(`getCurrentSteleDimensions: stack trace: ${error.stack}`, 'error');
      reject(error);
    }
  });
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—ñ–≤ —Å—Ç–µ–ª–∏ –≤ UI
function setSteleDimensionsInUI(dimensions) {
  if (!dimensions) {
    debugLog('setSteleDimensionsInUI: dimensions is null or undefined', 'error');
    return;
  }
  
  debugLog(`setSteleDimensionsInUI: –æ—Ç—Ä–∏–º–∞–Ω–æ dimensions: ${JSON.stringify(dimensions)}`, 'info');
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—Å—ñ —Ä–æ–∑–º—ñ—Ä–∏ —ñ—Å–Ω—É—é—Ç—å
  if (typeof dimensions.width === 'undefined' || typeof dimensions.height === 'undefined' || typeof dimensions.depth === 'undefined') {
    debugLog(`setSteleDimensionsInUI: –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏: width=${dimensions.width}, height=${dimensions.height}, depth=${dimensions.depth}`, 'error');
    return;
  }
  
  const currentUnit = getCurrentUnit();
  
  // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –∑ –º–º –≤ –ø–æ—Ç–æ—á–Ω—ñ –æ–¥–∏–Ω–∏—Ü—ñ
  const width = currentUnit === 'cm' ? Math.round(dimensions.width / 10) : dimensions.width;
  const height = currentUnit === 'cm' ? Math.round(dimensions.height / 10) : dimensions.height;
  const depth = currentUnit === 'cm' ? Math.round(dimensions.depth / 10) : dimensions.depth;
  
  debugLog(`setSteleDimensionsInUI: –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —Ä–æ–∑–º—ñ—Ä—ñ–≤:`, 'info');
  debugLog(`  –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ (–º–º): width=${dimensions.width}, height=${dimensions.height}, depth=${dimensions.depth}`, 'info');
  debugLog(`  –ö–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω—ñ (${currentUnit}): width=${width}, height=${height}, depth=${depth}`, 'info');
  debugLog(`  –ú–∞–ø—ñ–Ω–≥ –¥–æ UI –ø–æ–ª—ñ–≤:`, 'info');
  debugLog(`    dimensions.width (${dimensions.width}) ‚Üí stele-width (${width})`, 'info');
  debugLog(`    dimensions.height (${dimensions.height}) ‚Üí stele-height (${height})`, 'info');
  debugLog(`    dimensions.depth (${dimensions.depth}) ‚Üí stele-depth (${depth})`, 'info');
  
  const steleWidth = document.getElementById('stele-width');
  const steleHeight = document.getElementById('stele-height');
  const steleDepth = document.getElementById('stele-depth');
  
  if (steleWidth) {
    steleWidth.value = width;
    debugLog(`setSteleDimensionsInUI: –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ stele-width = ${width}`, 'info');
  }
  if (steleHeight) {
    steleHeight.value = height;
    debugLog(`setSteleDimensionsInUI: –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ stele-height = ${height}`, 'info');
  }
  if (steleDepth) {
    steleDepth.value = depth;
    debugLog(`setSteleDimensionsInUI: –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ stele-depth = ${depth}`, 'info');
  }
  
  debugLog(`–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ä–æ–∑–º—ñ—Ä–∏ —Å—Ç–µ–ª–∏ –≤ UI: ${width}√ó${height}√ó${depth} ${currentUnit}`, 'info');
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É —Å–µ–∫—Ü—ñ—ó –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è —Å—Ç–µ–ª–∏
async function showSteleScalingSection() {
  // –ü–æ–∫–∞–∑—É—î–º–æ —Å–µ–∫—Ü—ñ—é –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –¥–ª—è –æ–¥–Ω—ñ—î—ó —Å—Ç–µ–ª–∏
  if (carouselState.steles.type !== 'single') {
    debugLog('–°–µ–∫—Ü—ñ—è –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –æ–¥–Ω—ñ—î—ó —Å—Ç–µ–ª–∏', 'info');
    return;
  }
  
  debugLog('showSteleScalingSection: –ø–æ–∫–∞–∑—É—î–º–æ —Å–µ–∫—Ü—ñ—é –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è', 'info');
  
  const scalingSection = document.getElementById('stele-scaling-section');
  if (scalingSection) {
    scalingSection.style.display = 'block';
    
    debugLog('showSteleScalingSection: –æ—Ç—Ä–∏–º—É—î–º–æ —Ä–æ–∑–º—ñ—Ä–∏ —Å—Ç–µ–ª–∏...', 'info');
    
    try {
      // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏ —Å—Ç–µ–ª–∏ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
      const dimensions = await getCurrentSteleDimensions();
      debugLog(`showSteleScalingSection: –æ—Ç—Ä–∏–º–∞–Ω–æ dimensions: ${JSON.stringify(dimensions)}`, 'info');
      
      if (dimensions && dimensions.width && dimensions.height && dimensions.depth) {
        originalSteleDimensions = dimensions;
        currentSteleDimensions = { ...dimensions };
        setSteleDimensionsInUI(dimensions);
        debugLog(`showSteleScalingSection: –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏: ${dimensions.width}√ó${dimensions.height}√ó${dimensions.depth} –º–º`, 'info');
        debugLog('–ü–æ–∫–∞–∑–∞–Ω–æ —Å–µ–∫—Ü—ñ—é –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è —Å—Ç–µ–ª–∏', 'info');
      } else {
        throw new Error('–ù–µ–≤–∞–ª—ñ–¥–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏ —Å—Ç–µ–ª–∏');
      }
    } catch (error) {
      debugLog(`showSteleScalingSection: –ø–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—ñ–≤ —Å—Ç–µ–ª–∏: ${error.message}`, 'error');
      
      // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–º–∏–ª–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
      if (window.ProGran3 && window.ProGran3.UI && window.ProGran3.UI.showNotification) {
        window.ProGran3.UI.showNotification('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–º—ñ—Ä–∏ —Å—Ç–µ–ª–∏ –¥–ª—è –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è', 'error');
      }
      
      // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —Å–µ–∫—Ü—ñ—é –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è
      scalingSection.style.display = 'none';
      return;
    }
  } else {
    debugLog('showSteleScalingSection: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–µ–∫—Ü—ñ—é –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è', 'error');
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è —Å–µ–∫—Ü—ñ—ó –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è —Å—Ç–µ–ª–∏
function hideSteleScalingSection() {
  const scalingSection = document.getElementById('stele-scaling-section');
  if (scalingSection) {
    scalingSection.style.display = 'none';
    debugLog('–ü—Ä–∏—Ö–æ–≤–∞–Ω–æ —Å–µ–∫—Ü—ñ—é –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è —Å—Ç–µ–ª–∏', 'info');
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è —Å—Ç–µ–ª–∏ (–≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ –∑–º—ñ–Ω—ñ –∑–Ω–∞—á–µ–Ω—å)
function updateSteleScaling() {
  const steleWidth = document.getElementById('stele-width');
  const steleHeight = document.getElementById('stele-height');
  const steleDepth = document.getElementById('stele-depth');
  
  if (!steleWidth || !steleHeight || !steleDepth) {
    debugLog('updateSteleScaling: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –µ–ª–µ–º–µ–Ω—Ç–∏ –≤–≤–æ–¥—É', 'error');
    return;
  }
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ
  if (!steleWidth.value || !steleHeight.value || !steleDepth.value) {
    debugLog(`updateSteleScaling: –ø–æ—Ä–æ–∂–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è: width=${steleWidth.value}, height=${steleHeight.value}, depth=${steleDepth.value}`, 'warn');
    return;
  }
  
  const currentUnit = getCurrentUnit();
  
  // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ –º–º –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è
  debugLog(`updateSteleScaling: –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –∑–Ω–∞—á–µ–Ω—å:`, 'info');
  debugLog(`  –®–∏—Ä–∏–Ω–∞: "${steleWidth.value}" (${currentUnit}) ‚Üí convertToMm()`, 'info');
  debugLog(`  –í–∏—Å–æ—Ç–∞: "${steleHeight.value}" (${currentUnit}) ‚Üí convertToMm()`, 'info');
  debugLog(`  –ì–ª–∏–±–∏–Ω–∞: "${steleDepth.value}" (${currentUnit}) ‚Üí convertToMm()`, 'info');
  
  const widthMm = convertToMm(steleWidth.value);
  const heightMm = convertToMm(steleHeight.value);
  const depthMm = convertToMm(steleDepth.value);
  
  debugLog(`updateSteleScaling: —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó:`, 'info');
  debugLog(`  –®–∏—Ä–∏–Ω–∞: ${widthMm} –º–º`, 'info');
  debugLog(`  –í–∏—Å–æ—Ç–∞: ${heightMm} –º–º`, 'info');
  debugLog(`  –ì–ª–∏–±–∏–Ω–∞: ${depthMm} –º–º`, 'info');
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ
  if (isNaN(widthMm) || isNaN(heightMm) || isNaN(depthMm)) {
    debugLog(`updateSteleScaling: –ø–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó: widthMm=${widthMm}, heightMm=${heightMm}, depthMm=${depthMm}`, 'error');
    return;
  }
  
  currentSteleDimensions = {
    width: widthMm,
    height: heightMm,
    depth: depthMm
  };
  
  debugLog(`–û–Ω–æ–≤–ª–µ–Ω–æ —Ä–æ–∑–º—ñ—Ä–∏ —Å—Ç–µ–ª–∏: ${widthMm}√ó${heightMm}√ó${depthMm} –º–º`, 'info');
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è —Å—Ç–µ–ª–∏
function applySteleScaling() {
  if (!currentSteleDimensions) {
    debugLog('–ù–µ–º–∞—î —Ä–æ–∑–º—ñ—Ä—ñ–≤ –¥–ª—è –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è —Å—Ç–µ–ª–∏', 'error');
    return;
  }
  
  if (!originalSteleDimensions) {
    debugLog('–ù–µ–º–∞—î –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏—Ö —Ä–æ–∑–º—ñ—Ä—ñ–≤ —Å—Ç–µ–ª–∏', 'error');
    return;
  }
  
  // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è
  // –ú–ê–°–®–¢–ê–ë–£–í–ê–ù–ù–Ø –í–°–Ü–• –†–û–ó–ú–Ü–†–Ü–í:
  // - –í–∏—Å–æ—Ç–∞: —Ç—ñ–ª—å–∫–∏ –≤–≥–æ—Ä—É (–≤—ñ–¥ –æ—Å–Ω–æ–≤–∏)
  // - –®–∏—Ä–∏–Ω–∞ —Ç–∞ –≥–ª–∏–±–∏–Ω–∞: –≤—ñ–¥ —Ü–µ–Ω—Ç—Ä—É (–≤ –æ–±–∏–¥–≤—ñ —Å—Ç–æ—Ä–æ–Ω–∏)
  const scaleX = originalSteleDimensions.depth > 0 ? currentSteleDimensions.depth / originalSteleDimensions.depth : 1;   // UI "–≥–ª–∏–±–∏–Ω–∞" ‚Üí X-–≤—ñ—Å—å
  const scaleY = originalSteleDimensions.width > 0 ? currentSteleDimensions.width / originalSteleDimensions.width : 1;   // UI "—à–∏—Ä–∏–Ω–∞" ‚Üí Y-–≤—ñ—Å—å
  const scaleZ = originalSteleDimensions.height > 0 ? currentSteleDimensions.height / originalSteleDimensions.height : 1; // UI "–≤–∏—Å–æ—Ç–∞" ‚Üí Z-–≤—ñ—Å—å
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ NaN —Ç–∞ Infinity
  if (isNaN(scaleX) || isNaN(scaleY) || isNaN(scaleZ) || !isFinite(scaleX) || !isFinite(scaleY) || !isFinite(scaleZ)) {
    debugLog(`–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç—ñ–≤ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è: scaleX=${scaleX}, scaleY=${scaleY}, scaleZ=${scaleZ}`, 'error');
    if (window.ProGran3 && window.ProGran3.UI && window.ProGran3.UI.showNotification) {
      window.ProGran3.UI.showNotification('–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç—ñ–≤ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è', 'error');
    }
    return;
  }
  
  debugLog(`–ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è —Å—Ç–µ–ª–∏ (–í–°–Ü –†–û–ó–ú–Ü–†–ò):`, 'info');
  debugLog(`  –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏: ${originalSteleDimensions.width}(—à–∏—Ä–∏–Ω–∞)√ó${originalSteleDimensions.height}(–≤–∏—Å–æ—Ç–∞)√ó${originalSteleDimensions.depth}(–≥–ª–∏–±–∏–Ω–∞) –º–º`, 'info');
  debugLog(`  –ù–æ–≤—ñ —Ä–æ–∑–º—ñ—Ä–∏: ${currentSteleDimensions.width}(—à–∏—Ä–∏–Ω–∞)√ó${currentSteleDimensions.height}(–≤–∏—Å–æ—Ç–∞)√ó${currentSteleDimensions.depth}(–≥–ª–∏–±–∏–Ω–∞) –º–º`, 'info');
  debugLog(`  –ó–Ω–∞—á–µ–Ω–Ω—è –∑ UI:`, 'info');
  debugLog(`    –®–∏—Ä–∏–Ω–∞: ${document.getElementById('stele-width')?.value} ‚Üí ${currentSteleDimensions.width} –º–º (–≤—ñ–¥ —Ü–µ–Ω—Ç—Ä—É)`, 'info');
  debugLog(`    –í–∏—Å–æ—Ç–∞: ${document.getElementById('stele-height')?.value} ‚Üí ${currentSteleDimensions.height} –º–º (—Ç—ñ–ª—å–∫–∏ –≤–≥–æ—Ä—É)`, 'info');
  debugLog(`    –ì–ª–∏–±–∏–Ω–∞: ${document.getElementById('stele-depth')?.value} ‚Üí ${currentSteleDimensions.depth} –º–º (–≤—ñ–¥ —Ü–µ–Ω—Ç—Ä—É)`, 'info');
  debugLog(`  –ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è: X(–≥–ª–∏–±–∏–Ω–∞)=${scaleX.toFixed(3)}, Y(—à–∏—Ä–∏–Ω–∞)=${scaleY.toFixed(3)}, Z(–≤–∏—Å–æ—Ç–∞)=${scaleZ.toFixed(3)}`, 'info');
  debugLog(`  –î–µ—Ç–∞–ª—å–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫:`, 'info');
  debugLog(`    scaleX = ${currentSteleDimensions.depth} / ${originalSteleDimensions.depth} = ${scaleX.toFixed(3)} (–≥–ª–∏–±–∏–Ω–∞ –≤—ñ–¥ —Ü–µ–Ω—Ç—Ä—É)`, 'info');
  debugLog(`    scaleY = ${currentSteleDimensions.width} / ${originalSteleDimensions.width} = ${scaleY.toFixed(3)} (—à–∏—Ä–∏–Ω–∞ –≤—ñ–¥ —Ü–µ–Ω—Ç—Ä—É)`, 'info');
  debugLog(`    scaleZ = ${currentSteleDimensions.height} / ${originalSteleDimensions.height} = ${scaleZ.toFixed(3)} (–≤–∏—Å–æ—Ç–∞ —Ç—ñ–ª—å–∫–∏ –≤–≥–æ—Ä—É)`, 'info');
  debugLog(`  –û—á—ñ–∫—É–≤–∞–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏:`, 'info');
  debugLog(`    –ì–ª–∏–±–∏–Ω–∞: ${originalSteleDimensions.depth} √ó ${scaleX.toFixed(3)} = ${(originalSteleDimensions.depth * scaleX).toFixed(1)} –º–º (–≤—ñ–¥ —Ü–µ–Ω—Ç—Ä—É)`, 'info');
  debugLog(`    –®–∏—Ä–∏–Ω–∞: ${originalSteleDimensions.width} √ó ${scaleY.toFixed(3)} = ${(originalSteleDimensions.width * scaleY).toFixed(1)} –º–º (–≤—ñ–¥ —Ü–µ–Ω—Ç—Ä—É)`, 'info');
  debugLog(`    –í–∏—Å–æ—Ç–∞: ${originalSteleDimensions.height} √ó ${scaleZ.toFixed(3)} = ${(originalSteleDimensions.height * scaleZ).toFixed(1)} –º–º (—Ç—ñ–ª—å–∫–∏ –≤–≥–æ—Ä—É)`, 'info');
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Å—Ç–µ–ª–∞ —ñ—Å–Ω—É—î –ø–µ—Ä–µ–¥ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è–º
  const dimensionsBefore = getCurrentSteleDimensions();
  if (!dimensionsBefore) {
    debugLog('‚ùå –°—Ç–µ–ª–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–µ–¥ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è–º', 'error');
    if (window.ProGran3 && window.ProGran3.UI && window.ProGran3.UI.showNotification) {
      window.ProGran3.UI.showNotification('–°—Ç–µ–ª–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è', 'error');
    }
    return;
  }
  
  debugLog(`–°—Ç–µ–ª–∞ –∑–Ω–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–µ–¥ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è–º: ${dimensionsBefore.width}√ó${dimensionsBefore.height}√ó${dimensionsBefore.depth} –º–º`, 'info');
  
  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è (–º–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ—è —ñ—Å–Ω—É—é—á–æ—ó —Å—Ç–µ–ª–∏)
  if (window.sketchup && window.sketchup.scale_stele) {
    try {
      debugLog(`–í–∏–∫–ª–∏–∫–∞—î–º–æ scale_stele –∑ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∞–º–∏: X(–≥–ª–∏–±–∏–Ω–∞)=${scaleX}, Y(—à–∏—Ä–∏–Ω–∞)=${scaleY}, Z(–≤–∏—Å–æ—Ç–∞)=${scaleZ}`, 'info');
      
      const success = window.sketchup.scale_stele(scaleX, scaleY, scaleZ);
      
      if (success) {
        debugLog('‚úÖ –ú–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è —Å—Ç–µ–ª–∏ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ', 'success');
        
        // –û–Ω–æ–≤–ª—é—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏
        originalSteleDimensions = { ...currentSteleDimensions };
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Å—Ç–µ–ª–∞ –≤—Å–µ —â–µ —ñ—Å–Ω—É—î –ø—ñ—Å–ª—è –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è
        setTimeout(() => {
          const dimensions = getCurrentSteleDimensions();
          if (dimensions) {
            debugLog(`–°—Ç–µ–ª–∞ –ø—ñ—Å–ª—è –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è: ${dimensions.width}(—à–∏—Ä–∏–Ω–∞)√ó${dimensions.height}(–≤–∏—Å–æ—Ç–∞)√ó${dimensions.depth}(–≥–ª–∏–±–∏–Ω–∞) –º–º`, 'info');
            // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Å—Ç–µ–ª–∞ —ñ—Å–Ω—É—î
            if (window.ProGran3 && window.ProGran3.UI && window.ProGran3.UI.showNotification) {
              window.ProGran3.UI.showNotification('–ú–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è —Å—Ç–µ–ª–∏ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ', 'success');
            }
          } else {
            debugLog('‚ö†Ô∏è –°—Ç–µ–ª–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –ø—ñ—Å–ª—è –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è', 'warn');
            if (window.ProGran3 && window.ProGran3.UI && window.ProGran3.UI.showNotification) {
              window.ProGran3.UI.showNotification('–ü–æ–º–∏–ª–∫–∞: —Å—Ç–µ–ª–∞ –∑–Ω–∏–∫–ª–∞ –ø—ñ—Å–ª—è –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è', 'error');
            }
          }
        }, 200);
      } else {
        debugLog('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è —Å—Ç–µ–ª–∏, —Å–ø—Ä–æ–±—É—î–º–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–µ—Ç–æ–¥', 'warn');
        
        // –°–ø—Ä–æ–±—É—î–º–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–µ—Ç–æ–¥
        if (window.sketchup && window.sketchup.scale_stele_alternative) {
          try {
            debugLog(`–°–ø—Ä–æ–±—É—î–º–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–µ—Ç–æ–¥ –∑ —Ä–æ–∑–º—ñ—Ä–∞–º–∏: ${currentSteleDimensions.width}√ó${currentSteleDimensions.height}√ó${currentSteleDimensions.depth} –º–º`, 'info');
            
            const altSuccess = window.sketchup.scale_stele_alternative(
              currentSteleDimensions.width, 
              currentSteleDimensions.height, 
              currentSteleDimensions.depth
            );
            
            if (altSuccess) {
              debugLog('‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–µ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è —Å—Ç–µ–ª–∏ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ', 'success');
              originalSteleDimensions = { ...currentSteleDimensions };
              
              // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Å—Ç–µ–ª–∞ —ñ—Å–Ω—É—î –ø—ñ—Å–ª—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è
              setTimeout(() => {
                const dimensions = getCurrentSteleDimensions();
                if (dimensions) {
                  debugLog(`–°—Ç–µ–ª–∞ –ø—ñ—Å–ª—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è: ${dimensions.width}(—à–∏—Ä–∏–Ω–∞)√ó${dimensions.height}(–≤–∏—Å–æ—Ç–∞)√ó${dimensions.depth}(–≥–ª–∏–±–∏–Ω–∞) –º–º`, 'info');
                  if (window.ProGran3 && window.ProGran3.UI && window.ProGran3.UI.showNotification) {
                    window.ProGran3.UI.showNotification('–ú–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è —Å—Ç–µ–ª–∏ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–µ—Ç–æ–¥)', 'success');
                  }
                } else {
                  debugLog('‚ö†Ô∏è –°—Ç–µ–ª–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –ø—ñ—Å–ª—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è', 'warn');
                  if (window.ProGran3 && window.ProGran3.UI && window.ProGran3.UI.showNotification) {
                    window.ProGran3.UI.showNotification('–ü–æ–º–∏–ª–∫–∞: —Å—Ç–µ–ª–∞ –∑–Ω–∏–∫–ª–∞ –ø—ñ—Å–ª—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è', 'error');
                  }
                }
              }, 200);
            } else {
              debugLog('‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–µ—Ç–æ–¥ —Ç–∞–∫–æ–∂ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤', 'error');
              if (window.ProGran3 && window.ProGran3.UI && window.ProGran3.UI.showNotification) {
                window.ProGran3.UI.showNotification('–ü–æ–º–∏–ª–∫–∞ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è', 'error');
              }
            }
          } catch (altError) {
            debugLog(`–ü–æ–º–∏–ª–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥—É: ${altError.message}`, 'error');
            if (window.ProGran3 && window.ProGran3.UI && window.ProGran3.UI.showNotification) {
              window.ProGran3.UI.showNotification('–ü–æ–º–∏–ª–∫–∞ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è —Å—Ç–µ–ª–∏', 'error');
            }
          }
        } else {
          debugLog('‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–µ—Ç–æ–¥ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π', 'error');
          if (window.ProGran3 && window.ProGran3.UI && window.ProGran3.UI.showNotification) {
            window.ProGran3.UI.showNotification('–ü–æ–º–∏–ª–∫–∞ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è', 'error');
          }
        }
      }
    } catch (error) {
      debugLog(`–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–ª–∏–∫—É scale_stele: ${error.message}`, 'error');
      debugLog(`Stack trace: ${error.stack}`, 'error');
      if (window.ProGran3 && window.ProGran3.UI && window.ProGran3.UI.showNotification) {
        window.ProGran3.UI.showNotification('–ü–æ–º–∏–ª–∫–∞ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è —Å—Ç–µ–ª–∏', 'error');
      }
    }
  } else {
    debugLog('–ú–µ—Ç–æ–¥ scale_stele –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –≤ window.sketchup', 'error');
    debugLog(`–î–æ—Å—Ç—É–ø–Ω—ñ –º–µ—Ç–æ–¥–∏: ${Object.keys(window.sketchup || {})}`, 'info');
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è —Å—Ç–µ–ª–∏ –¥–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏—Ö —Ä–æ–∑–º—ñ—Ä—ñ–≤
function resetSteleScaling() {
  if (!originalSteleDimensions) {
    debugLog('–ù–µ–º–∞—î –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏—Ö —Ä–æ–∑–º—ñ—Ä—ñ–≤ –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è', 'error');
    return;
  }
  
  setSteleDimensionsInUI(originalSteleDimensions);
  currentSteleDimensions = { ...originalSteleDimensions };
  
  debugLog('–°–∫–∏–Ω—É—Ç–æ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è —Å—Ç–µ–ª–∏ –¥–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏—Ö —Ä–æ–∑–º—ñ—Ä—ñ–≤', 'info');
}

// ============================================================================
// –°–ò–°–¢–ï–ú–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ù–û–á –ü–ï–†–ï–ë–£–î–û–í–ò –ó–ê–õ–ï–ñ–ù–ò–• –ö–û–ú–ü–û–ù–ï–ù–¢–Ü–í
// ============================================================================

// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –∑–∞–ª–µ–∂–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
function saveUserParametersForDependents(baseCategory) {
  debugLog(`üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –∑–∞–ª–µ–∂–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤: ${baseCategory}`, 'info');
  
  const userParams = {};
  
  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø—ñ–¥—Å—Ç–∞–≤–∫–∏
  if (addedElements.stands) {
    userParams.stands = {
      filename: carouselState.stands.currentModel,
      gaps: carouselState.stands.gaps || false
    };
  }
  
  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Å—Ç–µ–ª
  if (addedElements.steles) {
    userParams.steles = {
      filename: carouselState.steles.currentModel,
      type: carouselState.steles.type || 'single',
      distance: carouselState.steles.distance || 200,
      centralDetail: carouselState.steles.centralDetail || false,
      centralDetailWidth: carouselState.steles.centralDetailWidth || 200,
      centralDetailDepth: carouselState.steles.centralDetailDepth || 50,
      centralDetailHeight: carouselState.steles.centralDetailHeight || 1200
    };
  }
  
  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∫–≤—ñ—Ç–Ω–∏–∫—ñ–≤
  if (addedElements.flowerbeds) {
    userParams.flowerbeds = {
      filename: carouselState.flowerbeds.currentModel
    };
  }
  
  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –Ω–∞–¥–≥—Ä–æ–±–∫—ñ–≤
  if (addedElements.gravestones) {
    userParams.gravestones = {
      filename: carouselState.gravestones.currentModel
    };
  }
  
  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ª–∞–º–ø–∞–¥–æ–∫
  if (addedElements.lamps) {
    userParams.lamps = {
      filename: carouselState.lamps.currentModel,
      positionType: carouselState.lamps.positionType || 'center'
    };
  }
  
  debugLog(`üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤: ${Object.keys(userParams).join(', ')}`, 'success');
  return userParams;
}

// –ü–µ—Ä–µ–±—É–¥–æ–≤–∞ –∑–∞–ª–µ–∂–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ –∑ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
function rebuildDependentComponentsWithParams(userParams) {
  debugLog(`üîÑ –ü–µ—Ä–µ–±—É–¥–æ–≤–∞ –∑–∞–ª–µ–∂–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏`, 'info');
  
  Object.keys(userParams).forEach(component => {
    const params = userParams[component];
    debugLog(`üîÑ –ü–µ—Ä–µ–±—É–¥–æ–≤–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ${component} –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: ${Object.keys(params).join(', ')}`, 'info');
    
    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ–º–∞–Ω–¥—É –≤ SketchUp –¥–ª—è –ø–µ—Ä–µ–±—É–¥–æ–≤–∏
    if (window.sketchup) {
      window.sketchup.rebuild_component_with_params(component, JSON.stringify(params));
    }
  });
  
  debugLog(`‚úÖ –ü–µ—Ä–µ–±—É–¥–æ–≤–∞ –∑–∞–ª–µ–∂–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`, 'success');
}

// –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç—É –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—é –ø–µ—Ä–µ–±—É–¥–æ–≤–æ—é
function handleFoundationChangeWithRebuild(newParams) {
  debugLog(`üèóÔ∏è –ó–º—ñ–Ω–∞ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç—É –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—é –ø–µ—Ä–µ–±—É–¥–æ–≤–æ—é`, 'info');
  
  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –∑–∞–ª–µ–∂–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
  const userParams = saveUserParametersForDependents('foundation');
  
  if (Object.keys(userParams).length === 0) {
    debugLog(`‚ÑπÔ∏è –ù–µ–º–∞—î –∑–∞–ª–µ–∂–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–±—É–¥–æ–≤–∏`, 'info');
    return;
  }
  
  debugLog(`üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è ${Object.keys(userParams).length} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤`, 'info');
  
  // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ–º–∞–Ω–¥—É –≤ SketchUp –¥–ª—è –ø–µ—Ä–µ–±—É–¥–æ–≤–∏
  if (window.sketchup) {
    window.sketchup.rebuild_after_foundation_change(JSON.stringify(newParams), JSON.stringify(userParams));
  }
  
  // –û–Ω–æ–≤–ª—é—î–º–æ UI –ø—ñ—Å–ª—è –ø–µ—Ä–µ–±—É–¥–æ–≤–∏
  setTimeout(() => {
    updateSummaryTable();
    debugLog(`‚úÖ –ü–µ—Ä–µ–±—É–¥–æ–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, UI –æ–Ω–æ–≤–ª–µ–Ω–æ`, 'success');
  }, 2000);
}

// –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ –ø—ñ–¥—Å—Ç–∞–≤–∫–∏ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—é –ø–µ—Ä–µ–±—É–¥–æ–≤–æ—é
function handleStandsChangeWithRebuild(newParams) {
  debugLog(`üèóÔ∏è –ó–º—ñ–Ω–∞ –ø—ñ–¥—Å—Ç–∞–≤–∫–∏ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—é –ø–µ—Ä–µ–±—É–¥–æ–≤–æ—é`, 'info');
  
  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –∑–∞–ª–µ–∂–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
  const userParams = saveUserParametersForDependents('stands');
  
  if (Object.keys(userParams).length === 0) {
    debugLog(`‚ÑπÔ∏è –ù–µ–º–∞—î –∑–∞–ª–µ–∂–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–±—É–¥–æ–≤–∏`, 'info');
    return;
  }
  
  debugLog(`üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è ${Object.keys(userParams).length} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤`, 'info');
  
  // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ–º–∞–Ω–¥—É –≤ SketchUp –¥–ª—è –ø–µ—Ä–µ–±—É–¥–æ–≤–∏
  if (window.sketchup) {
    window.sketchup.rebuild_after_stands_change(JSON.stringify(newParams), JSON.stringify(userParams));
  }
  
  // –û–Ω–æ–≤–ª—é—î–º–æ UI –ø—ñ—Å–ª—è –ø–µ—Ä–µ–±—É–¥–æ–≤–∏
  setTimeout(() => {
    updateSummaryTable();
    debugLog(`‚úÖ –ü–µ—Ä–µ–±—É–¥–æ–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, UI –æ–Ω–æ–≤–ª–µ–Ω–æ`, 'success');
  }, 2000);
}

// –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∑–º—ñ–Ω–∏ –±–∞–∑–æ–≤–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
function handleBaseComponentChangeWithRebuild(componentType, newParams) {
  debugLog(`üèóÔ∏è –ó–º—ñ–Ω–∞ ${componentType} –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—é –ø–µ—Ä–µ–±—É–¥–æ–≤–æ—é`, 'info');
  
  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –∑–∞–ª–µ–∂–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
  const userParams = saveUserParametersForDependents(componentType);
  
  if (Object.keys(userParams).length === 0) {
    debugLog(`‚ÑπÔ∏è –ù–µ–º–∞—î –∑–∞–ª–µ–∂–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–±—É–¥–æ–≤–∏`, 'info');
    return;
  }
  
  debugLog(`üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è ${Object.keys(userParams).length} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤`, 'info');
  
  // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ–º–∞–Ω–¥—É –≤ SketchUp –¥–ª—è –ø–µ—Ä–µ–±—É–¥–æ–≤–∏
  if (window.sketchup) {
    window.sketchup.rebuild_after_component_change(componentType, JSON.stringify(newParams), JSON.stringify(userParams));
  }
  
  // –û–Ω–æ–≤–ª—é—î–º–æ UI –ø—ñ—Å–ª—è –ø–µ—Ä–µ–±—É–¥–æ–≤–∏
  setTimeout(() => {
    updateSummaryTable();
    debugLog(`‚úÖ –ü–µ—Ä–µ–±—É–¥–æ–≤–∞ ${componentType} –∑–∞–≤–µ—Ä—à–µ–Ω–∞, UI –æ–Ω–æ–≤–ª–µ–Ω–æ`, 'success');
  }, 2000);
}

// ============================================================================
// üîê –õ–Ü–¶–ï–ù–ó–Ü–ô–ù–Ü –§–£–ù–ö–¶–Ü–á
// ============================================================================

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –ª—ñ—Ü–µ–Ω–∑—ñ—ó –≤ UI
function updateLicenseStatus() {
  try {
    console.log('üîê [DEBUG] updateLicenseStatus –≤–∏–∫–ª–∏–∫–∞–Ω–æ');
    console.log('üîê [DEBUG] window.sketchup:', window.sketchup);
    
    // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ª—ñ—Ü–µ–Ω–∑—ñ—é –∑ Ruby
    if (window.sketchup && window.sketchup.has_license) {
      console.log('üîê [DEBUG] –í–∏–∫–ª–∏–∫–∞—î–º–æ has_license()');
      const hasLicense = window.sketchup.has_license();
      console.log('üîê [DEBUG] hasLicense:', hasLicense);
      
      const licenseInfo = window.sketchup.license_info ? window.sketchup.license_info() : null;
      console.log('üîê [DEBUG] licenseInfo:', licenseInfo);
      
      if (hasLicense && licenseInfo) {
        // –õ—ñ—Ü–µ–Ω–∑—ñ—è –∞–∫—Ç–∏–≤–Ω–∞ - –æ–Ω–æ–≤–ª—é—î–º–æ —Ç—ñ–ª—å–∫–∏ footer
        const footerEmail = document.getElementById('license-footer-email');
        const footerKey = document.getElementById('license-footer-key');
        footerEmail.textContent = licenseInfo.email || '–ù–µ–≤—ñ–¥–æ–º–∏–π email';
        footerKey.textContent = licenseInfo.license_key ? licenseInfo.license_key.substring(0, 8) + '...' : '';
      } else {
        // –î–µ–º–æ —Ä–µ–∂–∏–º - –æ–Ω–æ–≤–ª—é—î–º–æ —Ç—ñ–ª—å–∫–∏ footer
        console.log('üîê [DEBUG] –î–µ–º–æ —Ä–µ–∂–∏–º - –æ–Ω–æ–≤–ª—é—î–º–æ footer');
        const footerEmail = document.getElementById('license-footer-email');
        const footerKey = document.getElementById('license-footer-key');
        console.log('üîê [DEBUG] footerEmail element:', footerEmail);
        console.log('üîê [DEBUG] footerKey element:', footerKey);
        
        if (footerEmail) {
          footerEmail.textContent = '–ù–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞';
          console.log('üîê [DEBUG] –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ footerEmail: –ù–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞');
        } else {
          console.log('üîê [DEBUG] –ü–æ–º–∏–ª–∫–∞: footerEmail element –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        }
        
        if (footerKey) {
          footerKey.textContent = '';
          console.log('üîê [DEBUG] –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ footerKey: –ø–æ—Ä–æ–∂–Ω—å–æ');
        } else {
          console.log('üîê [DEBUG] –ü–æ–º–∏–ª–∫–∞: footerKey element –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        }
      }
    } else {
      // Fallback - –¥–µ–º–æ —Ä–µ–∂–∏–º
      console.log('üîê [DEBUG] Fallback - –¥–µ–º–æ —Ä–µ–∂–∏–º');
      const footerEmail = document.getElementById('license-footer-email');
      const footerKey = document.getElementById('license-footer-key');
      console.log('üîê [DEBUG] footerEmail element:', footerEmail);
      console.log('üîê [DEBUG] footerKey element:', footerKey);
      
      if (footerEmail) {
        footerEmail.textContent = '–ù–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞';
        console.log('üîê [DEBUG] –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ footerEmail: –ù–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞');
      } else {
        console.log('üîê [DEBUG] –ü–æ–º–∏–ª–∫–∞: footerEmail element –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
      }
      
      if (footerKey) {
        footerKey.textContent = '';
        console.log('üîê [DEBUG] –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ footerKey: –ø–æ—Ä–æ–∂–Ω—å–æ');
      } else {
        console.log('üîê [DEBUG] –ü–æ–º–∏–ª–∫–∞: footerKey element –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
      }
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –ª—ñ—Ü–µ–Ω–∑—ñ—ó:', error);
    // Fallback - –¥–µ–º–æ —Ä–µ–∂–∏–º
    const footerEmail = document.getElementById('license-footer-email');
    const footerKey = document.getElementById('license-footer-key');
    footerEmail.textContent = '–ù–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞';
    footerKey.textContent = '';
  }
}

// –§—É–Ω–∫—Ü—ñ—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –ª—ñ—Ü–µ–Ω–∑—ñ—ó
function activateLicense() {
  const emailInput = document.getElementById('email-input');
  const licenseKeyInput = document.getElementById('license-key-input');
  
  const email = emailInput.value.trim();
  const licenseKey = licenseKeyInput.value.trim();
  
  if (!email || !licenseKey) {
    alert('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å email —Ç–∞ –∫–ª—é—á –ª—ñ—Ü–µ–Ω–∑—ñ—ó');
    return;
  }
  
  try {
    // –í–∏–∫–ª–∏–∫–∞—î–º–æ Ruby —Ñ—É–Ω–∫—Ü—ñ—é –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –∑ email —Ç–∞ license_key
    if (window.sketchup && window.sketchup.activate_license) {
      const result = window.sketchup.activate_license(licenseKey, email);
      
      if (result && result.success) {
        alert('–õ—ñ—Ü–µ–Ω–∑—ñ—è —É—Å–ø—ñ—à–Ω–æ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞!');
        updateLicenseStatus();
        hideBlockingCard();
        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó
        setTimeout(() => {
          updateLicenseStatus();
        }, 1000);
      } else {
        alert('–ü–æ–º–∏–ª–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –ª—ñ—Ü–µ–Ω–∑—ñ—ó: ' + (result.error || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'));
      }
    } else {
      alert('–§—É–Ω–∫—Ü—ñ—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –ª—ñ—Ü–µ–Ω–∑—ñ—ó –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –ª—ñ—Ü–µ–Ω–∑—ñ—ó:', error);
    alert('–ü–æ–º–∏–ª–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –ª—ñ—Ü–µ–Ω–∑—ñ—ó: ' + error.message);
  }
}

// –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–∞
function checkServerBlockingStatus() {
  try {
    if (window.sketchup && window.sketchup.check_blocking_status) {
      const result = window.sketchup.check_blocking_status();
      
      if (result && result.success) {
        if (result.blocked) {
          showBlockingCard();
        } else {
          hideBlockingCard();
        }
        updateLicenseStatus();
      } else {
        console.warn('–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫—É–≤–∞–Ω–Ω—è:', result.error);
      }
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É –±–ª–æ–∫—É–≤–∞–Ω–Ω—è:', error);
  }
}

// –ü–æ–∫–∞–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
function showBlockingCard() {
  const blockingCard = document.getElementById('blocking-card');
  if (blockingCard) {
    blockingCard.style.display = 'block';
  }
}

// –ü—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è –∫–∞—Ä—Ç–æ—á–∫–∏ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
function hideBlockingCard() {
  const blockingCard = document.getElementById('blocking-card');
  if (blockingCard) {
    blockingCard.style.display = 'none';
  }
}
