# proGran3/skp_preview_extractor.rb
# –ú–æ–¥—É–ª—å –¥–ª—è –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –ø—Ä–µ–≤—å—é –∑ .skp —Ñ–∞–π–ª—ñ–≤ —á–µ—Ä–µ–∑ SketchUp API

require 'fileutils'

module ProGran3
  module SkpPreviewExtractor
    extend self
    
    # –®–ª—è—Ö –¥–æ –ø–∞–ø–∫–∏ –∑ –ø—Ä–µ–≤—å—é
    PREVIEW_PATH = File.join(File.dirname(__FILE__), '..', 'previews')
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É –¥–ª—è –ø—Ä–µ–≤—å—é —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
    Dir.mkdir(PREVIEW_PATH) unless Dir.exist?(PREVIEW_PATH)
    
    # –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—Å—ñ—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
    def extract_preview(component_path, size = 256)
      # –†–æ–∑–±–∏—Ä–∞—î–º–æ —à–ª—è—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: "steles/stele_100x50x8.skp")
      category, filename = component_path.split('/')
      
      # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤–Ω–∏–π —à–ª—è—Ö –¥–æ .skp —Ñ–∞–π–ª–∞
      skp_file_path = File.join(File.dirname(__FILE__), 'assets', category, filename)
      
      # –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–µ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –ø—Ä–µ–≤—å—é - –±–µ–∑ –ª–æ–≥—É–≤–∞–Ω–Ω—è
      
      # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥
      result = extract_preview_from_skp(skp_file_path, size)
      
      if result
        # –ü—Ä–µ–≤—å—é —Å—Ç–≤–æ—Ä–µ–Ω–æ - –±–µ–∑ –ª–æ–≥—É–≤–∞–Ω–Ω—è
        return result
      else
        puts "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–µ–≤—å—é –¥–ª—è: #{component_path}"
        return nil
      end
    end
    
    # –û—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –ø—Ä–µ–≤—å—é
    def extract_preview_from_skp(skp_file_path, output_size = 256)
      # –í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –ø—Ä–µ–≤—å—é - –±–µ–∑ –ª–æ–≥—É–≤–∞–Ω–Ω—è
      
      begin
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —á–µ—Ä–µ–∑ model.definitions.load
        model = Sketchup.active_model
        definitions = model.definitions
        
        definition = definitions.load(skp_file_path)
        
        if definition && definition.respond_to?(:save_thumbnail)
          # –ì–µ–Ω–µ—Ä—É—î–º–æ —à–ª—è—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
          output_path = generate_preview_path(skp_file_path, output_size)
          
          # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–±—É–¥–æ–≤–∞–Ω–µ –ø—Ä–µ–≤—å—é
          success = definition.save_thumbnail(output_path)
          
          if success && File.exist?(output_path) && File.size(output_path) > 0
            puts "  ‚úÖ –ü—Ä–µ–≤—å—é –≤–∏—Ç—è–≥–Ω—É—Ç–æ: #{File.basename(output_path)}"
            puts "  üìè –†–æ–∑–º—ñ—Ä: #{File.size(output_path)} –±–∞–π—Ç"
            
            # –û—á–∏—â–∞—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
            cleanup_loaded_definition(definition, definitions)
            
            return output_path
          else
            puts "  ‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–µ–≤—å—é"
          end
        else
          puts "  ‚ùå –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∞–±–æ save_thumbnail –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"
        end
        
        # –û—á–∏—â–∞—î–º–æ –≤ —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏
        cleanup_loaded_definition(definition, definitions) if definition
        
        nil
        
      rescue => e
        puts "  ‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è: #{e.message}"
        nil
      end
    end
    
    # –û—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    def cleanup_loaded_definition(definition, definitions)
      return unless definition
      
      begin
        # –ü–û–í–ù–Ü–°–¢–Æ –í–Ü–î–ú–û–í–õ–Ø–Ñ–ú–û–°–¨ –í–Ü–î –û–ß–ò–©–ï–ù–ù–Ø!
        # –¶–µ –∑–∞–ø–æ–±—ñ–≥–∞—î –≤–∏–¥–∞–ª–µ–Ω–Ω—é —ñ—Å–Ω—É—é—á–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
        # SketchUp —Å–∞–º –æ—á–∏—Å—Ç–∏—Ç—å –ø–∞–º'—è—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ
        
        puts "  üßπ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –≤ –ø–∞–º'—è—Ç—ñ (–∑–∞—Ö–∏—Å—Ç —ñ—Å–Ω—É—é—á–∏—Ö –µ–∫–∑–µ–º–ø–ª—è—Ä—ñ–≤)"
      rescue => e
        puts "  ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è: #{e.message}"
      end
    end
    
    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —à–ª—è—Ö—É –¥–ª—è –ø—Ä–µ–≤—å—é
    def generate_preview_path(skp_file_path, size)
      filename = File.basename(skp_file_path, '.skp')
      File.join(PREVIEW_PATH, "#{filename}_#{size}x#{size}.png")
    end
    
    # –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è base64 –¥–∞–Ω–∏—Ö –ø—Ä–µ–≤—å—é
    def get_preview_base64(component_path, size = 256)
      preview_path = extract_preview(component_path, size)
      
      if preview_path && File.exist?(preview_path)
        begin
          require 'base64'
          image_data = File.read(preview_path, mode: 'rb')
          base64_data = Base64.strict_encode64(image_data)
          return "data:image/png;base64,#{base64_data}"
        rescue => e
          puts "‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –≤ base64: #{e.message}"
          return nil
        end
      end
      
      nil
    end
    
    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–µ—Ç–æ–¥—É
    def test_extraction
      puts "üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –ø—Ä–µ–≤—å—é..."
      
      # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª
      test_file = Dir.glob("proGran3/assets/**/*.skp").first
      
      if test_file
        puts "üìÅ –¢–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª: #{File.basename(test_file)}"
        
        result = extract_preview_from_skp(test_file, 256)
        
        if result
          puts "‚úÖ –¢–µ—Å—Ç —É—Å–ø—ñ—à–Ω–∏–π: #{File.basename(result)}"
        else
          puts "‚ùå –¢–µ—Å—Ç –Ω–µ–≤–¥–∞–ª–∏–π"
        end
      else
        puts "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–∏–π .skp —Ñ–∞–π–ª"
      end
    end
    
    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–µ–≤—å—é –ø–æ—Ç–æ—á–Ω–æ—ó –º–æ–¥–µ–ª—ñ
    def generate_current_model_preview(size = 512, quality = 'medium')
      puts "üé® –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–µ–≤—å—é –ø–æ—Ç–æ—á–Ω–æ—ó –º–æ–¥–µ–ª—ñ"
      puts "üìê –ü–∞—Ä–∞–º–µ—Ç—Ä–∏: —Ä–æ–∑–º—ñ—Ä=#{size}, —è–∫—ñ—Å—Ç—å=#{quality}"
      
      begin
        puts "üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞–∫—Ç–∏–≤–Ω—É –º–æ–¥–µ–ª—å..."
        model = Sketchup.active_model
        if model.nil?
          puts "‚ùå –ê–∫—Ç–∏–≤–Ω–∞ –º–æ–¥–µ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞"
          return nil
        end
        puts "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞ –º–æ–¥–µ–ª—å –∑–Ω–∞–π–¥–µ–Ω–∞"

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —â–æ—Å—å –≤ –º–æ–¥–µ–ª—ñ
        puts "üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–º—ñ—Å—Ç –º–æ–¥–µ–ª—ñ..."
        if model.entities.length == 0
          puts "‚ùå –ú–æ–¥–µ–ª—å –ø–æ—Ä–æ–∂–Ω—è"
          return nil
        end
        puts "‚úÖ –ú–æ–¥–µ–ª—å –º—ñ—Å—Ç–∏—Ç—å #{model.entities.length} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤"

        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É
        size = size.to_i
        size = [64, size, 2048].sort[1] # –û–±–º–µ–∂—É—î–º–æ —Ä–æ–∑–º—ñ—Ä –≤—ñ–¥ 64 –¥–æ 2048 –ø—ñ–∫—Å–µ–ª—ñ–≤
        puts "üìè –§—ñ–Ω–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä: #{size}x#{size}"

        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        puts "üìÅ –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª..."
        temp_dir = File.join(Dir.tmpdir, "progran3_previews")
        Dir.mkdir(temp_dir) unless Dir.exist?(temp_dir)
        
        timestamp = Time.now.strftime("%Y%m%d_%H%M%S")
        temp_file = File.join(temp_dir, "model_preview_#{timestamp}.png")
        puts "üìÑ –®–ª—è—Ö –¥–æ —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É: #{temp_file}"

        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É
        puts "üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π –≤–∏–¥..."
        view = model.active_view
        if view.nil?
          puts "‚ùå –ê–∫—Ç–∏–≤–Ω–∏–π –≤–∏–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
          return nil
        end
        puts "‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π –≤–∏–¥ –∑–Ω–∞–π–¥–µ–Ω–æ"

        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –≤–∏–¥ –¥–ª—è –ø—Ä–µ–≤—å—é
        puts "üéØ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∏–¥—É –¥–ª—è –ø—Ä–µ–≤—å—é..."
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –≤–∏–¥—É
        original_camera = view.camera
        original_eye = original_camera.eye
        original_target = original_camera.target
        original_up = original_camera.up
        
        begin
          # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —ñ–∑–æ–º–µ—Ç—Ä–∏—á–Ω–∏–π –≤–∏–¥
          puts "üìê –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–∑–æ–º–µ—Ç—Ä–∏—á–Ω–æ–≥–æ –≤–∏–¥—É..."
          view.camera = Sketchup::Camera.new([100, 100, 100], [0, 0, 0], [0, 0, 1])
          
          # –û–Ω–æ–≤–ª—é—î–º–æ –≤–∏–¥
          view.refresh
          
          # Zoom to extents (–ø–æ–∫–∞–∑—É—î–º–æ –≤—Å—é –º–æ–¥–µ–ª—å)
          puts "üîç –ú–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è –¥–æ –≤—Å—ñ—î—ó –º–æ–¥–µ–ª—ñ..."
          view.zoom_extents
          
          # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∏–¥—É
          sleep(0.1)
          
          puts "‚úÖ –í–∏–¥ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –¥–ª—è –ø—Ä–µ–≤—å—é"
          
        rescue => view_error
          puts "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∏–¥—É: #{view_error.message}"
          # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑ –ø–æ—Ç–æ—á–Ω–∏–º –≤–∏–¥–æ–º
        end

        # –ì–µ–Ω–µ—Ä—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±–µ–∑ —Å–∫–ª–∞–¥–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
        puts "üì∏ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä–æ–º #{size}x#{size}"
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ write_image –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–µ–≤—å—é
        # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏: filename, width, height, antialias, compression
        success = view.write_image(temp_file, size, size, true, 0.9)
        
        if success && File.exist?(temp_file) && File.size(temp_file) > 0
          puts "‚úÖ –ü—Ä–µ–≤—å—é —É—Å–ø—ñ—à–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ"
          puts "üìè –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É: #{File.size(temp_file)} –±–∞–π—Ç"
          
          # –ß–∏—Ç–∞—î–º–æ —Ñ–∞–π–ª —ñ –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ base64
          require 'base64'
          image_data = File.binread(temp_file)
          base64_data = Base64.strict_encode64(image_data)
          data_url = "data:image/png;base64,#{base64_data}"
          
          # –†–æ–∑–º—ñ—Ä –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è - –±–µ–∑ –ª–æ–≥—É–≤–∞–Ω–Ω—è
          
          # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
          File.delete(temp_file) if File.exist?(temp_file)
          
          return data_url
        else
          puts "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"
          puts "–§–∞–π–ª —ñ—Å–Ω—É—î: #{File.exist?(temp_file)}, —Ä–æ–∑–º—ñ—Ä: #{File.exist?(temp_file) ? File.size(temp_file) : 'N/A'}"
          return nil
        end

      rescue => e
        puts "‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–µ–≤—å—é: #{e.message}"
        puts "Stack trace: #{e.backtrace.join("\n")}"
        return nil
      ensure
        # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –≤–∏–¥
        begin
          puts "üîÑ –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –≤–∏–¥—É..."
          view.camera = original_camera
          view.refresh
          puts "‚úÖ –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –≤–∏–¥ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ"
        rescue => restore_error
          puts "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∏–¥—É: #{restore_error.message}"
        end
        
        puts "üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–µ–≤—å—é"
      end
    end

    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –º–µ—Ç–æ–¥—É
    def test_universal_extraction
      puts "üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è..."
      
      # –¢–µ—Å—Ç—É—î–º–æ –∑ —Ä—ñ–∑–Ω–∏–º–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏
      test_cases = [
        "steles/stele_100x50x8.skp",
        "stands/stand_50x20x15.skp",
        "flowerbeds/flowerbed_100x50x10.skp"
      ]
      
      test_cases.each do |component_path|
        puts "üìÅ –¢–µ—Å—Ç—É—î–º–æ: #{component_path}"
        result = extract_preview(component_path, 256)
        
        if result
          puts "‚úÖ –£—Å–ø—ñ—à–Ω–æ: #{File.basename(result)}"
        else
          puts "‚ùå –ù–µ–≤–¥–∞–ª–æ"
        end
      end
    end
  end
end

