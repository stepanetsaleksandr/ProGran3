# plugin/proGran3/security/time_validator.rb
# –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —á–∞—Å—É —á–µ—Ä–µ–∑ NTP (–∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ time tampering)

require 'socket'
require 'timeout'
require_relative '../logger'

module ProGran3
  module Security
    class TimeValidator
      
      # NTP —Å–µ—Ä–≤–µ—Ä–∏ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫—ñ–ª—å–∫–∞ –¥–ª—è –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ)
      NTP_SERVERS = [
        'time.google.com',
        'time.windows.com',
        'pool.ntp.org',
        'time.cloudflare.com'
      ].freeze
      
      # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–∞ —Ä—ñ–∑–Ω–∏—Ü—è —á–∞—Å—É (5 —Ö–≤–∏–ª–∏–Ω)
      MAX_TIME_DIFF_SECONDS = 300
      
      # Timeout –¥–ª—è NTP –∑–∞–ø–∏—Ç—É
      NTP_TIMEOUT = 5
      
      # –ö–µ—à NTP —á–∞—Å—É (—â–æ–± –Ω–µ —Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Ç –∫–æ–∂–Ω–æ–≥–æ —Ä–∞–∑—É)
      @@ntp_cache = nil
      @@ntp_cache_timestamp = 0
      CACHE_TTL = 3600  # 1 –≥–æ–¥–∏–Ω–∞
      
      # –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø—Ä–∞–≤–∂–Ω—ñ–π —á–∞—Å –∑ NTP —Å–µ—Ä–≤–µ—Ä—ñ–≤
      # @return [Hash] { time: Time, reliable: Boolean, source: String }
      def self.get_real_time
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à
        now = Time.now.to_i
        if @@ntp_cache && (now - @@ntp_cache_timestamp) < CACHE_TTL
          Logger.debug("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ cached NTP time", "TimeValidator")
          return @@ntp_cache
        end
        
        # –ü—Ä–æ–±—É—î–º–æ –∫–æ–∂–µ–Ω NTP —Å–µ—Ä–≤–µ—Ä
        NTP_SERVERS.each do |server|
          begin
            ntp_time = fetch_ntp_time(server)
            
            result = {
              time: ntp_time,
              reliable: true,
              source: server,
              system_time: Time.now
            }
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∫–µ—à
            @@ntp_cache = result
            @@ntp_cache_timestamp = now
            
            Logger.info("NTP time –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ #{server}", "TimeValidator")
            return result
            
          rescue => e
            Logger.warn("NTP server #{server} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: #{e.message}", "TimeValidator")
            next  # –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Å–µ—Ä–≤–µ—Ä
          end
        end
        
        # –Ø–∫—â–æ –≤—Å—ñ NTP —Å–µ—Ä–≤–µ—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ - –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Å–∏—Å—Ç–µ–º–Ω–∏–π —á–∞—Å
        Logger.warn("–í—Å—ñ NTP —Å–µ—Ä–≤–µ—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–∏—Å—Ç–µ–º–Ω–∏–π —á–∞—Å", "TimeValidator")
        {
          time: Time.now,
          reliable: false,
          source: 'system',
          system_time: Time.now
        }
      end
      
      # –í–∞–ª—ñ–¥—É—î —Å–∏—Å—Ç–µ–º–Ω–∏–π —á–∞—Å
      # @return [Hash] { valid: Boolean, error: String, ntp_time: Time, diff_seconds: Integer }
      def self.validate_system_time
        ntp_result = get_real_time
        system_time = Time.now
        
        # –Ø–∫—â–æ NTP –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π - –¥–æ–∑–≤–æ–ª–∏—Ç–∏ –∞–ª–µ –∑ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è–º
        unless ntp_result[:reliable]
          return {
            valid: true,
            warning: 'NTP —Å–µ—Ä–≤–µ—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ, —á–∞—Å –Ω–µ –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–æ',
            system_time: system_time,
            verified: false
          }
        end
        
        # –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ NTP —á–∞—Å –∑ —Å–∏—Å—Ç–µ–º–Ω–∏–º
        time_diff = (ntp_result[:time] - system_time).abs
        
        if time_diff > MAX_TIME_DIFF_SECONDS
          # –ó–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∞ —Ä—ñ–∑–Ω–∏—Ü—è - –ø—ñ–¥–æ–∑—Ä–∞ –Ω–∞ tampering
          Logger.error("–°–∏—Å—Ç–µ–º–Ω–∏–π —á–∞—Å –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ! –†—ñ–∑–Ω–∏—Ü—è: #{time_diff.to_i}s", "TimeValidator")
          
          {
            valid: false,
            error: "–°–∏—Å—Ç–µ–º–Ω–∏–π —á–∞—Å –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ (—Ä—ñ–∑–Ω–∏—Ü—è: #{format_time_diff(time_diff)})",
            ntp_time: ntp_result[:time],
            system_time: system_time,
            diff_seconds: time_diff.to_i,
            ntp_source: ntp_result[:source]
          }
        else
          # –ß–∞—Å –≤–∞–ª—ñ–¥–Ω–∏–π
          Logger.debug("–°–∏—Å—Ç–µ–º–Ω–∏–π —á–∞—Å –≤–∞–ª—ñ–¥–Ω–∏–π (—Ä—ñ–∑–Ω–∏—Ü—è: #{time_diff.to_i}s)", "TimeValidator")
          
          {
            valid: true,
            ntp_time: ntp_result[:time],
            system_time: system_time,
            diff_seconds: time_diff.to_i,
            ntp_source: ntp_result[:source],
            verified: true
          }
        end
      end
      
      # –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–¥—ñ–π–Ω–∏–π —á–∞—Å (NTP –∞–±–æ system)
      # @return [Time]
      def self.get_trusted_time
        ntp_result = get_real_time
        ntp_result[:time]
      end
      
      private
      
      # Simplified SNTP implementation
      # @param server [String] NTP server hostname
      # @return [Time] NTP time
      def self.fetch_ntp_time(server)
        Timeout.timeout(NTP_TIMEOUT) do
          socket = UDPSocket.new
          
          begin
            # NTP request packet (48 bytes, client mode, version 3)
            request = [0x1B].pack('C') + ("\0" * 47)
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç
            socket.send(request, 0, server, 123)
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            response, _ = socket.recvfrom(48)
            
            # Parse NTP timestamp (bytes 40-43, big-endian unsigned 32-bit)
            transmit_timestamp = response[40..43].unpack1('N')
            
            # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ NTP timestamp –≤ Ruby Time
            # NTP epoch: 1 Jan 1900, Unix epoch: 1 Jan 1970
            # –†—ñ–∑–Ω–∏—Ü—è: 2208988800 —Å–µ–∫—É–Ω–¥
            unix_timestamp = transmit_timestamp - 2208988800
            
            Time.at(unix_timestamp)
            
          ensure
            socket.close
          end
        end
      rescue Timeout::Error
        raise "NTP timeout –¥–ª—è #{server}"
      rescue => e
        raise "NTP error –¥–ª—è #{server}: #{e.message}"
      end
      
      # –§–æ—Ä–º–∞—Ç—É—î —Ä—ñ–∑–Ω–∏—Ü—é —á–∞—Å—É –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
      # @param seconds [Float] –†—ñ–∑–Ω–∏—Ü—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
      # @return [String]
      def self.format_time_diff(seconds)
        if seconds < 60
          "#{seconds.to_i} —Å–µ–∫—É–Ω–¥"
        elsif seconds < 3600
          "#{(seconds / 60).to_i} —Ö–≤–∏–ª–∏–Ω"
        elsif seconds < 86400
          "#{(seconds / 3600).to_i} –≥–æ–¥–∏–Ω"
        else
          "#{(seconds / 86400).to_i} –¥–Ω—ñ–≤"
        end
      end
    end
  end
end

# === –¢–ï–°–¢–£–í–ê–ù–ù–Ø ===
if __FILE__ == $0
  puts "üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è TimeValidator..."
  
  # –¢–µ—Å—Ç 1: –û—Ç—Ä–∏–º–∞–Ω–Ω—è NTP —á–∞—Å—É
  puts "\nüìù –¢–µ—Å—Ç 1: –û—Ç—Ä–∏–º–∞–Ω–Ω—è NTP —á–∞—Å—É..."
  begin
    ntp_result = ProGran3::Security::TimeValidator.get_real_time
    puts "   NTP Time: #{ntp_result[:time]}"
    puts "   System Time: #{ntp_result[:system_time]}"
    puts "   Source: #{ntp_result[:source]}"
    puts "   Reliable: #{ntp_result[:reliable]}"
    puts "   ‚úÖ PASSED"
  rescue => e
    puts "   ‚ö†Ô∏è FAILED: #{e.message}"
  end
  
  # –¢–µ—Å—Ç 2: –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —á–∞—Å—É
  puts "\nüìù –¢–µ—Å—Ç 2: –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —á–∞—Å—É..."
  validation = ProGran3::Security::TimeValidator.validate_system_time
  puts "   Valid: #{validation[:valid]}"
  puts "   Diff: #{validation[:diff_seconds]} seconds" if validation[:diff_seconds]
  puts "   Warning: #{validation[:warning]}" if validation[:warning]
  puts "   Error: #{validation[:error]}" if validation[:error]
  puts "   ‚úÖ PASSED"
  
  # –¢–µ—Å—Ç 3: Consistency (–∫–µ—à)
  puts "\nüìù –¢–µ—Å—Ç 3: Cache consistency..."
  time1 = ProGran3::Security::TimeValidator.get_real_time
  sleep(1)
  time2 = ProGran3::Security::TimeValidator.get_real_time
  
  if time1[:time] == time2[:time]
    puts "   ‚úÖ PASSED: Cache –ø—Ä–∞—Ü—é—î"
  else
    puts "   ‚ö†Ô∏è INFO: Cache –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤ (–º–æ–∂–ª–∏–≤–æ TTL)"
  end
  
  puts "\n‚úÖ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è TimeValidator –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
end

