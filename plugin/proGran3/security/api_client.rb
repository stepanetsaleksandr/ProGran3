# plugin/proGran3/security/api_client.rb
# HTTP –∫–ª—ñ—î–Ω—Ç –¥–ª—è –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—ó –∑ —Å–µ—Ä–≤–µ—Ä–æ–º –ª—ñ—Ü–µ–Ω–∑—ñ–π

require 'net/http'
require 'uri'
require 'json'
require 'openssl'

module ProGran3
  module Security
    class ApiClient
      
      # URL —Å–µ—Ä–≤–µ—Ä–∞ (Vercel)
      API_BASE_URL = 'https://server-hbf7li0u7-provis3ds-projects.vercel.app'.freeze
      
      # Timeout –¥–ª—è –∑–∞–ø–∏—Ç—ñ–≤
      REQUEST_TIMEOUT = 10 # —Å–µ–∫—É–Ω–¥
      
      # HMAC Secret Key (v3.1: server-side secret)
      # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π secret –¥–ª—è –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤
      # –ú–∞—î –∑–±—ñ–≥–∞—Ç–∏—Å—è –∑ HMAC_SECRET_KEY –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ
      # 
      # Security Note: –¶–µ–π –∫–ª—é—á –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–∏–π —Ç—É—Ç, –∞–ª–µ:
      # 1. –ö–ª—ñ—î–Ω—Ç –º–æ–∂–µ –±—É—Ç–∏ –æ–±—Ñ—É—Å–∫–æ–≤–∞–Ω–æ (.rbc)
      # 2. –ó–º—ñ–Ω–∞ –∫–ª—é—á–∞ = –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–ª–∞–≥—ñ–Ω–∞ (–∫–æ–Ω—Ç—Ä–æ–ª—å–æ–≤–∞–Ω–µ)
      # 3. –ö—Ä–∞—â–µ –Ω—ñ–∂ predictable fingerprint-based key
      
      def self.get_secret_key
        # –ì–ª–æ–±–∞–ª—å–Ω–∏–π shared secret (–º–∞—î –∑–±—ñ–≥–∞—Ç–∏—Å—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º)
        # –í production: –æ–±—Ñ—É—Å–∫—É–≤–∞—Ç–∏ –∞–±–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ –¥–∏–Ω–∞–º—ñ—á–Ω–æ
        'ProGran3-HMAC-Global-Secret-2025-v3.1-DO-NOT-SHARE-9a8f7e6d5c4b3a2f1e0d9c8b7a6f5e4d'
      end
      
      SECRET_KEY = nil  # –ë—É–¥–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–∏–Ω–∞–º—ñ—á–Ω–æ —á–µ—Ä–µ–∑ get_secret_key
      
      # –ê–∫—Ç–∏–≤—É—î –ª—ñ—Ü–µ–Ω–∑—ñ—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ
      # @param email [String] Email –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      # @param license_key [String] –ö–ª—é—á –ª—ñ—Ü–µ–Ω–∑—ñ—ó
      # @param fingerprint [String] Hardware fingerprint
      # @return [Hash] { success: Boolean, license: Hash, error: String }
      def self.activate(email, license_key, fingerprint)
        endpoint = '/api/licenses/activate'
        
        payload = {
          user_email: email,
          license_key: license_key,
          system_fingerprint: fingerprint
        }
        
        puts "üì§ –ê–∫—Ç–∏–≤–∞—Ü—ñ—è –ª—ñ—Ü–µ–Ω–∑—ñ—ó: #{license_key[0..8]}..."
        
        response = post_request(endpoint, payload)
        
        if response[:success]
          puts "‚úÖ –õ—ñ—Ü–µ–Ω–∑—ñ—é –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ"
        else
          puts "‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó: #{response[:error]}"
        end
        
        response
        
      rescue => e
        handle_exception('activate', e)
      end
      
      # –í–∞–ª—ñ–¥—É—î –ª—ñ—Ü–µ–Ω–∑—ñ—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ
      # @param license_key [String] –ö–ª—é—á –ª—ñ—Ü–µ–Ω–∑—ñ—ó
      # @param fingerprint [String] Hardware fingerprint
      # @return [Hash] { success: Boolean, valid: Boolean, license: Hash, error: String }
      def self.validate(license_key, fingerprint)
        endpoint = '/api/licenses/validate'
        
        payload = {
          license_key: license_key,
          system_fingerprint: fingerprint
        }
        
        puts "üîç –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ª—ñ—Ü–µ–Ω–∑—ñ—ó: #{license_key[0..8]}..."
        
        response = post_request(endpoint, payload)
        
        if response[:success]
          puts "‚úÖ –õ—ñ—Ü–µ–Ω–∑—ñ—è –≤–∞–ª—ñ–¥–Ω–∞"
        else
          puts "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó: #{response[:error]}"
        end
        
        response
        
      rescue => e
        handle_exception('validate', e)
      end
      
      # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î heartbeat –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      # @param license_key [String] –ö–ª—é—á –ª—ñ—Ü–µ–Ω–∑—ñ—ó
      # @param fingerprint [String] Hardware fingerprint
      # @return [Hash] { success: Boolean }
      def self.heartbeat(license_key, fingerprint)
        endpoint = '/api/heartbeats'
        
        payload = {
          license_key: license_key,
          system_fingerprint: fingerprint,
          plugin_version: '1.0.0',
          timestamp: Time.now.iso8601
        }
        
        # Heartbeat –Ω–µ –≤–∏–≤–æ–¥–∏–º–æ –≤ –ª–æ–≥ (–∑–∞–Ω–∞–¥—Ç–æ —á–∞—Å—Ç–æ)
        
        response = post_request(endpoint, payload, silent: true)
        response
        
      rescue => e
        # Heartbeat –ø–æ–º–∏–ª–∫–∏ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ñ - –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ offline
        { success: false, offline: true, error: e.message }
      end
      
      # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—è (–Ω–µ –±–ª–æ–∫—É—î UI)
      # @param email [String]
      # @param license_key [String]
      # @param fingerprint [String]
      # @param callback [Proc] Callback —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
      def self.activate_async(email, license_key, fingerprint, &callback)
        Thread.new do
          begin
            result = activate(email, license_key, fingerprint)
            callback.call(result) if callback
          rescue => e
            callback.call(handle_exception('activate_async', e)) if callback
          end
        end
      end
      
      # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è
      # @param license_key [String]
      # @param fingerprint [String]
      # @param callback [Proc]
      def self.validate_async(license_key, fingerprint, &callback)
        Thread.new do
          begin
            result = validate(license_key, fingerprint)
            callback.call(result) if callback
          rescue => e
            callback.call(handle_exception('validate_async', e)) if callback
          end
        end
      end
      
      # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤–µ—Ä–∞
      # @return [Boolean]
      def self.server_available?
        uri = URI.parse(API_BASE_URL)
        
        Net::HTTP.start(uri.host, uri.port, use_ssl: uri.scheme == 'https', open_timeout: 3, read_timeout: 3) do |http|
          response = http.head('/')
          response.code.to_i < 500
        end
        
      rescue => e
        puts "‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: #{e.message}"
        false
      end
      
      private
      
      # –°—Ç–≤–æ—Ä—é—î HMAC –ø—ñ–¥–ø–∏—Å –¥–ª—è –∑–∞–ø–∏—Ç—É (v3.0: –∑–∞–≤–∂–¥–∏ –≤–≤—ñ–º–∫–Ω–µ–Ω–æ)
      # @param body [String] JSON —Ç—ñ–ª–æ –∑–∞–ø–∏—Ç—É
      # @param timestamp [Integer] Unix timestamp
      # @return [String] HMAC –ø—ñ–¥–ø–∏—Å (hex)
      def self.create_hmac_signature(body, timestamp)
        # v3.0: –ó–∞–≤–∂–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ HMAC (–Ω–µ –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ!)
        secret = get_secret_key
        
        message = "#{body}#{timestamp}"
        OpenSSL::HMAC.hexdigest('SHA256', secret, message)
      rescue => e
        puts "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è HMAC –ø—ñ–¥–ø–∏—Å—É: #{e.message}"
        nil
      end
      
      # –í–∏–∫–æ–Ω—É—î POST –∑–∞–ø–∏—Ç
      # @param endpoint [String] API endpoint (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ '/api/licenses/activate')
      # @param payload [Hash] –î–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
      # @param silent [Boolean] –ß–∏ –ø—Ä–∏—Ö–æ–≤—É–≤–∞—Ç–∏ –ª–æ–≥–∏
      # @return [Hash]
      def self.post_request(endpoint, payload, silent: false)
        uri = URI.parse("#{API_BASE_URL}#{endpoint}")
        
        puts "üåê POST #{uri}" unless silent
        
        http = Net::HTTP.new(uri.host, uri.port)
        http.use_ssl = (uri.scheme == 'https')
        http.open_timeout = REQUEST_TIMEOUT
        http.read_timeout = REQUEST_TIMEOUT
        
        # –î–ª—è production - –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ SSL —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏
        # –î–ª—è development –º–æ–∂–Ω–∞ –≤–∏–º–∫–Ω—É—Ç–∏ —è–∫—â–æ —î –ø—Ä–æ–±–ª–µ–º–∏
        http.verify_mode = OpenSSL::SSL::VERIFY_PEER
        
        request = Net::HTTP::Post.new(uri.request_uri)
        request['Content-Type'] = 'application/json'
        request['User-Agent'] = 'ProGran3-Plugin/1.0'
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ payload –≤ JSON
        body = payload.to_json
        request.body = body
        
        # –î–æ–¥–∞—î–º–æ HMAC headers (v3.0: –∑–∞–≤–∂–¥–∏!)
        timestamp = Time.now.to_i
        signature = create_hmac_signature(body, timestamp)
        
        if signature
          request['X-Signature'] = signature
          request['X-Timestamp'] = timestamp.to_s
          puts "üîê HMAC –ø—ñ–¥–ø–∏—Å –¥–æ–¥–∞–Ω–æ" unless silent
        else
          puts "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ HMAC –ø—ñ–¥–ø–∏—Å - –∑–∞–ø–∏—Ç –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–º" unless silent
        end
        
        response = http.request(request)
        
        puts "üì• Response: #{response.code}" unless silent
        
        # –î–æ–¥–∞—Ç–∫–æ–≤–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è debug
        unless silent
          puts "üì• Response Body: #{response.body[0..200]}..." if response.body
        end
        
        # –ü–∞—Ä—Å–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        parse_response(response)
        
      rescue Timeout::Error
        {
          success: false,
          offline: true,
          error: 'Request timeout - —Å–µ—Ä–≤–µ—Ä –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î'
        }
        
      rescue SocketError, Errno::ECONNREFUSED => e
        {
          success: false,
          offline: true,
          error: "–ù–µ–º–∞—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º: #{e.message}"
        }
        
      rescue OpenSSL::SSL::SSLError => e
        {
          success: false,
          error: "SSL –ø–æ–º–∏–ª–∫–∞: #{e.message}"
        }
        
      rescue => e
        {
          success: false,
          error: "Network error: #{e.message}"
        }
      end
      
      # –ü–∞—Ä—Å–∏—Ç—å HTTP –≤—ñ–¥–ø–æ–≤—ñ–¥—å
      # @param response [Net::HTTPResponse]
      # @return [Hash]
      def self.parse_response(response)
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –∫–æ–¥
        case response.code.to_i
        when 200, 201
          # –£—Å–ø—ñ—Ö - –ø–∞—Ä—Å–∏–º–æ JSON
          begin
            body = response.body
            return { success: false, error: 'Empty response' } if body.nil? || body.empty?
            
            data = JSON.parse(body, symbolize_names: true)
            
            # API –ø–æ–≤–µ—Ä—Ç–∞—î { success: true/false, data: {...}, error: '...' }
            if data[:success]
              data
            else
              {
                success: false,
                error: data[:error] || 'Unknown error'
              }
            end
            
          rescue JSON::ParserError => e
            {
              success: false,
              error: "Invalid JSON response: #{e.message}"
            }
          end
          
        when 400, 401, 403, 404
          # –î–ª—è –ø–æ–º–∏–ª–æ–∫ —Ç–∞–∫–æ–∂ –Ω–∞–º–∞–≥–∞—î–º–æ—Å—å –ø–∞—Ä—Å–∏—Ç–∏ body —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ
          begin
            body = response.body
            if body && !body.empty?
              data = JSON.parse(body, symbolize_names: true)
              error_message = data[:error] || data[:message] || "HTTP #{response.code}"
            else
              error_message = "HTTP #{response.code}"
            end
          rescue JSON::ParserError
            error_message = "HTTP #{response.code}: #{response.body}"
          end
          
          {
            success: false,
            error: error_message
          }
          
        when 429
          {
            success: false,
            error: 'Too many requests - –∑–∞–±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ'
          }
          
        when 500..599
          {
            success: false,
            error: "Server error (#{response.code}) - –ø—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ"
          }
          
        else
          {
            success: false,
            error: "Unexpected status code: #{response.code}"
          }
        end
      end
      
      # –û–±—Ä–æ–±–∫–∞ –≤–∏–Ω—è—Ç–∫—ñ–≤
      # @param operation [String]
      # @param exception [Exception]
      # @return [Hash]
      def self.handle_exception(operation, exception)
        puts "‚ùå Exception in #{operation}: #{exception.message}"
        puts exception.backtrace.first(3).join("\n") if $DEBUG
        
        {
          success: false,
          error: exception.message,
          offline: exception.is_a?(SocketError) || exception.is_a?(Errno::ECONNREFUSED)
        }
      end
    end
  end
end

# === –¢–ï–°–¢–£–í–ê–ù–ù–Ø ===
if __FILE__ == $0
  puts "üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è API Client..."
  
  # –¢–µ—Å—Ç 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤–µ—Ä–∞
  puts "\nüìù –¢–µ—Å—Ç 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞..."
  available = ProGran3::Security::ApiClient.server_available?
  puts "   #{available ? '‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–Ω–∏–π' : '‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π'}"
  
  # –¢–µ—Å—Ç 2: –°–ø—Ä–æ–±–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó (–∑ –Ω–µ—ñ—Å–Ω—É—é—á–∏–º –∫–ª—é—á–µ–º)
  puts "\nüìù –¢–µ—Å—Ç 2: –í–∞–ª—ñ–¥–∞—Ü—ñ—è (–æ—á—ñ–∫—É—î—Ç—å—Å—è –ø–æ–º–∏–ª–∫–∞)..."
  result = ProGran3::Security::ApiClient.validate('TEST-KEY-12345', 'test_fingerprint')
  puts "   Success: #{result[:success]}"
  puts "   Error: #{result[:error]}" if result[:error]
  
  puts "\n‚úÖ –ë–∞–∑–æ–≤–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
  puts "   –î–µ—Ç–∞–ª—å–Ω—ñ —Ç–µ—Å—Ç–∏ –≤ TEST_STEP_3.rb"
end

