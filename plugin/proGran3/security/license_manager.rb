# LicenseManager - –ù–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞ –ª—ñ—Ü–µ–Ω–∑—É–≤–∞–Ω–Ω—è –±–µ–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
# VERSION: 2025-09-26 - NEW_ARCHITECTURE

require 'net/http'
require 'json'
require 'socket'

module ProGran3
  module Security
    class LicenseManager
      attr_reader :email, :license_key, :hardware_id, :offline_count
      
      def initialize
        @email = nil
        @license_key = nil
        @hardware_id = get_hardware_id
        @offline_count = 0
        @max_offline_hours = 24
        @base_url = ENV['PROGRAN3_TRACKING_URL'] || 'https://progran3-tracking-server-dydv5vbld-provis3ds-projects.vercel.app'
        puts "üîê [LicenseManager] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –Ω–æ–≤—É —Å–∏—Å—Ç–µ–º—É –±–µ–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è"
      end
      
      # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –ª—ñ—Ü–µ–Ω–∑—ñ—è
      def has_license?
        !@email.nil? && !@license_key.nil?
      end
      
      # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π –ø–ª–∞–≥—ñ–Ω
      def is_blocked?
        !has_license?
      end
      
      # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –ª—ñ—Ü–µ–Ω–∑—ñ—ó –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ
      def register_license(email, license_key)
        begin
          puts "üîê [LicenseManager] –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –ª—ñ—Ü–µ–Ω–∑—ñ—ó: #{email} + #{license_key[0..8]}..."
          
          uri = URI("#{@base_url}/api/license/register-simple")
          http = Net::HTTP.new(uri.host, uri.port)
          http.use_ssl = true
          http.read_timeout = 10
          http.open_timeout = 10
          
          request = Net::HTTP::Post.new(uri)
          request['Content-Type'] = 'application/json'
          request.body = {
            email: email,
            license_key: license_key,
            hardware_id: @hardware_id
          }.to_json
          
          response = http.request(request)
          
          if response.code == '200'
            result = JSON.parse(response.body)
            if result['success']
              @email = email
              @license_key = license_key
              puts "‚úÖ [LicenseManager] –õ—ñ—Ü–µ–Ω–∑—ñ—è —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∞"
              return {
                success: true,
                message: result['message'],
                user_license: result['user_license']
              }
            else
              puts "‚ùå [LicenseManager] –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: #{result['error']}"
              return {
                success: false,
                error: result['error']
              }
            end
          else
            puts "‚ùå [LicenseManager] HTTP –ø–æ–º–∏–ª–∫–∞: #{response.code}"
            return {
              success: false,
              error: "HTTP –ø–æ–º–∏–ª–∫–∞: #{response.code}"
            }
          end
        rescue => e
          puts "‚ùå [LicenseManager] –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: #{e.message}"
          return {
            success: false,
            error: e.message
          }
        end
      end
      
      # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ª—ñ—Ü–µ–Ω–∑—ñ—é –¥–ª—è heartbeat
      def get_license_info_for_heartbeat
        if has_license?
          {
            email: @email,
            license_key: @license_key,
            hardware_id: @hardware_id
          }
        else
          nil
        end
      end
      
      # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ UI
      def get_license_display_info
        if has_license?
          {
            email: @email,
            license_key: "#{@license_key[0..8]}...",
            hardware_id: @hardware_id,
            offline_count: @offline_count,
            max_offline_hours: @max_offline_hours
          }
        else
          {
            email: nil,
            license_key: nil,
            hardware_id: @hardware_id,
            offline_count: @offline_count,
            max_offline_hours: @max_offline_hours
          }
        end
      end
      
      # –ó–±—ñ–ª—å—à–µ–Ω–Ω—è offline –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞
      def increment_offline_count
        @offline_count += 1
        puts "üîê [LicenseManager] Offline –ª—ñ—á–∏–ª—å–Ω–∏–∫: #{@offline_count}/#{@max_offline_hours}"
      end
      
      # –°–∫–∏–¥–∞–Ω–Ω—è offline –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞
      def reset_offline_count
        @offline_count = 0
        puts "üîê [LicenseManager] Offline –ª—ñ—á–∏–ª—å–Ω–∏–∫ —Å–∫–∏–Ω—É—Ç–æ"
      end
      
      # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ª—ñ—Ü–µ–Ω–∑—ñ—ó (–¥–ª—è heartbeat)
      def validate_license
        if has_license?
          {
            valid: true,
            email: @email,
            license_key: @license_key,
            hardware_id: @hardware_id,
            offline_count: @offline_count
          }
        else
          {
            valid: false,
            error: 'No license registered'
          }
        end
      end
      
      # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ offline
      def should_show_offline_warning?
        @offline_count > (@max_offline_hours / 2) # –ü—ñ—Å–ª—è 12 –≥–æ–¥–∏–Ω
      end
      
      # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –±–ª–æ–∫—É–≤–∞—Ç–∏ –ø–ª–∞–≥—ñ–Ω
      def should_block_plugin?
        @offline_count >= @max_offline_hours # –ü—ñ—Å–ª—è 24 –≥–æ–¥–∏–Ω
      end
      
      # –û—á–∏—â–µ–Ω–Ω—è –ª—ñ—Ü–µ–Ω–∑—ñ—ó
      def clear_license
        @email = nil
        @license_key = nil
        @offline_count = 0
        puts "üîê [LicenseManager] –õ—ñ—Ü–µ–Ω–∑—ñ—è –æ—á–∏—â–µ–Ω–∞"
      end
      
      private
      
      # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ hardware ID
      def get_hardware_id
        begin
          # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ hostname + username –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ
          hostname = Socket.gethostname.downcase.gsub(/[^a-z0-9]/, '-')
          username = ENV['USERNAME'] || ENV['USER'] || 'sketchup-user'
          "#{hostname}-#{username}".downcase
        rescue => e
          puts "‚ö†Ô∏è [LicenseManager] –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó hardware_id: #{e.message}"
          "unknown-hardware-#{Time.now.to_i}"
        end
      end
    end
  end
end
