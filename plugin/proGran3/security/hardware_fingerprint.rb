# plugin/proGran3/security/hardware_fingerprint.rb
# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ –≤—ñ–¥–±–∏—Ç–∫—É –∞–ø–∞—Ä–∞—Ç–Ω–æ–≥–æ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è –¥–ª—è –ø—Ä–∏–≤'—è–∑–∫–∏ –ª—ñ—Ü–µ–Ω–∑—ñ—ó

require 'digest'
require 'socket'
require 'json'

module ProGran3
  module Security
    class HardwareFingerprint
      
      # –ì–µ–Ω–µ—Ä—É—î —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π fingerprint –¥–ª—è —Ü—å–æ–≥–æ –∫–æ–º–ø'—é—Ç–µ—Ä–∞
      # @return [Hash] { fingerprint: String, components: Hash, timestamp: Integer }
      def self.generate
        components = collect_hardware_components
        fingerprint_string = generate_fingerprint_string(components)
        
        {
          fingerprint: fingerprint_string,
          components: components,
          timestamp: Time.now.to_i,
          version: '3.0'  # v3.0: Machine GUID + flexible validation
        }
      end
      
      # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ fingerprint –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –ø–æ—Ç–æ—á–Ω—ñ–π —Å–∏—Å—Ç–µ–º—ñ
      # @param stored_fingerprint [String] –ó–±–µ—Ä–µ–∂–µ–Ω–∏–π fingerprint
      # @return [Boolean] true —è–∫—â–æ –∑–±—ñ–≥–∞—î—Ç—å—Å—è
      def self.matches?(stored_fingerprint)
        current = generate
        current[:fingerprint] == stored_fingerprint
      end
      
      # Flexible validation: –ø–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ –∑–±—ñ–≥–∞—î—Ç—å—Å—è
      # @param stored_components [Hash] –ó–±–µ—Ä–µ–∂–µ–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
      # @param current_components [Hash] –ü–æ—Ç–æ—á–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
      # @return [Boolean] true —è–∫—â–æ –º—ñ–Ω—ñ–º—É–º 3 –∑ 4 –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ –∑–±—ñ–≥–∞—é—Ç—å—Å—è
      def self.validate_flexible(stored_components, current_components = nil)
        current_components ||= collect_hardware_components
        
        # –ö—Ä–∏—Ç–∏—á–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ (–∞–ø–∞—Ä–∞—Ç–Ω—ñ, —Å–∫–ª–∞–¥–Ω–æ –ø—ñ–¥—Ä–æ–±–∏—Ç–∏)
        critical_keys = [:machine_guid, :volume_serial, :bios_serial, :mac_address]
        
        matches = 0
        critical_keys.each do |key|
          if stored_components[key] && current_components[key]
            matches += 1 if stored_components[key] == current_components[key]
          end
        end
        
        # –ú—ñ–Ω—ñ–º—É–º 3 –∑ 4 –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ –º–∞—î –∑–±—ñ–≥–∞—Ç–∏—Å—è
        matches >= 3
      end
      
      private
      
      # –ó–±–∏—Ä–∞—î –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –∞–ø–∞—Ä–∞—Ç–Ω–æ–≥–æ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è (v3.0: –∞–ø–∞—Ä–∞—Ç–Ω—ñ + —Å–∏—Å—Ç–µ–º–Ω—ñ)
      def self.collect_hardware_components
        components = {}
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
        is_windows = RUBY_PLATFORM.include?('mingw') || RUBY_PLATFORM.include?('mswin')
        
        if is_windows
          # === –†–Ü–í–ï–ù–¨ 1: –ö–†–ò–¢–ò–ß–ù–Ü (–∞–ø–∞—Ä–∞—Ç–Ω—ñ, –¥—É–∂–µ —Å–∫–ª–∞–¥–Ω–æ –∑–º—ñ–Ω–∏—Ç–∏) ===
          
          # Machine GUID - –Ω–∞–π—Å—Ç–∞–±—ñ–ª—å–Ω—ñ—à–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä Windows!
          components[:machine_guid] = get_machine_guid_windows
          
          # Volume Serial Number - —Å–µ—Ä—ñ–π–Ω–∏–π –Ω–æ–º–µ—Ä –¥–∏—Å–∫—É C:
          components[:volume_serial] = get_volume_serial_windows
          
          # === –†–Ü–í–ï–ù–¨ 2: –í–ê–ñ–õ–ò–í–Ü (–∞–ø–∞—Ä–∞—Ç–Ω—ñ —á–µ—Ä–µ–∑ WMI, —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω—ñ) ===
          
          # BIOS Serial - —Å–µ—Ä—ñ–π–Ω–∏–π –Ω–æ–º–µ—Ä BIOS
          components[:bios_serial] = get_bios_serial_windows
          
          # MAC Address - —Ñ—ñ–∑–∏—á–Ω–∞ –º–µ—Ä–µ–∂–µ–≤–∞ –∫–∞—Ä—Ç–∞
          components[:mac_address] = get_mac_address_windows
          
          # === –†–Ü–í–ï–ù–¨ 3: –î–û–î–ê–¢–ö–û–í–Ü (ENV –∑–º—ñ–Ω–Ω—ñ, –ª–µ–≥–∫–æ –∑–º—ñ–Ω–∏—Ç–∏) ===
          
          components[:computername] = ENV['COMPUTERNAME'] || 'unknown_computer'
          components[:username] = ENV['USERNAME'] || ENV['USER'] || 'unknown_user'
          components[:hostname] = get_hostname
          
        else
          # Unix/Mac: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –º–µ—Ç–æ–¥–∏
          components[:hostname] = get_hostname
          components[:username] = ENV['USER'] || 'unknown_user'
          components[:computername] = get_hostname
          
          # –ù–∞–º–∞–≥–∞—î–º–æ—Å—å –æ—Ç—Ä–∏–º–∞—Ç–∏ MAC –Ω–∞ Unix
          components[:mac_address] = get_mac_address_unix
        end
        
        # –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Ç–∞ –≤–µ—Ä—Å—ñ—è Ruby
        components[:platform] = RUBY_PLATFORM
        components[:ruby_version] = RUBY_VERSION
        
        components
      end
      
      # –ì–µ–Ω–µ—Ä—É—î SHA256 hash –∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
      def self.generate_fingerprint_string(components)
        # –°–æ—Ä—Ç—É—î–º–æ –∫–ª—é—á—ñ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—ñ
        data_string = components.sort.to_h.to_json
        Digest::SHA256.hexdigest(data_string)
      end
      
      # === –ú–µ—Ç–æ–¥–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ë–ï–ó –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö –∫–æ–º–∞–Ω–¥ ===
      
      # –û—Ç—Ä–∏–º—É—î Machine GUID –∑ Registry (Windows)
      # –¶–µ –Ω–∞–π—Å—Ç–∞–±—ñ–ª—å–Ω—ñ—à–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä - –Ω–µ –∑–º—ñ–Ω—é—î—Ç—å—Å—è –Ω–∞–≤—ñ—Ç—å –ø—Ä–∏ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤—Ü—ñ Windows
      def self.get_machine_guid_windows
        begin
          require 'win32/registry'
          Win32::Registry::HKEY_LOCAL_MACHINE.open('SOFTWARE\\Microsoft\\Cryptography') do |reg|
            return reg['MachineGuid']
          end
        rescue LoadError, Win32::Registry::Error => e
          # Win32::Registry –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –∞–±–æ –ø–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è
          return 'unknown_machine_guid'
        end
      end
      
      # –û—Ç—Ä–∏–º—É—î Volume Serial Number —á–µ—Ä–µ–∑ Win32API (–±–µ–∑ –∫–æ–Ω—Å–æ–ª—å–Ω–∏—Ö –≤—ñ–∫–æ–Ω!)
      def self.get_volume_serial_windows
        begin
          require 'fiddle'
          
          # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Fiddle –¥–ª—è –≤–∏–∫–ª–∏–∫—É Windows API
          kernel32 = Fiddle.dlopen('kernel32.dll')
          get_volume_info = Fiddle::Function.new(
            kernel32['GetVolumeInformationA'],
            [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, 
             Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, 
             Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT],
            Fiddle::TYPE_INT
          )
          
          # –ü—Ä–∞–≤–∏–ª—å–Ω–µ –≤–∏–¥—ñ–ª–µ–Ω–Ω—è –ø–∞–º'—è—Ç—ñ –¥–ª—è DWORD (4 bytes)
          serial_ptr = Fiddle::Pointer.malloc(Fiddle::SIZEOF_INT, Fiddle::RUBY_FREE)
          root_path = Fiddle::Pointer['C:\\']
          
          result = get_volume_info.call(root_path, nil, 0, serial_ptr, nil, nil, nil, 0)
          
          if result != 0
            # –ü—Ä–∞–≤–∏–ª—å–Ω–µ —á–∏—Ç–∞–Ω–Ω—è DWORD –∑ pointer
            serial_bytes = serial_ptr[0, 4]
            serial_number = serial_bytes.unpack1('L')  # unsigned long (DWORD)
            
            return serial_number.to_s(16).upcase if serial_number > 0
          end
          
          'unknown_volume_serial'
        rescue LoadError, NameError, Fiddle::DLError => e
          # Fiddle –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –∞–±–æ –ø–æ–º–∏–ª–∫–∞ –≤–∏–∫–ª–∏–∫—É
          'unknown_volume_serial'
        end
      end
      
      # –û—Ç—Ä–∏–º—É—î BIOS Serial —á–µ—Ä–µ–∑ WMI (–±–µ–∑ –∫–æ–Ω—Å–æ–ª—å–Ω–∏—Ö –≤—ñ–∫–æ–Ω!)
      def self.get_bios_serial_windows
        begin
          require 'win32ole'
          
          wmi = WIN32OLE.connect("winmgmts://")
          bios_query = wmi.ExecQuery("SELECT SerialNumber FROM Win32_BIOS")
          
          bios_query.each do |bios|
            serial = bios.SerialNumber
            return serial if serial && !serial.empty? && serial != 'To be filled by O.E.M.'
          end
          
          'unknown_bios_serial'
        rescue LoadError, WIN32OLERuntimeError => e
          # WIN32OLE –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –∞–±–æ –ø–æ–º–∏–ª–∫–∞ WMI
          'unknown_bios_serial'
        end
      end
      
      # –û—Ç—Ä–∏–º—É—î MAC Address —á–µ—Ä–µ–∑ WMI (–±–µ–∑ –∫–æ–Ω—Å–æ–ª—å–Ω–∏—Ö –≤—ñ–∫–æ–Ω!)
      def self.get_mac_address_windows
        begin
          require 'win32ole'
          
          wmi = WIN32OLE.connect("winmgmts://")
          adapter_query = wmi.ExecQuery("SELECT MACAddress FROM Win32_NetworkAdapter WHERE PhysicalAdapter=True AND MACAddress IS NOT NULL")
          
          adapter_query.each do |adapter|
            mac = adapter.MACAddress
            return mac if mac && !mac.empty?
          end
          
          'unknown_mac_address'
        rescue LoadError, WIN32OLERuntimeError => e
          # WIN32OLE –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –∞–±–æ –ø–æ–º–∏–ª–∫–∞ WMI
          'unknown_mac_address'
        end
      end
      
      # –û—Ç—Ä–∏–º—É—î MAC Address –Ω–∞ Unix/Mac
      def self.get_mac_address_unix
        begin
          # –ü—Ä–æ–±—É—î–º–æ —á–µ—Ä–µ–∑ ifconfig
          output = `ifconfig 2>/dev/null`.encode('UTF-8', invalid: :replace, undef: :replace)
          mac = output.scan(/([0-9a-fA-F]{2}[:-]){5}[0-9a-fA-F]{2}/).first
          return mac.join if mac
          
          'unknown_mac_address'
        rescue => e
          'unknown_mac_address'
        end
      end
      
      # –û—Ç—Ä–∏–º—É—î hostname —Å–∏—Å—Ç–µ–º–∏
      def self.get_hostname
        begin
          Socket.gethostname.downcase
        rescue => e
          'unknown_host'
        end
      end
      
      # === Utility –º–µ—Ç–æ–¥–∏ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ ===
      
      # –í–∏–≤–µ—Å—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ fingerprint (–¥–ª—è –¥–µ–±–∞–≥—É)
      def self.debug_info
        fp_data = generate
        
        puts "\n" + "="*60
        puts "üîç Hardware Fingerprint Debug Info"
        puts "="*60
        
        puts "\nüìã –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∏:"
        fp_data[:components].each do |key, value|
          puts "  #{key.to_s.ljust(15)}: #{value}"
        end
        
        puts "\nüîê Fingerprint:"
        puts "  #{fp_data[:fingerprint]}"
        
        puts "\n‚è∞ Timestamp:"
        puts "  #{Time.at(fp_data[:timestamp])}"
        
        puts "\nüìä –í–µ—Ä—Å—ñ—è:"
        puts "  #{fp_data[:version]}"
        
        puts "="*60 + "\n"
        
        fp_data
      end
      
      # –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
      def self.to_json
        require 'json'
        generate.to_json
      end
    end
  end
end

# === –¢–ï–°–¢–£–í–ê–ù–ù–Ø (—Ä–æ–∑–∫–æ–º–µ–Ω—Ç—É–π—Ç–µ –¥–ª—è —Ç–µ—Å—Ç—É) ===
if __FILE__ == $0
  puts "üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Hardware Fingerprint..."
  
  # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è fingerprint
  fp = ProGran3::Security::HardwareFingerprint.generate
  
  puts "\n‚úÖ Fingerprint –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ:"
  puts "   #{fp[:fingerprint]}"
  
  puts "\nüìã –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∏:"
  fp[:components].each do |key, value|
    puts "   #{key}: #{value}"
  end
  
  # –¢–µ—Å—Ç —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è
  puts "\nüîç –¢–µ—Å—Ç —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è..."
  matches = ProGran3::Security::HardwareFingerprint.matches?(fp[:fingerprint])
  puts "   #{matches ? '‚úÖ –ó–ë–Ü–ì–ê–Ñ–¢–¨–°–Ø' : '‚ùå –ù–ï –ó–ë–Ü–ì–ê–Ñ–¢–¨–°–Ø'}"
  
  # Debug info
  puts "\nüêõ Debug —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:"
  ProGran3::Security::HardwareFingerprint.debug_info
end


