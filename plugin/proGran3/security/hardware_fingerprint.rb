# plugin/proGran3/security/hardware_fingerprint.rb
# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ –≤—ñ–¥–±–∏—Ç–∫—É –∞–ø–∞—Ä–∞—Ç–Ω–æ–≥–æ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è –¥–ª—è –ø—Ä–∏–≤'—è–∑–∫–∏ –ª—ñ—Ü–µ–Ω–∑—ñ—ó

require 'digest'
require 'socket'

module ProGran3
  module Security
    class HardwareFingerprint
      
      # –ì–µ–Ω–µ—Ä—É—î —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π fingerprint –¥–ª—è —Ü—å–æ–≥–æ –∫–æ–º–ø'—é—Ç–µ—Ä–∞
      # @return [Hash] { fingerprint: String, components: Hash, timestamp: Integer }
      def self.generate
        components = collect_hardware_components
        fingerprint_string = generate_fingerprint_string(components)
        
        {
          fingerprint: fingerprint_string,
          components: components,
          timestamp: Time.now.to_i,
          version: '1.0'
        }
      end
      
      # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ fingerprint –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –ø–æ—Ç–æ—á–Ω—ñ–π —Å–∏—Å—Ç–µ–º—ñ
      # @param stored_fingerprint [String] –ó–±–µ—Ä–µ–∂–µ–Ω–∏–π fingerprint
      # @return [Boolean] true —è–∫—â–æ –∑–±—ñ–≥–∞—î—Ç—å—Å—è
      def self.matches?(stored_fingerprint)
        current = generate
        current[:fingerprint] == stored_fingerprint
      end
      
      private
      
      # –ó–±–∏—Ä–∞—î –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –∞–ø–∞—Ä–∞—Ç–Ω–æ–≥–æ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è
      def self.collect_hardware_components
        components = {}
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
        is_windows = RUBY_PLATFORM.include?('mingw') || RUBY_PLATFORM.include?('mswin')
        
        if is_windows
          components[:motherboard] = get_motherboard_serial_windows
          components[:cpu] = get_cpu_id_windows
          components[:mac] = get_primary_mac_windows
          components[:disk] = get_disk_serial_windows
        else
          # Fallback –¥–ª—è —ñ–Ω—à–∏—Ö –û–°
          components[:motherboard] = 'unix_system'
          components[:cpu] = 'unix_cpu'
          components[:mac] = get_mac_address_unix
          components[:disk] = 'unix_disk'
        end
        
        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∏ (–º–µ–Ω—à —Å—Ç–∞–±—ñ–ª—å–Ω—ñ, –∞–ª–µ –∫–æ—Ä–∏—Å–Ω—ñ)
        components[:hostname] = get_hostname
        components[:platform] = RUBY_PLATFORM
        
        components
      end
      
      # –ì–µ–Ω–µ—Ä—É—î SHA256 hash –∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
      def self.generate_fingerprint_string(components)
        # –°–æ—Ä—Ç—É—î–º–æ –∫–ª—é—á—ñ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—ñ
        data_string = components.sort.to_h.to_json
        Digest::SHA256.hexdigest(data_string)
      end
      
      # === Windows specific methods ===
      
      def self.get_motherboard_serial_windows
        begin
          result = `wmic baseboard get serialnumber /value 2>nul`.encode('UTF-8', invalid: :replace, undef: :replace)
          serial = result.scan(/SerialNumber=(.+)/).flatten.first&.strip
          
          # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –≤—ñ–¥ –≤–∏—Ä–æ–±–Ω–∏–∫—ñ–≤
          if serial && !serial.empty? && 
             serial != 'To be filled by O.E.M.' && 
             serial != 'Default string' &&
             serial != 'System Serial Number'
            return serial
          end
        rescue => e
          puts "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è motherboard serial: #{e.message}"
        end
        
        'unknown_mb'
      end
      
      def self.get_cpu_id_windows
        begin
          result = `wmic cpu get processorid /value 2>nul`.encode('UTF-8', invalid: :replace, undef: :replace)
          cpu_id = result.scan(/ProcessorId=(.+)/).flatten.first&.strip
          
          return cpu_id if cpu_id && !cpu_id.empty?
        rescue => e
          puts "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è CPU ID: #{e.message}"
        end
        
        'unknown_cpu'
      end
      
      def self.get_primary_mac_windows
        begin
          result = `getmac /v /fo csv 2>nul`.encode('UTF-8', invalid: :replace, undef: :replace)
          
          # –í–∏—Ç—è–≥—É—î–º–æ –≤—Å—ñ MAC –∞–¥—Ä–µ—Å–∏
          macs = result.scan(/"([A-F0-9]{2}-[A-F0-9]{2}-[A-F0-9]{2}-[A-F0-9]{2}-[A-F0-9]{2}-[A-F0-9]{2})"/).flatten
          
          # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –≤—ñ—Ä—Ç—É–∞–ª—å–Ω—ñ –∞–¥–∞–ø—Ç–µ—Ä–∏
          physical_macs = macs.reject { |mac| is_virtual_mac?(mac) }
          
          # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–µ—Ä—à–∏–π —Ñ—ñ–∑–∏—á–Ω–∏–π MAC
          return physical_macs.first if physical_macs.any?
        rescue => e
          puts "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è MAC –∞–¥—Ä–µ—Å–∏: #{e.message}"
        end
        
        'unknown_mac'
      end
      
      def self.get_disk_serial_windows
        begin
          result = `wmic diskdrive get serialnumber /value 2>nul`.encode('UTF-8', invalid: :replace, undef: :replace)
          serials = result.scan(/SerialNumber=(.+)/).flatten.map(&:strip)
          
          # –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à–∏–π –Ω–µ–ø—É—Å—Ç–∏–π serial
          serial = serials.find { |s| s && !s.empty? }
          
          return serial if serial
        rescue => e
          puts "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è disk serial: #{e.message}"
        end
        
        'unknown_disk'
      end
      
      # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ MAC –∞–¥—Ä–µ—Å–∞ –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∞
      def self.is_virtual_mac?(mac)
        virtual_prefixes = [
          '00-05-69', '00-0C-29', '00-1C-14', '00-50-56', # VMware
          '08-00-27', '0A-00-27',                         # VirtualBox
          '00-15-5D',                                      # Hyper-V
          '00-16-3E',                                      # Xen
          '00-FF-'                                         # Microsoft Loopback
        ]
        
        mac_upper = mac.upcase
        virtual_prefixes.any? { |prefix| mac_upper.start_with?(prefix) }
      end
      
      # === Unix/Mac specific methods ===
      
      def self.get_mac_address_unix
        begin
          # –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ ifconfig –∞–±–æ ip
          result = `ifconfig 2>/dev/null || ip addr 2>/dev/null`
          macs = result.scan(/([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})/)
          return macs.first.join if macs.any?
        rescue => e
          puts "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è MAC (Unix): #{e.message}"
        end
        
        'unknown_mac_unix'
      end
      
      # === Common methods ===
      
      def self.get_hostname
        begin
          Socket.gethostname.downcase
        rescue => e
          puts "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è hostname: #{e.message}"
          'unknown_host'
        end
      end
      
      # === Utility methods ===
      
      # –í–∏–≤–µ—Å—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ fingerprint (–¥–ª—è –¥–µ–±–∞–≥—É)
      def self.debug_info
        fp_data = generate
        
        puts "\n" + "="*60
        puts "üîç Hardware Fingerprint Debug Info"
        puts "="*60
        
        puts "\nüìã –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∏:"
        fp_data[:components].each do |key, value|
          puts "  #{key.to_s.ljust(15)}: #{value}"
        end
        
        puts "\nüîê Fingerprint:"
        puts "  #{fp_data[:fingerprint]}"
        
        puts "\n‚è∞ Timestamp:"
        puts "  #{Time.at(fp_data[:timestamp])}"
        
        puts "\nüìä –í–µ—Ä—Å—ñ—è:"
        puts "  #{fp_data[:version]}"
        
        puts "="*60 + "\n"
        
        fp_data
      end
      
      # –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
      def self.to_json
        require 'json'
        generate.to_json
      end
    end
  end
end

# === –¢–ï–°–¢–£–í–ê–ù–ù–Ø (—Ä–æ–∑–∫–æ–º–µ–Ω—Ç—É–π—Ç–µ –¥–ª—è —Ç–µ—Å—Ç—É) ===
if __FILE__ == $0
  puts "üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Hardware Fingerprint..."
  
  # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è fingerprint
  fp = ProGran3::Security::HardwareFingerprint.generate
  
  puts "\n‚úÖ Fingerprint –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ:"
  puts "   #{fp[:fingerprint]}"
  
  puts "\nüìã –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∏:"
  fp[:components].each do |key, value|
    puts "   #{key}: #{value}"
  end
  
  # –¢–µ—Å—Ç —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è
  puts "\nüîç –¢–µ—Å—Ç —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è..."
  matches = ProGran3::Security::HardwareFingerprint.matches?(fp[:fingerprint])
  puts "   #{matches ? '‚úÖ –ó–ë–Ü–ì–ê–Ñ–¢–¨–°–Ø' : '‚ùå –ù–ï –ó–ë–Ü–ì–ê–Ñ–¢–¨–°–Ø'}"
  
  # Debug info
  puts "\nüêõ Debug —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:"
  ProGran3::Security::HardwareFingerprint.debug_info
end


