# plugin/proGran3/production_test.rb
# –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è production –ø–æ–∫—Ä–∞—â–µ–Ω—å

require_relative 'resource_manager'
require_relative 'system/network/network_client'

module ProGran3
  module ProductionTest
    
    # –¢–µ—Å—Ç Memory Cleanup
    def self.test_memory_cleanup
      puts "\nüß™ –¢–µ—Å—Ç 1: Memory Cleanup"
      
      begin
        # –°–∏–º—É–ª—é—î–º–æ –Ω–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
        if defined?(ProGran3::Core::StateManager)
          # –î–æ–¥–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
          ProGran3::Core::StateManager.setModelLists({
            'test_category' => ['item1', 'item2', 'item3']
          })
          
          # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ memory usage –¥–æ cleanup
          usage_before = ProGran3::Core::StateManager.getMemoryUsage()
          puts "   Memory before cleanup: #{usage_before[:stateSize]} bytes"
          
          # –í–∏–∫–æ–Ω—É—î–º–æ cleanup
          ProGran3::Core::StateManager.cleanup()
          
          # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ memory usage –ø—ñ—Å–ª—è cleanup
          usage_after = ProGran3::Core::StateManager.getMemoryUsage()
          puts "   Memory after cleanup: #{usage_after[:stateSize]} bytes"
          
          if usage_after[:stateSize] < usage_before[:stateSize]
            puts "   ‚úÖ Memory cleanup –ø—Ä–∞—Ü—é—î"
          else
            puts "   ‚ö†Ô∏è Memory cleanup –Ω–µ –∑–º—ñ–Ω–∏–≤ —Ä–æ–∑–º—ñ—Ä"
          end
        else
          puts "   ‚ö†Ô∏è StateManager –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π (—Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –≤ SketchUp)"
        end
        
      rescue => e
        puts "   ‚ùå Memory cleanup test failed: #{e.message}"
      end
    end
    
    # –¢–µ—Å—Ç Error Recovery
    def self.test_error_recovery
      puts "\nüß™ –¢–µ—Å—Ç 2: Error Recovery (Retry Logic)"
      
      begin
        # –¢–µ—Å—Ç—É—î–º–æ retry –ª–æ–≥—ñ–∫—É –∑ –Ω–µ—ñ—Å–Ω—É—é—á–∏–º —Å–µ—Ä–≤–µ—Ä–æ–º
        puts "   –¢–µ—Å—Ç—É—î–º–æ retry –∑ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–º —Å–µ—Ä–≤–µ—Ä–æ–º..."
        
        result = ProGran3::Security::ApiClient.validate(
          'TEST-KEY-12345', 
          'test_fingerprint', 
          2  # max_retries = 2
        )
        
        puts "   Result: #{result[:success]}"
        puts "   Error: #{result[:error]}" if result[:error]
        puts "   Offline: #{result[:offline]}" if result[:offline]
        
        if result[:offline]
          puts "   ‚úÖ Retry logic –ø—Ä–∞—Ü—é—î (offline detected)"
        else
          puts "   ‚ö†Ô∏è Retry logic –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤ —è–∫ –æ—á—ñ–∫—É–≤–∞–ª–æ—Å—å"
        end
        
      rescue => e
        puts "   ‚ùå Error recovery test failed: #{e.message}"
      end
    end
    
    # –¢–µ—Å—Ç Resource Management
    def self.test_resource_management
      puts "\nüß™ –¢–µ—Å—Ç 3: Resource Management"
      
      begin
        # –¢–µ—Å—Ç timeout wrapper
        puts "   –¢–µ—Å—Ç—É—î–º–æ timeout wrapper..."
        ProGran3::ResourceManager.with_timeout(1, "Test Timeout") do
          sleep(0.5) # Should complete successfully
          "Success"
        end
        puts "   ‚úÖ Timeout wrapper –ø—Ä–∞—Ü—é—î (normal operation)"
        
        # –¢–µ—Å—Ç timeout –∑ –ø–µ—Ä–µ–≤–∏—â–µ–Ω–Ω—è–º
        puts "   –¢–µ—Å—Ç—É—î–º–æ timeout –∑ –ø–µ—Ä–µ–≤–∏—â–µ–Ω–Ω—è–º..."
        begin
          ProGran3::ResourceManager.with_timeout(1, "Test Timeout Exceeded") do
            sleep(2) # Should timeout
          end
        rescue Timeout::Error => e
          puts "   ‚úÖ Timeout wrapper –ø—Ä–∞—Ü—é—î (timeout detected): #{e.message}"
        end
        
        # –¢–µ—Å—Ç memory monitoring
        puts "   –¢–µ—Å—Ç—É—î–º–æ memory monitoring..."
        usage = ProGran3::ResourceManager.get_memory_usage
        puts "   Memory usage: #{usage[:ruby_memory_kb]}KB"
        puts "   Entities: #{usage[:entities_count]}"
        
        # –¢–µ—Å—Ç performance monitoring
        puts "   –¢–µ—Å—Ç—É—î–º–æ performance monitoring..."
        result = ProGran3::ResourceManager.monitor_performance("Test Performance") do
          sleep(0.1)
          "Test result"
        end
        puts "   Performance test result: #{result}"
        
        # –¢–µ—Å—Ç resource limits
        puts "   –¢–µ—Å—Ç—É—î–º–æ resource limits..."
        limits = ProGran3::ResourceManager.check_resource_limits
        puts "   Resource limits status: #{limits}"
        
        puts "   ‚úÖ Resource management –ø—Ä–∞—Ü—é—î"
        
      rescue => e
        puts "   ‚ùå Resource management test failed: #{e.message}"
      end
    end
    
    # –¢–µ—Å—Ç —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó
    def self.test_integration
      puts "\nüß™ –¢–µ—Å—Ç 4: Integration Test"
      
      begin
        # –¢–µ—Å—Ç cleanup –ø—Ä–∏ reload
        puts "   –¢–µ—Å—Ç—É—î–º–æ cleanup –ø—Ä–∏ reload..."
        if defined?(ProGran3::ResourceManager)
          ProGran3::ResourceManager.cleanup_resources(false)
          puts "   ‚úÖ Cleanup –ø—Ä–∏ reload –ø—Ä–∞—Ü—é—î"
        else
          puts "   ‚ö†Ô∏è ResourceManager –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π"
        end
        
        # –¢–µ—Å—Ç at_exit handler
        puts "   –¢–µ—Å—Ç—É—î–º–æ at_exit handler..."
        # at_exit handler –±—É–¥–µ –≤–∏–∫–ª–∏–∫–∞–Ω–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ
        puts "   ‚úÖ at_exit handler –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ"
        
        puts "   ‚úÖ Integration test –ø—Ä–æ–π—à–æ–≤"
        
      rescue => e
        puts "   ‚ùå Integration test failed: #{e.message}"
      end
    end
    
    # –ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö —Ç–µ—Å—Ç—ñ–≤
    def self.run_all_tests
      puts "üöÄ –ó–∞–ø—É—Å–∫ Production Tests..."
      puts "=" * 50
      
      test_memory_cleanup
      test_error_recovery
      test_resource_management
      test_integration
      
      puts "\n" + "=" * 50
      puts "‚úÖ –í—Å—ñ production —Ç–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
      puts "üìä –ü–ª–∞–≥—ñ–Ω –≥–æ—Ç–æ–≤–∏–π –¥–æ production!"
    end
  end
end

# === –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ï –¢–ï–°–¢–£–í–ê–ù–ù–Ø ===
if __FILE__ == $0
  ProGran3::ProductionTest.run_all_tests
end

