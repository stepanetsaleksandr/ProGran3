# plugin/proGran3/system/network/network_client.rb
# HTTP –∫–ª—ñ—î–Ω—Ç –¥–ª—è –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—ó –∑ —Å–µ—Ä–≤–µ—Ä–æ–º

require 'net/http'
require 'uri'
require 'json'
require 'openssl'
require_relative '../utils/endpoint_validator'
require_relative '../core/config_manager'

module ProGran3
  module System
    module Network
      class NetworkClient
        
        # –ß–∏—Ç–∞—î–º–æ URL –∑ –∫–æ–Ω—Ñ—ñ–≥—É
        def self.load_api_config
          config_path = File.join(File.dirname(__FILE__), '..', '..', '..', 'config.json')
          if File.exist?(config_path)
            config = JSON.parse(File.read(config_path))
            {
              base_url: config.dig('api', 'base_url') || 'https://server-hbf7li0u7-provis3ds-projects.vercel.app',
              timeout: config.dig('api', 'timeout') || 10,
              retry_attempts: config.dig('api', 'retry_attempts') || 3
            }
          else
            # Fallback —è–∫—â–æ config –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
            {
              base_url: 'https://server-hbf7li0u7-provis3ds-projects.vercel.app',
              timeout: 10,
              retry_attempts: 3
            }
          end
        rescue => e
          puts "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É: #{e.message}. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ default."
          {
            base_url: 'https://server-hbf7li0u7-provis3ds-projects.vercel.app',
            timeout: 10,
            retry_attempts: 3
          }
        end
        
        # URL —Å–µ—Ä–≤–µ—Ä–∞ (–∑ –∫–æ–Ω—Ñ—ñ–≥—É)
        API_BASE_URL = load_api_config[:base_url].freeze
        
        # Timeout –¥–ª—è –∑–∞–ø–∏—Ç—ñ–≤ (–∑ –∫–æ–Ω—Ñ—ñ–≥—É)
        REQUEST_TIMEOUT = load_api_config[:timeout]
        
        # HMAC Secret Key (v3.2: obfuscated —á–µ—Ä–µ–∑ ConfigManager)
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π secret –¥–ª—è –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤
        # –ú–∞—î –∑–±—ñ–≥–∞—Ç–∏—Å—è –∑ HMAC_SECRET_KEY –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ
        # 
        # ‚ö†Ô∏è –í–ê–ñ–õ–ò–í–û: –¶–µ–π secret –º–∞—î –±—É—Ç–∏ —ñ–¥–µ–Ω—Ç–∏—á–Ω–∏–º –Ω–∞ –∫–ª—ñ—î–Ω—Ç—ñ —ñ —Å–µ—Ä–≤–µ—Ä—ñ!
        # –ó–º—ñ–Ω–∞ —Ü—å–æ–≥–æ –∫–ª—é—á–∞ –∑–ª–∞–º–∞—î –≤—Å—ñ —ñ—Å–Ω—É—é—á—ñ –ª—ñ—Ü–µ–Ω–∑—ñ—ó!
        def self.get_secret_key
          # v3.2: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ConfigManager –∑–∞–º—ñ—Å—Ç—å hardcoded secret
          ConfigManager.get_hmac_secret
        end
        
        # –ê–∫—Ç–∏–≤–∞—Ü—ñ—è –ª—ñ—Ü–µ–Ω–∑—ñ—ó
        # @param email [String] Email –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        # @param license_key [String] –ö–ª—é—á –ª—ñ—Ü–µ–Ω–∑—ñ—ó
        # @param fingerprint [String] Hardware fingerprint
        # @param max_retries [Integer] –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–±
        # @return [Hash] { success: Boolean, data: Hash, error: String }
        def self.activate(email, license_key, fingerprint, max_retries = 3)
          endpoint = '/api/licenses/activate'
          
          payload = {
            email: email,
            license_key: license_key,
            system_fingerprint: fingerprint
          }
          
          post_request(endpoint, payload, max_retries)
        end
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ª—ñ—Ü–µ–Ω–∑—ñ—ó
        # @param license_key [String] –ö–ª—é—á –ª—ñ—Ü–µ–Ω–∑—ñ—ó
        # @param fingerprint [String] Hardware fingerprint
        # @param max_retries [Integer] –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–±
        # @return [Hash] { success: Boolean, data: Hash, error: String }
        def self.validate(license_key, fingerprint, max_retries = 3)
          endpoint = '/api/licenses/validate'
          
          payload = {
            license_key: license_key,
            system_fingerprint: fingerprint
          }
          
          post_request(endpoint, payload, max_retries)
        end
        
        # Heartbeat (–≤—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ)
        # @param license_key [String] –ö–ª—é—á –ª—ñ—Ü–µ–Ω–∑—ñ—ó
        # @param fingerprint [String] Hardware fingerprint
        # @return [Hash] { success: Boolean, data: Hash, error: String }
        def self.heartbeat(license_key, fingerprint)
          endpoint = '/api/heartbeats'
          
          payload = {
            license_key: license_key,
            system_fingerprint: fingerprint,
            timestamp: Time.now.to_i,
            event_type: 'heartbeat',
            plugin_version: '3.2.1',
            platform: RUBY_PLATFORM
          }
          
          post_request(endpoint, payload, 1)  # Heartbeat –Ω–µ retry
        end
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤–µ—Ä–∞
        # @return [Boolean] true —è–∫—â–æ —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–Ω–∏–π
        def self.server_available?
          begin
            uri = URI(API_BASE_URL)
            http = Net::HTTP.new(uri.host, uri.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_PEER
            http.read_timeout = 5
            http.open_timeout = 5
            
            response = http.get('/api/systems')
            response.code.to_i == 200
            
          rescue => e
            puts "‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: #{e.message}"
            false
          end
        end
        
        # –í–∏–∫–æ–Ω—É—î POST –∑–∞–ø–∏—Ç
        # @param endpoint [String] API endpoint (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ '/api/licenses/activate')
        # @param payload [Hash] –î–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
        # @param max_retries [Integer] –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–±
        # @param silent [Boolean] –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ –ª–æ–≥–∏
        # @return [Hash] { success: Boolean, data: Hash, error: String, offline: Boolean }
        def self.post_request(endpoint, payload, max_retries = 3, silent = false)
          uri = URI(API_BASE_URL + endpoint)
          
          # –í–∞–ª—ñ–¥–∞—Ü—ñ—è URL (security check)
          unless EndpointValidator.validate_url(uri.to_s)
            return {
              success: false,
              error: 'Invalid server URL',
              offline: false
            }
          end
          
          # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ payload –≤ JSON
          body = payload.to_json
          
          # –°—Ç–≤–æ—Ä—é—î–º–æ HTTP –∑–∞–ø–∏—Ç
          request = Net::HTTP::Post.new(uri)
          request['Content-Type'] = 'application/json'
          request['User-Agent'] = 'ProGran3-Plugin/3.2.1'
          
          # –î–æ–¥–∞—î–º–æ HMAC headers (v3.0: –∑–∞–≤–∂–¥–∏!)
          timestamp = Time.now.to_i
          signature = create_hmac_signature(body, timestamp)
          
          if signature
            request['X-HMAC-Signature'] = signature
            request['X-Timestamp'] = timestamp.to_s
            puts "üîê HMAC –ø—ñ–¥–ø–∏—Å –¥–æ–¥–∞–Ω–æ" unless silent
          else
            puts "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ HMAC –ø—ñ–¥–ø–∏—Å - –∑–∞–ø–∏—Ç –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–º" unless silent
          end
          
          # –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –∑ retry –ª–æ–≥—ñ–∫–æ—é
          last_error = nil
          
          (1..max_retries).each do |attempt|
            begin
              puts "üåê –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–∏—Ç—É (—Å–ø—Ä–æ–±–∞ #{attempt}/#{max_retries})..." unless silent
              
              http = Net::HTTP.new(uri.host, uri.port)
              http.use_ssl = true
              http.verify_mode = OpenSSL::SSL::VERIFY_PEER
              http.read_timeout = REQUEST_TIMEOUT
              http.open_timeout = REQUEST_TIMEOUT
              
              response = http.request(request)
              
              if response.code.to_i == 200
                data = JSON.parse(response.body, symbolize_names: true)
                puts "‚úÖ –ó–∞–ø–∏—Ç —É—Å–ø—ñ—à–Ω–∏–π" unless silent
                
                return {
                  success: true,
                  data: data,
                  offline: false
                }
              else
                error_msg = "HTTP #{response.code}: #{response.message}"
                puts "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: #{error_msg}" unless silent
                
                return {
                  success: false,
                  error: error_msg,
                  offline: false
                }
              end
              
            rescue Net::TimeoutError, Net::OpenTimeout, Net::ReadTimeout => e
              last_error = e
              puts "‚è∞ Timeout (—Å–ø—Ä–æ–±–∞ #{attempt}/#{max_retries}): #{e.message}" unless silent
              
              if attempt < max_retries
                sleep(2 ** attempt)  # Exponential backoff
              end
              
            rescue => e
              last_error = e
              puts "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è (—Å–ø—Ä–æ–±–∞ #{attempt}/#{max_retries}): #{e.message}" unless silent
              
              if attempt < max_retries
                sleep(2 ** attempt)  # Exponential backoff
              end
            end
          end
          
          # –í—Å—ñ —Å–ø—Ä–æ–±–∏ –Ω–µ–≤–¥–∞–ª—ñ
          puts "‚ùå –í—Å—ñ —Å–ø—Ä–æ–±–∏ –Ω–µ–≤–¥–∞–ª—ñ. –û—Å—Ç–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∞: #{last_error.message}" unless silent
          
          {
            success: false,
            error: last_error.message,
            offline: true
          }
        end
        
        # –°—Ç–≤–æ—Ä—é—î HMAC –ø—ñ–¥–ø–∏—Å –¥–ª—è –∑–∞–ø–∏—Ç—É (v3.0: –∑–∞–≤–∂–¥–∏ –≤–≤—ñ–º–∫–Ω–µ–Ω–æ)
        # @param body [String] JSON —Ç—ñ–ª–æ –∑–∞–ø–∏—Ç—É
        # @param timestamp [Integer] Unix timestamp
        # @return [String] HMAC –ø—ñ–¥–ø–∏—Å (hex)
        def self.create_hmac_signature(body, timestamp)
          # v3.0: –ó–∞–≤–∂–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ HMAC (–Ω–µ –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ!)
          secret = get_secret_key
          return nil unless secret
          
          message = "#{body}#{timestamp}"
          OpenSSL::HMAC.hexdigest('SHA256', secret, message)
        rescue => e
          puts "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è HMAC –ø—ñ–¥–ø–∏—Å—É: #{e.message}"
          nil
        end
        
        # –û—Ç—Ä–∏–º—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–µ—Ä–≤–µ—Ä
        # @return [Hash] { name: String, version: String, status: String }
        def self.server_info
          EndpointValidator.server_info(API_BASE_URL)
        end
      end
    end
  end
end

# === BACKWARD COMPATIBILITY ALIASES ===
# –î–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ —ñ—Å–Ω—É—é—á–∏–º –∫–æ–¥–æ–º
module ProGran3
  module Security
    # Alias –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
    ApiClient = System::Network::NetworkClient
  end
end

# === –¢–ï–°–¢–£–í–ê–ù–ù–Ø ===
if __FILE__ == $0
  puts "üß™ –ë–∞–∑–æ–≤–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è Network Client..."
  
  # –¢–µ—Å—Ç 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
  puts "\nüìù –¢–µ—Å—Ç 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞..."
  available = ProGran3::System::Network::NetworkClient.server_available?
  puts "   #{available ? '‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–Ω–∏–π' : '‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π'}"
  
  # –¢–µ—Å—Ç 2: –í–∞–ª—ñ–¥–∞—Ü—ñ—è (–æ—á—ñ–∫—É—î—Ç—å—Å—è –ø–æ–º–∏–ª–∫–∞)
  puts "\nüìù –¢–µ—Å—Ç 2: –í–∞–ª—ñ–¥–∞—Ü—ñ—è (–æ—á—ñ–∫—É—î—Ç—å—Å—è –ø–æ–º–∏–ª–∫–∞)..."
  result = ProGran3::System::Network::NetworkClient.validate('TEST-KEY-12345', 'test_fingerprint')
  puts "   Success: #{result[:success]}"
  puts "   Error: #{result[:error]}" if result[:error]
  
  # –¢–µ—Å—Ç 3: –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–µ—Ä–≤–µ—Ä
  puts "\nüìù –¢–µ—Å—Ç 3: –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–µ—Ä–≤–µ—Ä..."
  info = ProGran3::System::Network::NetworkClient.server_info
  puts "   Name: #{info[:name]}"
  puts "   Version: #{info[:version]}"
  puts "   Status: #{info[:status]}"
  
  puts "\n‚úÖ –ë–∞–∑–æ–≤–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
end
