# plugin/proGran3/system/network/network_client.rb
# –ú–µ—Ä–µ–∂–µ–≤–∏–π –∫–ª—ñ—î–Ω—Ç –¥–ª—è –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—ó –∑ —Å–µ—Ä–≤–µ—Ä–æ–º

require 'net/http'
require 'uri'
require 'json'
require 'openssl'
require_relative '../utils/endpoint_validator'
require_relative '../core/config_manager'

module ProGran3
  module System
    module Network
      class NetworkClient
      
      # –ß–∏—Ç–∞—î–º–æ URL –∑ –∫–æ–Ω—Ñ—ñ–≥—É
      def self.load_api_config
        config_path = File.join(File.dirname(__FILE__), '..', '..', 'config.json')
        if File.exist?(config_path)
          config = JSON.parse(File.read(config_path))
          {
            base_url: config.dig('api', 'base_url') || 'https://server-one-amber.vercel.app',
            timeout: config.dig('api', 'timeout') || 10,
            retry_attempts: config.dig('api', 'retry_attempts') || 3
          }
        else
          # Fallback —è–∫—â–æ config –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
          {
            base_url: 'https://server-one-amber.vercel.app',
            timeout: 10,
            retry_attempts: 3
          }
        end
      rescue => e
        puts "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É: #{e.message}. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ default."
        {
          base_url: 'https://server-one-amber.vercel.app',
          timeout: 10,
          retry_attempts: 3
        }
      end
      
      # URL —Å–µ—Ä–≤–µ—Ä–∞ (–¥–∏–Ω–∞–º—ñ—á–Ω–∏–π –∑ –∫–æ–Ω—Ñ—ñ–≥—É)
      def self.get_api_base_url
        url = load_api_config[:base_url]
        puts "üåê –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–µ—Ä–≤–µ—Ä: #{url}" if defined?(puts)
        url
      end
      
      # –ü—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
      def self.reload_config!
        puts "üîÑ –ü—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó NetworkClient..."
        # –û—á–∏—â–∞—î–º–æ –±—É–¥—å-—è–∫–∏–π –∫–µ—à
        @config_cache = nil if defined?(@config_cache)
        url = load_api_config[:base_url]
        puts "‚úÖ –ù–æ–≤–∏–π URL —Å–µ—Ä–≤–µ—Ä–∞: #{url}"
        url
      end
      
      # Timeout –¥–ª—è –∑–∞–ø–∏—Ç—ñ–≤ (–¥–∏–Ω–∞–º—ñ—á–Ω–∏–π –∑ –∫–æ–Ω—Ñ—ñ–≥—É)
      def self.get_request_timeout
        load_api_config[:timeout]
      end
      
      # HMAC Secret Key (v3.2: obfuscated —á–µ—Ä–µ–∑ SecretManager)
      # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π secret –¥–ª—è –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤
      # –ú–∞—î –∑–±—ñ–≥–∞—Ç–∏—Å—è –∑ HMAC_SECRET_KEY –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ
      # 
      # Security Note: v3.2 improvements:
      # 1. Secret –æ–±—Ñ—É—Å–∫–æ–≤–∞–Ω–∏–π —á–µ—Ä–µ–∑ SecretManager (multi-layer)
      # 2. XOR –∑ hardware fingerprint
      # 3. –†–æ–∑–±–∏—Ç–∏–π –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏ –≤ —Ä—ñ–∑–Ω–∏—Ö –º–µ—Ç–æ–¥–∞—Ö
      # 4. –°–∫–ª–∞–¥–Ω—ñ—à–µ –≤–∏—Ç—è–≥–Ω—É—Ç–∏ —á–µ—Ä–µ–∑ reverse engineering
      
      # ‚ùå –í–ò–î–ê–õ–ï–ù–û: –°–µ–∫—Ä–µ—Ç–∏ –Ω–µ–±–µ–∑–ø–µ—á–Ω—ñ!
      # –ó–∞–º—ñ–Ω–µ–Ω–æ –Ω–∞ hardware-based –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é
      def self.get_secret_key
        raise SecurityError, "–°–µ–∫—Ä–µ—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω—ñ –∑ –º—ñ—Ä–∫—É–≤–∞–Ω—å –±–µ–∑–ø–µ–∫–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ hardware-based –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é."
      end
      
      SECRET_KEY = nil  # –ë—É–¥–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–∏–Ω–∞–º—ñ—á–Ω–æ —á–µ—Ä–µ–∑ get_secret_key
      
      # –ê–∫—Ç–∏–≤—É—î –ª—ñ—Ü–µ–Ω–∑—ñ—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ –∑ retry –ª–æ–≥—ñ–∫–æ—é
      # @param email [String] Email –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      # @param license_key [String] –ö–ª—é—á –ª—ñ—Ü–µ–Ω–∑—ñ—ó
      # @param fingerprint [String] Hardware fingerprint
      # @param max_retries [Integer] –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–±
      # @return [Hash] { success: Boolean, license: Hash, error: String }
      def self.activate(email, license_key, fingerprint, max_retries = 3)
        endpoint = '/api/licenses/activate'
        
        payload = {
          user_email: email,
          license_key: license_key,
          system_fingerprint: fingerprint
        }
        
        puts "üì§ –ê–∫—Ç–∏–≤–∞—Ü—ñ—è –ª—ñ—Ü–µ–Ω–∑—ñ—ó: #{license_key[0..8]}..."
        
        response = post_request_with_retry(endpoint, payload, max_retries)
        
        if response[:success]
          puts "‚úÖ –õ—ñ—Ü–µ–Ω–∑—ñ—é –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ"
        else
          puts "‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó: #{response[:error]}"
        end
        
        response
        
      rescue => e
        handle_exception('activate', e)
      end
      
      # –í–∞–ª—ñ–¥—É—î –ª—ñ—Ü–µ–Ω–∑—ñ—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ –∑ retry –ª–æ–≥—ñ–∫–æ—é
      # @param license_key [String] –ö–ª—é—á –ª—ñ—Ü–µ–Ω–∑—ñ—ó
      # @param fingerprint [String] Hardware fingerprint
      # @param max_retries [Integer] –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–±
      # @return [Hash] { success: Boolean, valid: Boolean, license: Hash, error: String }
      def self.validate(license_key, fingerprint, max_retries = 3)
        endpoint = '/api/licenses/validate'
        
        payload = {
          license_key: license_key,
          system_fingerprint: fingerprint
        }
        
        puts "üîç –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ª—ñ—Ü–µ–Ω–∑—ñ—ó: #{license_key[0..8]}..."
        
        response = post_request_with_retry(endpoint, payload, max_retries)
        
        if response[:success]
          puts "‚úÖ –õ—ñ—Ü–µ–Ω–∑—ñ—è –≤–∞–ª—ñ–¥–Ω–∞"
        else
          puts "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó: #{response[:error]}"
        end
        
        response
        
      rescue => e
        handle_exception('validate', e)
      end
      
      # v3.2: –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è HMAC –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ (–ù–ï –æ—Ç—Ä–∏–º—É—î–º–æ —Å–µ–∫—Ä–µ—Ç!)
      # @return [Hash] { success: Boolean, hmac_enabled: Boolean, error: String }
      def self.check_hmac_config
        endpoint = '/api/client/secret'
        
        uri = URI.parse("#{get_api_base_url}#{endpoint}")
        
        http = Net::HTTP.new(uri.host, uri.port)
        http.use_ssl = (uri.scheme == 'https')
        http.open_timeout = get_request_timeout
        http.read_timeout = get_request_timeout
        
        request = Net::HTTP::Get.new(uri.request_uri)
        request['Content-Type'] = 'application/json'
        request['User-Agent'] = 'ProGran3-Plugin/1.0'
        request['X-Fingerprint'] = ProGran3::System::Utils::DeviceIdentifier.generate[:fingerprint]
        
        response = http.request(request)
        
        case response.code.to_i
        when 200
          data = JSON.parse(response.body, symbolize_names: true)
          if data[:success]
            { success: true, hmac_enabled: data[:data][:hmac_enabled] }
          else
            { success: false, error: data[:error] }
          end
        else
          { success: false, error: "HTTP #{response.code}" }
        end
        
      rescue => e
        { success: false, error: e.message }
      end
      
      # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î heartbeat –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      # @param license_key [String] –ö–ª—é—á –ª—ñ—Ü–µ–Ω–∑—ñ—ó
      # @param fingerprint [String] Hardware fingerprint
      # @return [Hash] { success: Boolean }
      def self.heartbeat(license_key, fingerprint)
        endpoint = '/api/heartbeats'
        
        payload = {
          license_key: license_key,
          system_fingerprint: fingerprint,
          plugin_version: '1.0.0',
          timestamp: Time.now.iso8601
        }
        
        # Heartbeat –Ω–µ –≤–∏–≤–æ–¥–∏–º–æ –≤ –ª–æ–≥ (–∑–∞–Ω–∞–¥—Ç–æ —á–∞—Å—Ç–æ)
        
        response = post_request(endpoint, payload, silent: true)
        response
        
      rescue => e
        # Heartbeat –ø–æ–º–∏–ª–∫–∏ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ñ - –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ offline
        { success: false, offline: true, error: e.message }
      end
      
      # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—è (–Ω–µ –±–ª–æ–∫—É—î UI)
      # @param email [String]
      # @param license_key [String]
      # @param fingerprint [String]
      # @param callback [Proc] Callback —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
      def self.activate_async(email, license_key, fingerprint, &callback)
        Thread.new do
          begin
            result = activate(email, license_key, fingerprint)
            callback.call(result) if callback
          rescue => e
            callback.call(handle_exception('activate_async', e)) if callback
          end
        end
      end
      
      # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è
      # @param license_key [String]
      # @param fingerprint [String]
      # @param callback [Proc]
      def self.validate_async(license_key, fingerprint, &callback)
        Thread.new do
          begin
            result = validate(license_key, fingerprint)
            callback.call(result) if callback
          rescue => e
            callback.call(handle_exception('validate_async', e)) if callback
          end
        end
      end
      
      # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤–µ—Ä–∞
      # @return [Boolean]
      def self.server_available?
        uri = URI.parse(get_api_base_url)
        
        Net::HTTP.start(uri.host, uri.port, use_ssl: uri.scheme == 'https', open_timeout: 3, read_timeout: 3) do |http|
          response = http.head('/')
          response.code.to_i < 500
        end
        
      rescue => e
        puts "‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: #{e.message}"
        false
      end
      
      private
      
      # ‚ùå –í–ò–î–ê–õ–ï–ù–û: HMAC –ø—ñ–¥–ø–∏—Å–∏ –Ω–µ–±–µ–∑–ø–µ—á–Ω—ñ!
      # –ó–∞–º—ñ–Ω–µ–Ω–æ –Ω–∞ hardware-based –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é
      def self.create_hmac_signature(body, timestamp)
        raise SecurityError, "HMAC –ø—ñ–¥–ø–∏—Å–∏ –≤–∏–¥–∞–ª–µ–Ω—ñ –∑ –º—ñ—Ä–∫—É–≤–∞–Ω—å –±–µ–∑–ø–µ–∫–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ hardware-based –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é."
      end
      
      # –í–∏–∫–æ–Ω—É—î POST –∑–∞–ø–∏—Ç
      # @param endpoint [String] API endpoint (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ '/api/licenses/activate')
      # @param payload [Hash] –î–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
      # @param silent [Boolean] –ß–∏ –ø—Ä–∏—Ö–æ–≤—É–≤–∞—Ç–∏ –ª–æ–≥–∏
      # @return [Hash]
      def self.post_request(endpoint, payload, silent: false)
        # SECURITY: –í–∞–ª—ñ–¥—É—î–º–æ URL –ø–µ—Ä–µ–¥ –∫–æ–∂–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º
        begin
          ProGran3::System::Utils::EndpointValidator.validate_url(get_api_base_url)
        rescue SecurityError => e
          Logger.error("Server validation failed: #{e.message}", "ApiClient")
          return {
            success: false,
            error: "Security error: #{e.message}",
            security_block: true
          }
        end
        
        uri = URI.parse("#{get_api_base_url}#{endpoint}")
        
        puts "üåê POST #{uri}" unless silent
        
        http = Net::HTTP.new(uri.host, uri.port)
        http.use_ssl = (uri.scheme == 'https')
        http.open_timeout = get_request_timeout
        http.read_timeout = get_request_timeout
        
        # –î–ª—è production - –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ SSL —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏
        # –î–ª—è development –º–æ–∂–Ω–∞ –≤–∏–º–∫–Ω—É—Ç–∏ —è–∫—â–æ —î –ø—Ä–æ–±–ª–µ–º–∏
        http.verify_mode = OpenSSL::SSL::VERIFY_PEER
        
        request = Net::HTTP::Post.new(uri.request_uri)
        request['Content-Type'] = 'application/json'
        request['User-Agent'] = 'ProGran3-Plugin/1.0'
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ payload –≤ JSON
        body = payload.to_json
        request.body = body
        
        # ‚úÖ –ù–û–í–ê –ë–ï–ó–ü–ï–ß–ù–ê –°–ò–°–¢–ï–ú–ê: Hardware-based –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è
        headers = ProGran3::System::Core::ConfigManager.create_authenticated_headers(endpoint, payload)
        
        headers.each do |key, value|
          request[key] = value
        end
        
        puts "üîê Hardware-based –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è –¥–æ–¥–∞–Ω–∞" unless silent
        
        response = http.request(request)
        
        puts "üì• Response: #{response.code}" unless silent
        
        # –î–æ–¥–∞—Ç–∫–æ–≤–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è debug
        unless silent
          puts "üì• Response Body: #{response.body[0..200]}..." if response.body
        end
        
        # –ü–∞—Ä—Å–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        parse_response(response)
        
      rescue Timeout::Error
        {
          success: false,
          offline: true,
          error: 'Request timeout - —Å–µ—Ä–≤–µ—Ä –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î'
        }
        
      rescue SocketError, Errno::ECONNREFUSED => e
        {
          success: false,
          offline: true,
          error: "–ù–µ–º–∞—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º: #{e.message}"
        }
        
      rescue OpenSSL::SSL::SSLError => e
        {
          success: false,
          error: "SSL –ø–æ–º–∏–ª–∫–∞: #{e.message}"
        }
        
      rescue => e
        {
          success: false,
          error: "Network error: #{e.message}"
        }
      end
      
      # –ü–∞—Ä—Å–∏—Ç—å HTTP –≤—ñ–¥–ø–æ–≤—ñ–¥—å
      # @param response [Net::HTTPResponse]
      # @return [Hash]
      def self.parse_response(response)
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –∫–æ–¥
        case response.code.to_i
        when 200, 201
          # –£—Å–ø—ñ—Ö - –ø–∞—Ä—Å–∏–º–æ JSON
          begin
            body = response.body
            return { success: false, error: 'Empty response' } if body.nil? || body.empty?
            
            data = JSON.parse(body, symbolize_names: true)
            
            # API –ø–æ–≤–µ—Ä—Ç–∞—î { success: true/false, data: {...}, error: '...' }
            if data[:success]
              data
            else
              {
                success: false,
                error: data[:error] || 'Unknown error'
              }
            end
            
          rescue JSON::ParserError => e
            {
              success: false,
              error: "Invalid JSON response: #{e.message}"
            }
          end
          
        when 400, 401, 403, 404
          # –î–ª—è –ø–æ–º–∏–ª–æ–∫ —Ç–∞–∫–æ–∂ –Ω–∞–º–∞–≥–∞—î–º–æ—Å—å –ø–∞—Ä—Å–∏—Ç–∏ body —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ
          begin
            body = response.body
            if body && !body.empty?
              data = JSON.parse(body, symbolize_names: true)
              error_message = data[:error] || data[:message] || "HTTP #{response.code}"
              
              # –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è "License not found"
              if error_message.include?('License not found') || error_message.include?('not found')
                return {
                  success: false,
                  error: 'License not found',
                  data: { valid: false, error: 'License not found' }
                }
              end
            else
              error_message = "HTTP #{response.code}"
            end
          rescue JSON::ParserError
            error_message = "HTTP #{response.code}: #{response.body}"
          end
          
          {
            success: false,
            error: error_message
          }
          
        when 429
          {
            success: false,
            error: 'Too many requests - –∑–∞–±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ'
          }
          
        when 500..599
          {
            success: false,
            error: "Server error (#{response.code}) - –ø—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ"
          }
          
        else
          {
            success: false,
            error: "Unexpected status code: #{response.code}"
          }
        end
      end
      
      # POST –∑–∞–ø–∏—Ç –∑ retry –ª–æ–≥—ñ–∫–æ—é
      # @param endpoint [String] API endpoint
      # @param payload [Hash] –î–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
      # @param max_retries [Integer] –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–±
      # @return [Hash] Response
      def self.post_request_with_retry(endpoint, payload, max_retries = 3)
        retries = 0
        last_exception = nil
        
        begin
          response = post_request(endpoint, payload)
          
          # –Ø–∫—â–æ —É—Å–ø—ñ—à–Ω–æ - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
          return response if response[:success]
          
          # –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞, –∞–ª–µ –Ω–µ network - –Ω–µ retry
          unless response[:offline]
            return response
          end
          
        rescue => e
          last_exception = e
          retries += 1
          
          puts "‚ö†Ô∏è –°–ø—Ä–æ–±–∞ #{retries}/#{max_retries} –Ω–µ–≤–¥–∞–ª–∞: #{e.message}"
          
          if retries < max_retries
            # Exponential backoff: 1s, 2s, 4s
            delay = 2 ** (retries - 1)
            puts "‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è #{delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ—é —Å–ø—Ä–æ–±–æ—é..."
            sleep(delay)
            retry
          else
            puts "‚ùå –í—Å—ñ —Å–ø—Ä–æ–±–∏ –≤–∏—á–µ—Ä–ø–∞–Ω–æ"
            return handle_exception('post_request_with_retry', e)
          end
        end
        
        # –Ø–∫—â–æ –¥—ñ–π—à–ª–∏ —Å—é–¥–∏ - –≤—Å—ñ —Å–ø—Ä–æ–±–∏ –Ω–µ–≤–¥–∞–ª—ñ
        {
          success: false,
          error: "Network error after #{max_retries} attempts: #{last_exception&.message}",
          offline: true
        }
      end
      
      # v3.2: –°—Ç–≤–æ—Ä—é—î HMAC –ø—ñ–¥–ø–∏—Å –∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º secret
      # @param body [String] JSON —Ç—ñ–ª–æ –∑–∞–ø–∏—Ç—É
      # @param timestamp [Integer] Unix timestamp
      # @param secret [String] HMAC secret
      # @return [String] HMAC –ø—ñ–¥–ø–∏—Å (hex)
      def self.create_hmac_signature_with_secret(body, timestamp, secret)
        message = "#{body}#{timestamp}"
        OpenSSL::HMAC.hexdigest('SHA256', secret, message)
      rescue => e
        puts "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è HMAC –ø—ñ–¥–ø–∏—Å—É: #{e.message}"
        nil
      end
      
      # –û–±—Ä–æ–±–∫–∞ –≤–∏–Ω—è—Ç–∫—ñ–≤
      # @param operation [String]
      # @param exception [Exception]
      # @return [Hash]
      def self.handle_exception(operation, exception)
        puts "‚ùå Exception in #{operation}: #{exception.message}"
        puts exception.backtrace.first(3).join("\n") if $DEBUG
        
        {
          success: false,
          error: exception.message,
          offline: exception.is_a?(SocketError) || exception.is_a?(Errno::ECONNREFUSED)
        }
      end
    end
  end
end

# === –¢–ï–°–¢–£–í–ê–ù–ù–Ø ===
end

