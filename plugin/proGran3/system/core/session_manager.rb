# plugin/proGran3/system/core/session_manager.rb
# –ì–æ–ª–æ–≤–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—ñ–π - –æ–±'—î–¥–Ω—É—î –≤—Å—ñ –º–æ–¥—É–ª—ñ

require 'time'  # v3.1: –¥–ª—è Time.parse
require_relative '../utils/device_identifier'
require_relative 'data_storage'
require_relative '../network/network_client'
require_relative '../utils/time_sync'
require_relative '../monitoring/analytics'

module ProGran3
  module System
    module Core
      class SessionManager
        
        # Grace period - —Å–∫—ñ–ª—å–∫–∏ –¥–Ω—ñ–≤ –º–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ offline
        GRACE_PERIOD_DAYS = 1  # v3.2: –ó–º—ñ–Ω–µ–Ω–æ –∑ 7 –Ω–∞ 1 –¥–µ–Ω—å
        WARNING_PERIOD_DAYS = 0  # –ë–µ–∑ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å (–±–ª–æ–∫—É—î –≤—ñ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è 1 –¥–Ω—è)
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        def initialize
          @fingerprint = nil
          @current_license = nil
        end
        
        # –ê–∫—Ç–∏–≤—É—î –ª—ñ—Ü–µ–Ω–∑—ñ—é
        # @param email [String] Email –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        # @param license_key [String] –ö–ª—é—á –ª—ñ—Ü–µ–Ω–∑—ñ—ó
        # @return [Hash] { success: Boolean, error: String, license: Hash }
        def activate_license(email, license_key)
          puts "\nüîê –ê–∫—Ç–∏–≤–∞—Ü—ñ—è –ª—ñ—Ü–µ–Ω–∑—ñ—ó..."
          
          # –ì–µ–Ω–µ—Ä—É—î–º–æ fingerprint
          fp_data = System::Utils::DeviceIdentifier.generate
          @fingerprint = fp_data[:fingerprint]
          
          puts "üìã Email: #{email}"
          puts "üîë Key: #{license_key[0..8]}..."
          puts "üñ•Ô∏è Fingerprint: #{@fingerprint[0..16]}..."
          
          # –í–∏–∫–ª–∏–∫–∞—î–º–æ API –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó
          result = System::Network::NetworkClient.activate(email, license_key, @fingerprint)
          
          if result[:success]
            # v3.2: –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç–µ–ª–µ–º–µ—Ç—Ä—ñ—é –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó
            System::Monitoring::Analytics.track_feature('license_activation')
            System::Monitoring::Analytics.send_if_needed(true)  # Force send
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ª—ñ—Ü–µ–Ω–∑—ñ—é –ª–æ–∫–∞–ª—å–Ω–æ (v3.0: –∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –¥–ª—è flexible validation)
            fp_data = System::Utils::DeviceIdentifier.generate
            
            license_data = {
              license_key: license_key,
              email: email,
              fingerprint: fp_data[:fingerprint],
              fingerprint_components: fp_data[:components],  # v3.0: –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
              fingerprint_version: fp_data[:version],        # v3.0
              status: result[:data][:status] || 'active',
              activated_at: Time.now.iso8601,
              last_validation: Time.now.iso8601,
              server_data: result[:data]
            }
            
            # –Ø–∫—â–æ —î expires_at –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ
            if result[:data] && result[:data][:expires_at]
              license_data[:expires_at] = result[:data][:expires_at]
            end
            
            saved = System::Core::DataStorage.save(license_data)
            
            if saved
              @current_license = license_data
              puts "‚úÖ –õ—ñ—Ü–µ–Ω–∑—ñ—é –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!"
              
              {
                success: true,
                license: license_data,
                message: '–õ—ñ—Ü–µ–Ω–∑—ñ—é —É—Å–ø—ñ—à–Ω–æ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ'
              }
            else
              puts "‚ö†Ô∏è –õ—ñ—Ü–µ–Ω–∑—ñ—é –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ, –∞–ª–µ –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–æ"
              {
                success: false,
                error: '–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –ª—ñ—Ü–µ–Ω–∑—ñ—é –ª–æ–∫–∞–ª—å–Ω–æ'
              }
            end
          else
            puts "‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó: #{result[:error]}"
            result
          end
          
        rescue => e
          puts "‚ùå Exception –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó: #{e.message}"
          {
            success: false,
            error: "–ü–æ–º–∏–ª–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó: #{e.message}"
          }
        end
        
        # –í–∞–ª—ñ–¥—É—î –ª—ñ—Ü–µ–Ω–∑—ñ—é (–≥–æ–ª–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥)
        # @return [Hash] { valid: Boolean, license: Hash, warning: String, error: String }
        def validate_license
          puts "\nüîç –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ª—ñ—Ü–µ–Ω–∑—ñ—ó..."
          
          # –ì–µ–Ω–µ—Ä—É—î–º–æ fingerprint
          fp_data = System::Utils::DeviceIdentifier.generate
          @fingerprint = fp_data[:fingerprint]
          
          # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω—É –ª—ñ—Ü–µ–Ω–∑—ñ—é
          license = System::Core::DataStorage.load
          
          # –ù–µ–º–∞—î –ª—ñ—Ü–µ–Ω–∑—ñ—ó
          unless license
            puts "‚ùå –õ—ñ—Ü–µ–Ω–∑—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞"
            return {
              valid: false,
              error: 'no_license',
              message: '–õ—ñ—Ü–µ–Ω–∑—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –ü–æ—Ç—Ä—ñ–±–Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—è.'
            }
          end
          
          puts "üìã –ó–Ω–∞–π–¥–µ–Ω–æ –ª—ñ—Ü–µ–Ω–∑—ñ—é: #{license[:license_key][0..8]}..."
          
          # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ fingerprint (v3.0: flexible validation)
          fp_version = (license[:fingerprint_version] || '1.0').to_f
          
          if fp_version >= 3.0
            # v3.0+: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ flexible validation (3 –∑ 4 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤)
            current_components = fp_data[:components]
            stored_components = license[:fingerprint_components] || {}
            
            if !System::Utils::DeviceIdentifier.validate_flexible(stored_components, current_components)
              puts "‚ùå Fingerprint –Ω–µ –∑–±—ñ–≥–∞—î—Ç—å—Å—è (flexible validation)!"
              puts "   –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ –∑–±—ñ–≥–∞—î—Ç—å—Å—è (–ø–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º 3 –∑ 4)"
              
              return {
                valid: false,
                error: 'hardware_mismatch',
                message: '–õ—ñ—Ü–µ–Ω–∑—ñ—è –ø—Ä–∏–≤\'—è–∑–∞–Ω–∞ –¥–æ —ñ–Ω—à–æ–≥–æ –∫–æ–º–ø\'—é—Ç–µ—Ä–∞'
              }
            end
            
            puts "‚úÖ Fingerprint –≤–∞–ª—ñ–¥–Ω–∏–π (flexible validation: OK)"
          else
            # v1.0-v2.0: –°—Ç—Ä–æ–≥–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ (–ø–æ–≤–Ω–∏–π –∑–±—ñ–≥)
            if license[:fingerprint] != @fingerprint
              puts "‚ùå Fingerprint –Ω–µ –∑–±—ñ–≥–∞—î—Ç—å—Å—è!"
              puts "   –ó–±–µ—Ä–µ–∂–µ–Ω–æ: #{license[:fingerprint][0..16]}..."
              puts "   –ü–æ—Ç–æ—á–Ω–∏–π: #{@fingerprint[0..16]}..."
              
              return {
                valid: false,
                error: 'hardware_mismatch',
                message: '–õ—ñ—Ü–µ–Ω–∑—ñ—è –ø—Ä–∏–≤\'—è–∑–∞–Ω–∞ –¥–æ —ñ–Ω—à–æ–≥–æ –∫–æ–º–ø\'—é—Ç–µ—Ä–∞'
              }
            end
            
            puts "‚úÖ Fingerprint –∑–±—ñ–≥–∞—î—Ç—å—Å—è"
          end
          
          # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ expiration (—è–∫—â–æ —î)
          if license[:expires_at]
            expires_at = Time.parse(license[:expires_at])
            if expires_at < Time.now
              puts "‚ùå –õ—ñ—Ü–µ–Ω–∑—ñ—è –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∞"
              
              return {
                valid: false,
                error: 'expired',
                message: '–õ—ñ—Ü–µ–Ω–∑—ñ—è –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∞'
              }
            end
            
            days_until_expiry = ((expires_at - Time.now) / 86400).to_i
            puts "‚è∞ –õ—ñ—Ü–µ–Ω–∑—ñ—è –¥—ñ–π—Å–Ω–∞ —â–µ #{days_until_expiry} –¥–Ω—ñ–≤"
          end
          
          # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ grace period
          grace_result = check_grace_period(license)
          
          case grace_result[:action]
          when :block
            # Grace period –≤–∏—á–µ—Ä–ø–∞–Ω–æ - –≤–∏–º–∞–≥–∞—î–º–æ online
            puts "üî¥ Grace period –≤–∏—á–µ—Ä–ø–∞–Ω–æ - –ø–æ—Ç—Ä—ñ–±–Ω–∞ online –≤–∞–ª—ñ–¥–∞—Ü—ñ—è"
            return validate_online_required(license)
            
          when :warn
            # –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –∞–ª–µ –¥–æ–∑–≤–æ–ª—è—î–º–æ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏
            puts "‚ö†Ô∏è –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: #{grace_result[:message]}"
            validate_online_background(license)
            
            @current_license = license
            
            # v3.2: –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç–µ–ª–µ–º–µ—Ç—Ä—ñ—é
            System::Monitoring::Analytics.track_feature('license_validated_with_warning')
            System::Monitoring::Analytics.send_if_needed
            
            return {
              valid: true,
              license: license,
              warning: grace_result[:message]
            }
            
          else
            # –í—Å–µ OK
            puts "‚úÖ Grace period –≤ –Ω–æ—Ä–º—ñ"
            validate_online_background(license)
            
            @current_license = license
            
            # v3.2: –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç–µ–ª–µ–º–µ—Ç—Ä—ñ—é
            System::Monitoring::Analytics.track_feature('license_validated_success')
            System::Monitoring::Analytics.send_if_needed
            
            return {
              valid: true,
              license: license
            }
          end
          
        rescue => e
          puts "‚ùå Exception –ø—Ä–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó: #{e.message}"
          puts e.backtrace.first(3)
          
          {
            valid: false,
            error: 'validation_exception',
            message: e.message
          }
        end
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ grace period
        # @param license [Hash]
        # @return [Hash] { action: Symbol, message: String, days_offline: Integer }
        def check_grace_period(license)
          last_validation = license[:last_validation] || license[:activated_at]
          
          unless last_validation
            # –ù–µ–º–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é - –ø—Ä–∏–ø—É—Å–∫–∞—î–º–æ —â–æ –∑–∞—Ä–∞–∑
            return { action: :allow, message: 'OK' }
          end
          
          last_validation_time = Time.parse(last_validation)
          
          # === TIME TAMPERING CHECK (v3.2: NTP verification) ===
          time_check = System::Utils::TimeSync.validate_system_time
          
          # –Ø–∫—â–æ NTP —á–∞—Å –¥–æ—Å—Ç—É–ø–Ω–∏–π - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –π–æ–≥–æ
          current_time = time_check[:ntp_time] || Time.now
          
          # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–∏ —á–∞—Å—É –Ω–∞–∑–∞–¥ (v3.0)
          if current_time < last_validation_time
            puts "üö® SECURITY ALERT: –ß–∞—Å –º–µ–Ω—à–∏–π –∑–∞ last_validation!"
            puts "   –ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å: #{current_time}"
            puts "   Last validation: #{last_validation_time}"
            puts "   –†—ñ–∑–Ω–∏—Ü—è: #{((last_validation_time - current_time) / 3600.0).round(1)} –≥–æ–¥–∏–Ω"
            
            return {
              action: :block,
              message: '–í–∏—è–≤–ª–µ–Ω–æ –∑–º—ñ–Ω—É —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —á–∞—Å—É. –ü—ñ–¥–∫–ª—é—á—ñ—Ç—å—Å—è –¥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó.',
              time_tampering: true
            }
          end
          
          # –Ø–∫—â–æ NTP –ø–æ–∫–∞–∑–∞–≤ –≤–µ–ª–∏–∫—É —Ä—ñ–∑–Ω–∏—Ü—é - –±–ª–æ–∫—É—î–º–æ
          if time_check[:valid] == false
            Logger.error("NTP validation failed: #{time_check[:error]}", "SessionManager")
            
            return {
              action: :block,
              message: time_check[:error],
              time_tampering: true,
              time_diff: time_check[:diff_seconds]
            }
          end
          
          # –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è —è–∫—â–æ NTP –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π
          if time_check[:verified] == false
            Logger.warn("NTP unavailable: #{time_check[:warning]}", "SessionManager")
          end
          
          days_offline = ((current_time - last_validation_time) / 86400.0).round(1)
          
          puts "üìä –î–Ω—ñ–≤ –±–µ–∑ online –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó: #{days_offline}"
          
          # v3.1: –ë–ª–æ–∫—É—î–º–æ >= 7 –¥–Ω—ñ–≤ (–Ω–µ > 7)
          if days_offline >= GRACE_PERIOD_DAYS
            # Grace period –≤–∏—á–µ—Ä–ø–∞–Ω–æ
            {
              action: :block,
              message: "Grace period –≤–∏—á–µ—Ä–ø–∞–Ω–æ (#{days_offline.to_i} –¥–Ω—ñ–≤ offline). –ü—ñ–¥–∫–ª—é—á—ñ—Ç—å—Å—è –¥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É.",
              days_offline: days_offline.to_i
            }
          elsif days_offline >= WARNING_PERIOD_DAYS
            # –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
            {
              action: :warn,
              message: "–†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—å –¥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É (#{days_offline.to_i} –¥–Ω—ñ–≤ offline)",
              days_offline: days_offline.to_i
            }
          else
            # –í—Å–µ OK
            {
              action: :allow,
              message: 'OK',
              days_offline: days_offline.to_i
            }
          end
        end
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è online (–±–ª–æ–∫—É—é—á–∞ - –≤–∏–º–∞–≥–∞—î –∑'—î–¥–Ω–∞–Ω–Ω—è)
        # @param license [Hash]
        # @return [Hash]
        def validate_online_required(license)
          puts "üåê –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –æ–±–æ–≤'—è–∑–∫–æ–≤–∞ online –≤–∞–ª—ñ–¥–∞—Ü—ñ—è..."
          
          result = System::Network::NetworkClient.validate(license[:license_key], @fingerprint)
          
          if result[:success] && result[:data] && result[:data][:valid]
            # –û–Ω–æ–≤–ª—é—î–º–æ last_validation
            license[:last_validation] = Time.now.iso8601
            
            # –û–Ω–æ–≤–ª—é—î–º–æ server_data —è–∫—â–æ —î
            license[:server_data] = result[:data] if result[:data]
            
            System::Core::DataStorage.delete # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–∏–π —Ñ–∞–π–ª
            System::Core::DataStorage.save(license)
            
            @current_license = license
            
            puts "‚úÖ Online –≤–∞–ª—ñ–¥–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞"
            {
              valid: true,
              license: license
            }
          elsif result[:offline]
            puts "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π - –Ω–µ–º–æ–∂–ª–∏–≤–æ –≤–∞–ª—ñ–¥—É–≤–∞—Ç–∏"
            {
              valid: false,
              error: 'online_required',
              message: '–ù–µ–æ–±—Ö—ñ–¥–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ª—ñ—Ü–µ–Ω–∑—ñ—ó'
            }
          else
            puts "‚ùå –õ—ñ—Ü–µ–Ω–∑—ñ—è –Ω–µ –≤–∞–ª—ñ–¥–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ"
            {
              valid: false,
              error: 'invalid_on_server',
              message: result[:error] || '–õ—ñ—Ü–µ–Ω–∑—ñ—è –±—ñ–ª—å—à–µ –Ω–µ –≤–∞–ª—ñ–¥–Ω–∞'
            }
          end
        end
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è online –≤ —Ñ–æ–Ω—ñ (–Ω–µ –±–ª–æ–∫—É—î)
        # @param license [Hash]
        def validate_online_background(license)
          Thread.new do
            begin
              puts "üîÑ –§–æ–Ω–æ–≤–∞ online –≤–∞–ª—ñ–¥–∞—Ü—ñ—è..."
              
              result = System::Network::NetworkClient.validate(license[:license_key], @fingerprint)
              
              if result[:success] && result[:data] && result[:data][:valid]
                # –û–Ω–æ–≤–ª—é—î–º–æ last_validation
                license[:last_validation] = Time.now.iso8601
                license[:server_data] = result[:data] if result[:data]
                
                System::Core::DataStorage.delete
                System::Core::DataStorage.save(license)
                
                puts "‚úÖ –§–æ–Ω–æ–≤–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞"
              elsif !result[:offline]
                # –õ—ñ—Ü–µ–Ω–∑—ñ—è –±—ñ–ª—å—à–µ –Ω–µ –≤–∞–ª—ñ–¥–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ
                puts "‚ö†Ô∏è –í–ê–ñ–õ–ò–í–û: –õ—ñ—Ü–µ–Ω–∑—ñ—è –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ!"
                # –¢—É—Ç –º–æ–∂–Ω–∞ –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
              else
                puts "‚ÑπÔ∏è –§–æ–Ω–æ–≤–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è: —Å–µ—Ä–≤–µ—Ä offline (–Ω–æ—Ä–º–∞–ª—å–Ω–æ)"
              end
              
            rescue => e
              puts "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Ñ–æ–Ω–æ–≤–æ—ó –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó: #{e.message}"
            end
          end
        end
        
        # –î–µ–∞–∫—Ç–∏–≤—É—î –ª—ñ—Ü–µ–Ω–∑—ñ—é (–≤–∏–¥–∞–ª—è—î –ª–æ–∫–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª)
        # @return [Boolean]
        def deactivate_license
          puts "\nüóëÔ∏è –î–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—è –ª—ñ—Ü–µ–Ω–∑—ñ—ó..."
          
          if System::Core::DataStorage.exists?
            deleted = System::Core::DataStorage.delete
            @current_license = nil
            
            if deleted
              puts "‚úÖ –õ—ñ—Ü–µ–Ω–∑—ñ—é –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ"
              true
            else
              puts "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ª—ñ—Ü–µ–Ω–∑—ñ—é"
              false
            end
          else
            puts "‚ö†Ô∏è –õ—ñ—Ü–µ–Ω–∑—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞"
            false
          end
        end
        
        # –û—Ç—Ä–∏–º—É—î –ø–æ—Ç–æ—á–Ω—É –ª—ñ—Ü–µ–Ω–∑—ñ—é
        # @return [Hash, nil]
        def current_license
          @current_license || System::Core::DataStorage.load
        end
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –∞–∫—Ç–∏–≤–Ω–∞ –ª—ñ—Ü–µ–Ω–∑—ñ—è
        # @return [Boolean]
        def has_license?
          System::Core::DataStorage.exists?
        end
        
        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å—Ç–∞—Ç—É—Å –ª—ñ—Ü–µ–Ω–∑—ñ—ó
        # @return [Hash]
        def license_info
          license = current_license
          
          current_fp = System::Utils::DeviceIdentifier.generate[:fingerprint]
          
          return { 
            has_license: false,
            fingerprint: current_fp
          } unless license
          
          {
            has_license: true,
            license_key: license[:license_key],
            email: license[:email],
            status: license[:status],
            activated_at: license[:activated_at],
            expires_at: license[:expires_at],
            last_validation: license[:last_validation],
            fingerprint: current_fp,
            fingerprint_match: license[:fingerprint] == current_fp
          }
        end
      end
    end
  end
end

# === BACKWARD COMPATIBILITY ALIASES ===
# –î–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ —ñ—Å–Ω—É—é—á–∏–º –∫–æ–¥–æ–º
module ProGran3
  module Security
    # Alias –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
    LicenseManager = System::Core::SessionManager
  end
end

# === –¢–ï–°–¢–£–í–ê–ù–ù–Ø ===
if __FILE__ == $0
  puts "üß™ –ë–∞–∑–æ–≤–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è Session Manager..."
  
  manager = ProGran3::System::Core::SessionManager.new
  
  # –¢–µ—Å—Ç 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –ª—ñ—Ü–µ–Ω–∑—ñ—ó
  puts "\nüìù –¢–µ—Å—Ç 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –ª—ñ—Ü–µ–Ω–∑—ñ—ó..."
  has_license = manager.has_license?
  puts "   Has license: #{has_license}"
  
  # –¢–µ—Å—Ç 2: –í–∞–ª—ñ–¥–∞—Ü—ñ—è (—è–∫—â–æ —î –ª—ñ—Ü–µ–Ω–∑—ñ—è)
  if has_license
    puts "\nüìù –¢–µ—Å—Ç 2: –í–∞–ª—ñ–¥–∞—Ü—ñ—è —ñ—Å–Ω—É—é—á–æ—ó –ª—ñ—Ü–µ–Ω–∑—ñ—ó..."
    result = manager.validate_license
    puts "   Valid: #{result[:valid]}"
    puts "   Error: #{result[:error]}" if result[:error]
  end
  
  # –¢–µ—Å—Ç 3: –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ª—ñ—Ü–µ–Ω–∑—ñ—é
  puts "\nüìù –¢–µ—Å—Ç 3: –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ª—ñ—Ü–µ–Ω–∑—ñ—é..."
  info = manager.license_info
  puts "   #{info.inspect}"
  
  puts "\n‚úÖ –ë–∞–∑–æ–≤–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
  puts "   –î–µ—Ç–∞–ª—å–Ω—ñ —Ç–µ—Å—Ç–∏ –≤ TEST_STEP_4.rb"
end
