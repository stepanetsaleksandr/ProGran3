# plugin/proGran3/system/core/data_storage.rb
# –°–∏—Å—Ç–µ–º–∞ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è–º

require 'openssl'
require 'base64'
require 'json'
require 'fileutils'

module ProGran3
  module System
    module Core
      class DataStorage
      
      # –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –ª—ñ—Ü–µ–Ω–∑—ñ—ó (–ø—Ä–∏—Ö–æ–≤–∞–Ω–∏–π)
      LICENSE_DIR = File.join(Dir.home, '.progran3').freeze
      LICENSE_FILE = File.join(LICENSE_DIR, 'license.enc').freeze
      
      # –í–µ—Ä—Å—ñ—è —Ñ–æ—Ä–º–∞—Ç—É
      FORMAT_VERSION = '1.0'.freeze
      
      # –ó–±–µ—Ä—ñ–≥–∞—î –ª—ñ—Ü–µ–Ω–∑—ñ–π–Ω—ñ –¥–∞–Ω—ñ (–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ñ)
      # @param license_data [Hash] –î–∞–Ω—ñ –ª—ñ—Ü–µ–Ω–∑—ñ—ó
      # @return [Boolean] true —è–∫—â–æ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ
      def self.save(license_data)
        raise ArgumentError, "License data cannot be nil" if license_data.nil?
        raise ArgumentError, "License data must be a Hash" unless license_data.is_a?(Hash)
        
        # –î–æ–¥–∞—î–º–æ –º–µ—Ç–∞–¥–∞–Ω—ñ (–≤–∫–ª—é—á–∞—é—á–∏ –≤–µ—Ä—Å—ñ—é fingerprint)
        data_to_save = license_data.merge({
          format_version: FORMAT_VERSION,
          fingerprint_version: '3.0',  # v3.0: Machine GUID + flexible validation
          saved_at: Time.now.iso8601
        })
        
        # –®–∏—Ñ—Ä—É—î–º–æ –¥–∞–Ω—ñ
        encrypted = encrypt_data(data_to_save)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
        FileUtils.mkdir_p(LICENSE_DIR) unless Dir.exist?(LICENSE_DIR)
        
        # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–∏–π —Ñ–∞–π–ª —è–∫—â–æ —ñ—Å–Ω—É—î (–¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è Permission denied)
        if File.exist?(LICENSE_FILE)
          # –ó–Ω—ñ–º–∞—î–º–æ read-only –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–æ–º (–ë–ï–ó –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞)
          remove_readonly_attribute(LICENSE_FILE)
          File.delete(LICENSE_FILE)
        end
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ
        File.write(LICENSE_FILE, encrypted)
        
        # –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —Ñ–∞–π–ª (Windows)
        hide_file_windows if RUBY_PLATFORM.include?('mingw') || RUBY_PLATFORM.include?('mswin')
        
        # –û–±–º–µ–∂—É—î–º–æ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É (Unix)
        File.chmod(0600, LICENSE_FILE) unless RUBY_PLATFORM.include?('mingw') || RUBY_PLATFORM.include?('mswin')
        
        puts "‚úÖ –õ—ñ—Ü–µ–Ω–∑—ñ—é –∑–±–µ—Ä–µ–∂–µ–Ω–æ: #{LICENSE_FILE}"
        true
        
      rescue => e
        puts "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ª—ñ—Ü–µ–Ω–∑—ñ—ó: #{e.message}"
        puts e.backtrace.first(3) if $DEBUG
        false
      end
      
      # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –ª—ñ—Ü–µ–Ω–∑—ñ–π–Ω—ñ –¥–∞–Ω—ñ
      # @return [Hash, nil] –†–æ–∑—à–∏—Ñ—Ä–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –∞–±–æ nil —è–∫—â–æ —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
      def self.load
        # v3.0: –û—á–∏—â–∞—î–º–æ —Å—Ç–∞—Ä—ñ backup —Ñ–∞–π–ª–∏ –ø—Ä–∏ –∫–æ–∂–Ω–æ–º—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
        cleanup_old_backups
        
        unless File.exist?(LICENSE_FILE)
          # –§–∞–π–ª –ª—ñ—Ü–µ–Ω–∑—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ - –±–µ–∑ –ª–æ–≥—É–≤–∞–Ω–Ω—è
          return nil
        end
        
        # –ß–∏—Ç–∞—î–º–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ
        encrypted = File.read(LICENSE_FILE)
        
        # –†–æ–∑—à–∏—Ñ—Ä–æ–≤—É—î–º–æ
        decrypted = decrypt_data(encrypted)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–µ—Ä—Å—ñ—é —Ñ–æ—Ä–º–∞—Ç—É
        if decrypted[:format_version] != FORMAT_VERSION
          puts "‚ö†Ô∏è –ù–µ—Å—É–º—ñ—Å–Ω–∞ –≤–µ—Ä—Å—ñ—è —Ñ–æ—Ä–º–∞—Ç—É –ª—ñ—Ü–µ–Ω–∑—ñ—ó"
          return nil
        end
        
        # –ú–Ü–ì–†–ê–¶–Ü–Ø: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–µ—Ä—Å—ñ—é fingerprint
        if needs_fingerprint_migration?(decrypted)
          fp_version = decrypted[:fingerprint_version] || '1.0'
          puts "üîÑ –í–∏—è–≤–ª–µ–Ω–æ —Å—Ç–∞—Ä—É –≤–µ—Ä—Å—ñ—é fingerprint (v#{fp_version})"
          puts "üìù –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ v3.0 - –ø–æ—Ç—Ä—ñ–±–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—è –ª—ñ—Ü–µ–Ω–∑—ñ—ó"
          migrate_old_fingerprint
          return nil
        end
        
        # –õ—ñ—Ü–µ–Ω–∑—ñ—é –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ - –±–µ–∑ –ª–æ–≥—É–≤–∞–Ω–Ω—è
        decrypted
        
      rescue OpenSSL::Cipher::CipherError => e
        puts "‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è (–º–æ–∂–ª–∏–≤–æ —Ñ–∞–π–ª –ø–æ—à–∫–æ–¥–∂–µ–Ω–æ –∞–±–æ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –∑ —ñ–Ω—à–æ–≥–æ –ü–ö)"
        puts "   #{e.message}"
        puts "üóëÔ∏è –í–∏–¥–∞–ª—è—î–º–æ –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π —Ñ–∞–π–ª –ª—ñ—Ü–µ–Ω–∑—ñ—ó..."
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ backup –ø–µ—Ä–µ–¥ –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º
        begin
          backup_file = LICENSE_FILE + '.corrupted.backup'
          FileUtils.cp(LICENSE_FILE, backup_file) if File.exist?(LICENSE_FILE)
          puts "üíæ Backup —Å—Ç–≤–æ—Ä–µ–Ω–æ: #{backup_file}"
        rescue => backup_error
          puts "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ backup: #{backup_error.message}"
        end
        
        # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π —Ñ–∞–π–ª
        delete
        
        nil
        
      rescue => e
        puts "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ª—ñ—Ü–µ–Ω–∑—ñ—ó: #{e.message}"
        puts e.backtrace.first(3) if $DEBUG
        nil
      end
      
      # –í–∏–¥–∞–ª—è—î —Ñ–∞–π–ª –ª—ñ—Ü–µ–Ω–∑—ñ—ó
      # @return [Boolean] true —è–∫—â–æ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ
      def self.delete
        if File.exist?(LICENSE_FILE)
          # –ó–Ω—ñ–º–∞—î–º–æ read-only –∞—Ç—Ä–∏–±—É—Ç —è–∫—â–æ —î (–ë–ï–ó –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞)
          remove_readonly_attribute(LICENSE_FILE)
          
          File.delete(LICENSE_FILE)
          puts "‚úÖ –õ—ñ—Ü–µ–Ω–∑—ñ—é –≤–∏–¥–∞–ª–µ–Ω–æ"
          true
        else
          # –§–∞–π–ª –ª—ñ—Ü–µ–Ω–∑—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ - –±–µ–∑ –ª–æ–≥—É–≤–∞–Ω–Ω—è
          false
        end
      rescue => e
        puts "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ª—ñ—Ü–µ–Ω–∑—ñ—ó: #{e.message}"
        false
      end
      
      # –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —ñ—Å–Ω—É—î —Ñ–∞–π–ª –ª—ñ—Ü–µ–Ω–∑—ñ—ó
      # @return [Boolean]
      def self.exists?
        File.exist?(LICENSE_FILE)
      end
      
      # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ñ–∞–π–ª –ª—ñ—Ü–µ–Ω–∑—ñ—ó
      # @return [Hash]
      def self.file_info
        return { exists: false } unless exists?
        
        stat = File.stat(LICENSE_FILE)
        {
          exists: true,
          path: LICENSE_FILE,
          size: stat.size,
          modified_at: stat.mtime,
          readable: File.readable?(LICENSE_FILE),
          writable: File.writable?(LICENSE_FILE)
        }
      end
      
      # –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –º—ñ–≥—Ä–∞—Ü—ñ—è fingerprint
      # @param license_data [Hash] –î–∞–Ω—ñ –ª—ñ—Ü–µ–Ω–∑—ñ—ó
      # @return [Boolean]
      def self.needs_fingerprint_migration?(license_data)
        # –Ø–∫—â–æ –Ω–µ–º–∞—î fingerprint_version –∞–±–æ –≤–µ—Ä—Å—ñ—è < 3.0 - –ø–æ—Ç—Ä—ñ–±–Ω–∞ –º—ñ–≥—Ä–∞—Ü—ñ—è
        fp_version = license_data[:fingerprint_version]
        return true unless fp_version
        
        # –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ –≤–µ—Ä—Å—ñ—ó (1.0, 2.0 < 3.0)
        fp_version.to_f < 3.0
      end
      
      # –ú—ñ–≥—Ä—É—î —Å—Ç–∞—Ä—É –ª—ñ—Ü–µ–Ω–∑—ñ—é (–≤–∏–¥–∞–ª—è—î —ó—ó —ñ —Å—Ç–≤–æ—Ä—é—î backup)
      def self.migrate_old_fingerprint
        begin
          # –°—Ç–≤–æ—Ä—é—î–º–æ backup —Å—Ç–∞—Ä–æ—ó –ª—ñ—Ü–µ–Ω–∑—ñ—ó
          backup_file = LICENSE_FILE + '.v1.backup'
          
          if File.exist?(LICENSE_FILE)
            FileUtils.cp(LICENSE_FILE, backup_file)
            puts "üíæ –°—Ç–≤–æ—Ä–µ–Ω–æ backup —Å—Ç–∞—Ä–æ—ó –ª—ñ—Ü–µ–Ω–∑—ñ—ó: #{backup_file}"
          end
          
          # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—É –ª—ñ—Ü–µ–Ω–∑—ñ—é
          delete
          
          puts "‚úÖ –ú—ñ–≥—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ê–∫—Ç–∏–≤—É–π—Ç–µ –ª—ñ—Ü–µ–Ω–∑—ñ—é –∑–∞–Ω–æ–≤–æ."
          puts "‚ÑπÔ∏è  Backup –±—É–¥–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ 7 –¥–Ω—ñ–≤"
          
          true
        rescue => e
          puts "‚ùå –ü–æ–º–∏–ª–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó: #{e.message}"
          false
        end
      end
      
      # –û—á–∏—â–∞—î —Å—Ç–∞—Ä—ñ backup —Ñ–∞–π–ª–∏ (v3.0: –±–µ–∑–ø–µ–∫–∞)
      # –í–∏–¥–∞–ª—è—î backup —Å—Ç–∞—Ä—à—ñ –∑–∞ 7 –¥–Ω—ñ–≤
      def self.cleanup_old_backups
        return unless Dir.exist?(LICENSE_DIR)
        
        begin
          # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ backup —Ñ–∞–π–ª–∏
          backup_pattern = File.join(LICENSE_DIR, '*.backup')
          backup_files = Dir.glob(backup_pattern)
          
          return if backup_files.empty?
          
          cutoff_time = Time.now - (7 * 86400)  # 7 –¥–Ω—ñ–≤ –Ω–∞–∑–∞–¥
          deleted_count = 0
          
          backup_files.each do |backup_file|
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—ñ–∫ —Ñ–∞–π–ª—É
            if File.mtime(backup_file) < cutoff_time
              remove_readonly_attribute(backup_file)
              File.delete(backup_file)
              deleted_count += 1
            end
          end
          
          puts "üßπ –í–∏–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–∏—Ö backup —Ñ–∞–π–ª—ñ–≤: #{deleted_count}" if deleted_count > 0
          
        rescue => e
          # –ü–æ–º–∏–ª–∫–∏ cleanup –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ñ - —ñ–≥–Ω–æ—Ä—É—î–º–æ
        end
      end
      
      private
      
      # –®–∏—Ñ—Ä—É—î –¥–∞–Ω—ñ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é AES-256-CBC
      def self.encrypt_data(data)
        cipher = OpenSSL::Cipher.new('AES-256-CBC')
        cipher.encrypt
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–ª—é—á —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è (–±–∞–∑—É—î—Ç—å—Å—è –Ω–∞ hardware fingerprint)
        key = derive_encryption_key
        cipher.key = key
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π IV
        iv = cipher.random_iv
        
        # –®–∏—Ñ—Ä—É—î–º–æ JSON –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
        json_data = data.to_json
        encrypted = cipher.update(json_data) + cipher.final
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ IV + –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ (–∫–æ–¥—É—î–º–æ –≤ Base64)
        Base64.strict_encode64(iv + encrypted)
      end
      
      # –†–æ–∑—à–∏—Ñ—Ä–æ–≤—É—î –¥–∞–Ω—ñ
      def self.decrypt_data(encrypted_data)
        # –î–µ–∫–æ–¥—É—î–º–æ –∑ Base64
        decoded = Base64.strict_decode64(encrypted_data)
        
        # –í–∏—Ç—è–≥—É—î–º–æ IV (–ø–µ—Ä—à—ñ 16 –±–∞–π—Ç)
        iv = decoded[0...16]
        encrypted = decoded[16..-1]
        
        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ cipher –¥–ª—è —Ä–æ–∑—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è
        cipher = OpenSSL::Cipher.new('AES-256-CBC')
        cipher.decrypt
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–ª—é—á (—Ç–æ–π —Å–∞–º–∏–π —â–æ —ñ –ø—Ä–∏ —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—ñ)
        key = derive_encryption_key
        cipher.key = key
        cipher.iv = iv
        
        # –†–æ–∑—à–∏—Ñ—Ä–æ–≤—É—î–º–æ
        decrypted = cipher.update(encrypted) + cipher.final
        
        # –ü–∞—Ä—Å–∏–º–æ JSON
        JSON.parse(decrypted, symbolize_names: true)
      end
      
      # –ì–µ–Ω–µ—Ä—É—î –∫–ª—é—á —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ hardware fingerprint
      # –¶–µ –æ–∑–Ω–∞—á–∞—î —â–æ —Ñ–∞–π–ª –º–æ–∂–Ω–∞ —Ä–æ–∑—à–∏—Ñ—Ä—É–≤–∞—Ç–∏ –¢–Ü–õ–¨–ö–ò –Ω–∞ —Ü—å–æ–º—É –ü–ö!
      def self.derive_encryption_key
        require_relative '../utils/device_identifier'
        
        # –û—Ç—Ä–∏–º—É—î–º–æ fingerprint –ø–æ—Ç–æ—á–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏
        fp = ProGran3::System::Utils::DeviceIdentifier.generate
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ PBKDF2 –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–ª—é—á–∞
        salt = 'ProGran3-License-Salt-v1.0'
        iterations = 100000  # v3.0: –∑–±—ñ–ª—å—à–µ–Ω–æ –∑ 10000 –¥–æ 100000 (OWASP 2023)
        key_length = 32 # 256 bits
        
        OpenSSL::PKCS5.pbkdf2_hmac(
          fp[:fingerprint],
          salt,
          iterations,
          key_length,
          OpenSSL::Digest::SHA256.new
        )
      end
      
      # –ü—Ä–∏—Ö–æ–≤—É—î —Ñ–∞–π–ª –Ω–∞ Windows
      # –ó–Ω—ñ–º–∞—î read-only –∞—Ç—Ä–∏–±—É—Ç –∑ —Ñ–∞–π–ª—É (–ë–ï–ó –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞)
      def self.remove_readonly_attribute(file_path)
        return unless File.exist?(file_path)
        
        begin
          # –†–æ–±–∏–º–æ —Ñ–∞–π–ª writable (–∑–Ω—ñ–º–∞—î–º–æ read-only)
          File.chmod(0666, file_path)
        rescue => e
          # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)
        end
      end
      
      def self.hide_file_windows
        begin
          # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∞—Ç—Ä–∏–±—É—Ç–∏ –ë–ï–ó –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
          # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–æ—Å—Ç–æ File.chmod (–ø—Ä–∏—Ö–æ–≤–∞–Ω–Ω—è –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)
          File.chmod(0600, LICENSE_FILE)
        rescue => e
          # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)
        end
      end
    end
  end
end

# === –¢–ï–°–¢–£–í–ê–ù–ù–Ø ===
end


