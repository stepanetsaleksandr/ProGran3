# plugin/proGran3/system/utils/time_sync.rb
# –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —á–∞—Å—É —á–µ—Ä–µ–∑ NTP (–∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ time tampering)

require 'socket'
require 'timeout'
require_relative '../../logger'

module ProGran3
  module System
    module Utils
      class TimeSync
        
        # NTP —Å–µ—Ä–≤–µ—Ä–∏ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫—ñ–ª—å–∫–∞ –¥–ª—è –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ)
        NTP_SERVERS = [
          'time.google.com',
          'time.windows.com',
          'pool.ntp.org',
          'time.cloudflare.com'
        ].freeze
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–∞ —Ä—ñ–∑–Ω–∏—Ü—è —á–∞—Å—É (5 —Ö–≤–∏–ª–∏–Ω)
        MAX_TIME_DIFF_SECONDS = 300
        
        # Timeout –¥–ª—è NTP –∑–∞–ø–∏—Ç—É
        NTP_TIMEOUT = 5
        
        # –ö–µ—à NTP —á–∞—Å—É (—â–æ–± –Ω–µ —Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Ç –∫–æ–∂–Ω–æ–≥–æ —Ä–∞–∑—É)
        @@ntp_cache = nil
        @@ntp_cache_timestamp = 0
        CACHE_TTL = 3600  # 1 –≥–æ–¥–∏–Ω–∞
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø—Ä–∞–≤–∂–Ω—ñ–π —á–∞—Å –∑ NTP —Å–µ—Ä–≤–µ—Ä—ñ–≤
        # @return [Hash] { time: Time, reliable: Boolean, source: String }
        def self.get_real_time
          # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à
          now = Time.now.to_i
          if @@ntp_cache && (now - @@ntp_cache_timestamp) < CACHE_TTL
            Logger.debug("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ cached NTP time", "TimeSync")
            return @@ntp_cache
          end
          
          # –ü—Ä–æ–±—É—î–º–æ –∫–æ–∂–µ–Ω NTP —Å–µ—Ä–≤–µ—Ä
          NTP_SERVERS.each do |server|
            begin
              ntp_time = fetch_ntp_time(server)
              
              result = {
                time: ntp_time,
                reliable: true,
                source: server,
                system_time: Time.now
              }
              
              # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∫–µ—à
              @@ntp_cache = result
              @@ntp_cache_timestamp = now
              
              Logger.debug("NTP time –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ #{server}", "TimeSync")
              return result
              
            rescue => e
              Logger.debug("NTP —Å–µ—Ä–≤–µ—Ä #{server} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: #{e.message}", "TimeSync")
              next
            end
          end
          
          # –í—Å—ñ NTP —Å–µ—Ä–≤–µ—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ
          Logger.warn("–í—Å—ñ NTP —Å–µ—Ä–≤–µ—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ", "TimeSync")
          {
            time: Time.now,
            reliable: false,
            source: 'system',
            system_time: Time.now
          }
        end
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —á–∞—Å—É
        # @return [Hash] { valid: Boolean, ntp_time: Time, diff_seconds: Integer, error: String }
        def self.validate_system_time
          begin
            ntp_result = get_real_time
            ntp_time = ntp_result[:time]
            system_time = Time.now
            
            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä—ñ–∑–Ω–∏—Ü—ñ
            diff_seconds = (ntp_time - system_time).abs
            
            if ntp_result[:reliable]
              if diff_seconds <= MAX_TIME_DIFF_SECONDS
                {
                  valid: true,
                  ntp_time: ntp_time,
                  diff_seconds: diff_seconds,
                  verified: true
                }
              else
                {
                  valid: false,
                  ntp_time: ntp_time,
                  diff_seconds: diff_seconds,
                  error: "–°–∏—Å—Ç–µ–º–Ω–∏–π —á–∞—Å –≤—ñ–¥—Ä—ñ–∑–Ω—è—î—Ç—å—Å—è –Ω–∞ #{diff_seconds} —Å–µ–∫—É–Ω–¥ (–º–∞–∫—Å–∏–º—É–º #{MAX_TIME_DIFF_SECONDS})",
                  verified: true
                }
              end
            else
              {
                valid: true,  # –Ø–∫—â–æ NTP –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π - –Ω–µ –±–ª–æ–∫—É—î–º–æ
                ntp_time: ntp_time,
                diff_seconds: diff_seconds,
                verified: false,
                warning: "NTP –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Å–∏—Å—Ç–µ–º–Ω–∏–π —á–∞—Å"
              }
            end
            
          rescue => e
            Logger.error("–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —á–∞—Å—É: #{e.message}", "TimeSync")
            {
              valid: true,  # –ü—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ –Ω–µ –±–ª–æ–∫—É—î–º–æ
              ntp_time: Time.now,
              diff_seconds: 0,
              verified: false,
              error: e.message
            }
          end
        end
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ —á–∞—Å –∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ NTP —Å–µ—Ä–≤–µ—Ä–∞
        # @param server [String] NTP —Å–µ—Ä–≤–µ—Ä
        # @return [Time] NTP —á–∞—Å
        def self.fetch_ntp_time(server)
          Timeout.timeout(NTP_TIMEOUT) do
            # –ü—Ä–æ—Å—Ç–∏–π NTP –∫–ª—ñ—î–Ω—Ç
            socket = UDPSocket.new
            socket.connect(server, 123)
            
            # NTP packet (48 bytes)
            ntp_packet = [0x1b] + [0] * 47
            socket.send(ntp_packet.pack('C*'), 0)
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            response = socket.recv(48)
            socket.close
            
            # –ü–∞—Ä—Å–∏–º–æ NTP timestamp (–±–∞–π—Ç 40-43)
            timestamp = response[40, 4].unpack('N')[0]
            
            # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ Time (NTP epoch: 1900, Unix epoch: 1970)
            ntp_time = Time.at(timestamp - 2208988800)
            
            ntp_time
          end
        end
        
        # –û—á–∏—Å—Ç–∏—Ç–∏ –∫–µ—à (–¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è)
        def self.clear_cache
          @@ntp_cache = nil
          @@ntp_cache_timestamp = 0
        end
      end
    end
  end
end

# === BACKWARD COMPATIBILITY ALIASES ===
# –î–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ —ñ—Å–Ω—É—é—á–∏–º –∫–æ–¥–æ–º
module ProGran3
  module Security
    # Alias –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
    TimeValidator = System::Utils::TimeSync
  end
end

# === –¢–ï–°–¢–£–í–ê–ù–ù–Ø ===
if __FILE__ == $0
  puts "üß™ –ë–∞–∑–æ–≤–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è Time Sync..."
  
  # –¢–µ—Å—Ç 1: –û—Ç—Ä–∏–º–∞–Ω–Ω—è NTP —á–∞—Å—É
  puts "\nüìù –¢–µ—Å—Ç 1: –û—Ç—Ä–∏–º–∞–Ω–Ω—è NTP —á–∞—Å—É..."
  ntp_result = ProGran3::System::Utils::TimeSync.get_real_time
  puts "   NTP Time: #{ntp_result[:time]}"
  puts "   Source: #{ntp_result[:source]}"
  puts "   Reliable: #{ntp_result[:reliable]}"
  
  # –¢–µ—Å—Ç 2: –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —á–∞—Å—É
  puts "\nüìù –¢–µ—Å—Ç 2: –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —á–∞—Å—É..."
  validation = ProGran3::System::Utils::TimeSync.validate_system_time
  puts "   Valid: #{validation[:valid]}"
  puts "   Diff: #{validation[:diff_seconds]} seconds"
  puts "   Verified: #{validation[:verified]}"
  
  # –¢–µ—Å—Ç 3: Cache consistency
  puts "\nüìù –¢–µ—Å—Ç 3: Cache consistency..."
  time1 = ProGran3::System::Utils::TimeSync.get_real_time
  sleep(1)
  time2 = ProGran3::System::Utils::TimeSync.get_real_time
  
  if time1[:time] == time2[:time]
    puts "   ‚úÖ PASSED: Cache working"
  else
    puts "   ‚ùå FAILED: Cache not working"
  end
  
  puts "\n‚úÖ –ë–∞–∑–æ–≤–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
end
