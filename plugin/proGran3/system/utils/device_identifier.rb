# plugin/proGran3/system/utils/device_identifier.rb
# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞ –ø—Ä–∏—Å—Ç—Ä–æ—é –¥–ª—è –ø—Ä–∏–≤'—è–∑–∫–∏ —Å–µ—Å—ñ—ó

require 'digest'
require 'socket'
require 'json'

module ProGran3
  module System
    module Utils
      class DeviceIdentifier
        
        # v3.1: –ö–µ—à –¥–ª—è –∑–∞—Ö–∏—Å—Ç—É –≤—ñ–¥ DoS (–∑–∞–Ω–∞–¥—Ç–æ —á–∞—Å—Ç—ñ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó)
        @@fingerprint_cache = nil
        @@cache_timestamp = 0
        CACHE_TTL = 3600  # 1 –≥–æ–¥–∏–Ω–∞
        
        # –ì–µ–Ω–µ—Ä—É—î —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –¥–ª—è —Ü—å–æ–≥–æ –ø—Ä–∏—Å—Ç—Ä–æ—é
        # @return [Hash] { fingerprint: String, components: Hash, timestamp: Integer }
        def self.generate
          # v3.1: –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∑ –∫–µ—à—É —è–∫—â–æ —Å–≤—ñ–∂–∏–π (DoS protection)
          now = Time.now.to_i
          
          if @@fingerprint_cache && (now - @@cache_timestamp) < CACHE_TTL
            return @@fingerprint_cache
          end
          
          # –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä
          components = collect_hardware_components
          fingerprint_string = generate_fingerprint_string(components)
          
          result = {
            fingerprint: fingerprint_string,
            components: components,
            timestamp: now,
            version: '3.0'  # v3.0: Machine GUID + flexible validation
          }
          
          # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∫–µ—à
          @@fingerprint_cache = result
          @@cache_timestamp = now
          
          result
        end
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –ø–æ—Ç–æ—á–Ω—ñ–π —Å–∏—Å—Ç–µ–º—ñ
        # @param stored_fingerprint [String] –ó–±–µ—Ä–µ–∂–µ–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä
        # @return [Boolean] true —è–∫—â–æ –∑–±—ñ–≥–∞—î—Ç—å—Å—è
        def self.matches?(stored_fingerprint)
          current = generate
          current[:fingerprint] == stored_fingerprint
        end
        
        # v3.0: Flexible validation - –ø–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ –∑–±—ñ–≥–∞—î—Ç—å—Å—è
        # @param stored_components [Hash] –ó–±–µ—Ä–µ–∂–µ–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
        # @param current_components [Hash] –ü–æ—Ç–æ—á–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
        # @return [Boolean] true —è–∫—â–æ –º—ñ–Ω—ñ–º—É–º 3 –∑ 4 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ –∑–±—ñ–≥–∞—é—Ç—å—Å—è
        def self.validate_flexible(stored_components, current_components)
          return false unless stored_components && current_components
          
          matches = 0
          total_components = 0
          
          # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–µ–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
          stored_components.each do |key, stored_value|
            current_value = current_components[key]
            total_components += 1
            
            if stored_value && current_value && stored_value == current_value
              matches += 1
            end
          end
          
          # –ü–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º 3 –∑ 4 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ (75%)
          matches >= 3 && total_components >= 3
        end
        
        # –ó–±–∏—Ä–∞—î –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –∞–ø–∞—Ä–∞—Ç–Ω–æ–≥–æ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è
        # @return [Hash] { machine_guid: String, cpu_id: String, motherboard: String, mac_address: String }
        def self.collect_hardware_components
          components = {}
          
          begin
            # 1. Machine GUID (Windows) - –Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
            components[:machine_guid] = get_machine_guid
            
            # 2. CPU ID
            components[:cpu_id] = get_cpu_id
            
            # 3. Motherboard serial
            components[:motherboard] = get_motherboard_serial
            
            # 4. MAC address (–ø–µ—Ä—à–∏–π –∞–∫—Ç–∏–≤–Ω–∏–π)
            components[:mac_address] = get_mac_address
            
          rescue => e
            puts "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–±–æ—Ä—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤: #{e.message}"
          end
          
          components
        end
        
        # –ì–µ–Ω–µ—Ä—É—î fingerprint string –∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
        # @param components [Hash]
        # @return [String] SHA256 hash
        def self.generate_fingerprint_string(components)
          # –°–æ—Ä—Ç—É—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—ñ
          sorted_components = components.sort.to_h
          
          # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä—è–¥–æ–∫ –¥–ª—è —Ö–µ—à—É–≤–∞–Ω–Ω—è
          fingerprint_data = sorted_components.map { |k, v| "#{k}:#{v}" }.join('|')
          
          # –ì–µ–Ω–µ—Ä—É—î–º–æ SHA256 hash
          Digest::SHA256.hexdigest(fingerprint_data)
        end
        
        # –û—Ç—Ä–∏–º—É—î Machine GUID (Windows)
        # @return [String, nil]
        def self.get_machine_guid
          return nil unless RUBY_PLATFORM =~ /mswin|mingw|cygwin/
          
          begin
            # –ß–∏—Ç–∞—î–º–æ –∑ —Ä–µ—î—Å—Ç—Ä—É Windows
            guid = `reg query "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography" /v MachineGuid 2>nul`.strip
            
            if guid && guid.include?('MachineGuid')
              # –í–∏—Ç—è–≥—É—î–º–æ GUID –∑ –≤–∏–≤–æ–¥—É
              guid_match = guid.match(/REG_SZ\s+(.+)/)
              return guid_match[1].strip if guid_match
            end
            
            nil
          rescue
            nil
          end
        end
        
        # –û—Ç—Ä–∏–º—É—î CPU ID
        # @return [String, nil]
        def self.get_cpu_id
          begin
            if RUBY_PLATFORM =~ /mswin|mingw|cygwin/
              # Windows: wmic
              cpu_id = `wmic cpu get ProcessorId /value 2>nul`.strip
              cpu_match = cpu_id.match(/ProcessorId=(.+)/)
              return cpu_match[1].strip if cpu_match
            elsif RUBY_PLATFORM =~ /linux/
              # Linux: /proc/cpuinfo
              cpu_info = File.read('/proc/cpuinfo')
              cpu_match = cpu_info.match(/cpu serial\s*:\s*(.+)/i)
              return cpu_match[1].strip if cpu_match
            end
            
            nil
          rescue
            nil
          end
        end
        
        # –û—Ç—Ä–∏–º—É—î serial –º–∞—Ç–µ—Ä–∏–Ω—Å—å–∫–æ—ó –ø–ª–∞—Ç–∏
        # @return [String, nil]
        def self.get_motherboard_serial
          begin
            if RUBY_PLATFORM =~ /mswin|mingw|cygwin/
              # Windows: wmic
              serial = `wmic baseboard get serialnumber /value 2>nul`.strip
              serial_match = serial.match(/SerialNumber=(.+)/)
              return serial_match[1].strip if serial_match
            elsif RUBY_PLATFORM =~ /linux/
              # Linux: dmidecode
              serial = `dmidecode -s baseboard-serial-number 2>/dev/null`.strip
              return serial unless serial.empty?
            end
            
            nil
          rescue
            nil
          end
        end
        
        # –û—Ç—Ä–∏–º—É—î MAC address –ø–µ—Ä—à–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ—Ä–µ–∂–µ–≤–æ–≥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
        # @return [String, nil]
        def self.get_mac_address
          begin
            # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –º–µ—Ä–µ–∂–µ–≤—ñ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏
            interfaces = Socket.getifaddrs
            
            # –®—É–∫–∞—î–º–æ –ø–µ—Ä—à–∏–π –∞–∫—Ç–∏–≤–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑ MAC
            interfaces.each do |interface|
              next unless interface.addr
              next if interface.addr.ipv4_loopback? || interface.addr.ipv6_loopback?
              
              # –û—Ç—Ä–∏–º—É—î–º–æ MAC address
              mac = interface.addr.mac_address
              return mac if mac && mac != '00:00:00:00:00:00'
            end
            
            nil
          rescue
            nil
          end
        end
        
        # Debug —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
        # @return [Hash]
        def self.debug_info
          components = collect_hardware_components
          
          puts "\nüîç Debug —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏:"
          puts "   Machine GUID: #{components[:machine_guid] ? '‚úÖ' : '‚ùå'}"
          puts "   CPU ID: #{components[:cpu_id] ? '‚úÖ' : '‚ùå'}"
          puts "   Motherboard: #{components[:motherboard] ? '‚úÖ' : '‚ùå'}"
          puts "   MAC Address: #{components[:mac_address] ? '‚úÖ' : '‚ùå'}"
          
          components
        end
        
        # –û—á–∏—â—É—î –∫–µ—à (–¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è)
        def self.clear_cache
          @@fingerprint_cache = nil
          @@cache_timestamp = 0
        end
      end
    end
  end
end

# === BACKWARD COMPATIBILITY ALIASES ===
# –î–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ —ñ—Å–Ω—É—é—á–∏–º –∫–æ–¥–æ–º
module ProGran3
  module Security
    # Alias –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
    HardwareFingerprint = System::Utils::DeviceIdentifier
  end
end

# === –¢–ï–°–¢–£–í–ê–ù–ù–Ø ===
if __FILE__ == $0
  puts "üß™ –ë–∞–∑–æ–≤–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è Device Identifier..."
  
  # –¢–µ—Å—Ç 1: –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞
  puts "\nüìù –¢–µ—Å—Ç 1: –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞..."
  fp = ProGran3::System::Utils::DeviceIdentifier.generate
  
  puts "   Fingerprint: #{fp[:fingerprint][0..16]}..."
  puts "   Version: #{fp[:version]}"
  puts "   Components: #{fp[:components].keys.join(', ')}"
  
  # –¢–µ—Å—Ç 2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–±—ñ–≥—É
  puts "\nüìù –¢–µ—Å—Ç 2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–±—ñ–≥—É..."
  matches = ProGran3::System::Utils::DeviceIdentifier.matches?(fp[:fingerprint])
  puts "   #{matches ? '‚úÖ –ó–ë–Ü–ì–ê–Ñ–¢–¨–°–Ø' : '‚ùå –ù–ï –ó–ë–Ü–ì–ê–Ñ–¢–¨–°–Ø'}"
  
  # –¢–µ—Å—Ç 3: Flexible validation
  puts "\nüìù –¢–µ—Å—Ç 3: Flexible validation..."
  current_components = fp[:components]
  stored_components = current_components.dup
  
  # –°–∏–º—É–ª—é—î–º–æ –∑–º—ñ–Ω—É –æ–¥–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  stored_components[:mac_address] = 'different_mac'
  
  flexible_valid = ProGran3::System::Utils::DeviceIdentifier.validate_flexible(
    stored_components, current_components
  )
  puts "   #{flexible_valid ? '‚úÖ FLEXIBLE VALID' : '‚ùå FLEXIBLE INVALID'}"
  
  # –¢–µ—Å—Ç 4: Debug —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
  puts "\nüìù –¢–µ—Å—Ç 4: Debug —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è..."
  ProGran3::System::Utils::DeviceIdentifier.debug_info
  
  puts "\n‚úÖ –ë–∞–∑–æ–≤–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
end
