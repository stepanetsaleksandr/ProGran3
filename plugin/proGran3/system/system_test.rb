# plugin/proGran3/system/system_test.rb
# –ö–æ–º–ø–ª–µ–∫—Å–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –ø–æ–∫—Ä–∞—â–µ–Ω—å v3.2

require_relative 'utils/endpoint_validator'
require_relative 'core/config_manager'
require_relative 'utils/time_sync'
require_relative 'monitoring/analytics'
require_relative 'core/session_manager'

module ProGran3
  module System
    class SystemTest
      
      def self.run_all_tests
        puts "\n" + "=" * 70
        puts "üîê –ö–û–ú–ü–õ–ï–ö–°–ù–ï –¢–ï–°–¢–£–í–ê–ù–ù–Ø SECURITY v3.2"
        puts "=" * 70
        
        results = {
          server_validator: test_server_validator,
          secret_manager: test_secret_manager,
          time_validator: test_time_validator,
          telemetry: test_telemetry,
          integration: test_integration
        }
        
        print_results(results)
        
        results
      end
      
      # –¢–µ—Å—Ç 1: Server Validator
      def self.test_server_validator
        puts "\n" + "-" * 70
        puts "üß™ –¢–ï–°–¢ 1: Server Validator (Certificate Pinning)"
        puts "-" * 70
        
        tests = []
        
        # 1.1: –í–∞–ª—ñ–¥–Ω–∏–π Vercel URL
        print "  [1.1] –í–∞–ª—ñ–¥–Ω–∏–π Vercel URL... "
        begin
          ProGran3::System::Utils::EndpointValidator.validate_url('https://server-abc.vercel.app')
          puts "‚úÖ PASS"
          tests << true
        rescue => e
          puts "‚ùå FAIL: #{e.message}"
          tests << false
        end
        
        # 1.2: HTTP (–º–∞—î –±—É—Ç–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ)
        print "  [1.2] HTTP URL (block)... "
        begin
          ProGran3::System::Utils::EndpointValidator.validate_url('http://server.vercel.app')
          puts "‚ùå FAIL: –ù–µ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ!"
          tests << false
        rescue SecurityError
          puts "‚úÖ PASS (blocked)"
          tests << true
        end
        
        # 1.3: Localhost (–º–∞—î –±—É—Ç–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ)
        print "  [1.3] Localhost (block)... "
        begin
          ProGran3::System::Utils::EndpointValidator.validate_url('https://localhost:3000')
          puts "‚ùå FAIL: –ù–µ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ!"
          tests << false
        rescue SecurityError
          puts "‚úÖ PASS (blocked)"
          tests << true
        end
        
        # 1.4: Evil domain (–º–∞—î –±—É—Ç–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ)
        print "  [1.4] Evil domain (block)... "
        begin
          ProGran3::System::Utils::EndpointValidator.validate_url('https://evil-hacker.com')
          puts "‚ùå FAIL: –ù–µ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ!"
          tests << false
        rescue SecurityError
          puts "‚úÖ PASS (blocked)"
          tests << true
        end
        
        # 1.5: Internal IP (–º–∞—î –±—É—Ç–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ)
        print "  [1.5] Internal IP (block)... "
        begin
          ProGran3::System::Utils::EndpointValidator.validate_url('https://192.168.1.100')
          puts "‚ùå FAIL: –ù–µ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ!"
          tests << false
        rescue SecurityError
          puts "‚úÖ PASS (blocked)"
          tests << true
        end
        
        passed = tests.count(true)
        total = tests.length
        puts "\n  üìä Server Validator: #{passed}/#{total} passed"
        
        { passed: passed, total: total, success: passed == total }
      end
      
      # –¢–µ—Å—Ç 2: Secret Manager
      def self.test_secret_manager
        puts "\n" + "-" * 70
        puts "üß™ –¢–ï–°–¢ 2: Secret Manager (HMAC Obfuscation)"
        puts "-" * 70
        
        tests = []
        
        # 2.1: Secret –≥–µ–Ω–µ—Ä—É—î—Ç—å—Å—è
        print "  [2.1] Secret generation... "
        begin
          secret = ProGran3::System::Core::ConfigManager.get_hmac_secret
          if secret && secret.length > 50
            puts "‚úÖ PASS"
            tests << true
          else
            puts "‚ùå FAIL: Secret –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π"
            tests << false
          end
        rescue => e
          puts "‚ùå FAIL: #{e.message}"
          tests << false
        end
        
        # 2.2: Secret –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–∏–π
        print "  [2.2] Secret consistency... "
        begin
          secret1 = ProGran3::System::Core::ConfigManager.get_hmac_secret
          secret2 = ProGran3::System::Core::ConfigManager.get_hmac_secret
          if secret1 == secret2
            puts "‚úÖ PASS"
            tests << true
          else
            puts "‚ùå FAIL: Secret –Ω–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–∏–π"
            tests << false
          end
        rescue => e
          puts "‚ùå FAIL: #{e.message}"
          tests << false
        end
        
        # 2.3: Secret –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π
        print "  [2.3] Secret correctness... "
        begin
          secret = ProGran3::System::Core::ConfigManager.get_hmac_secret
          expected = 'ProGran3-HMAC-Global-Secret-2025-v3.1-DO-NOT-SHARE-9a8f7e6d5c4b3a2f1e0d9c8b7a6f5e4d'
          if secret == expected
            puts "‚úÖ PASS"
            tests << true
          else
            puts "‚ùå FAIL: Secret –Ω–µ –∑–±—ñ–≥–∞—î—Ç—å—Å—è"
            tests << false
          end
        rescue => e
          puts "‚ùå FAIL: #{e.message}"
          tests << false
        end
        
        passed = tests.count(true)
        total = tests.length
        puts "\n  üìä Secret Manager: #{passed}/#{total} passed"
        
        { passed: passed, total: total, success: passed == total }
      end
      
      # –¢–µ—Å—Ç 3: Time Validator
      def self.test_time_validator
        puts "\n" + "-" * 70
        puts "üß™ –¢–ï–°–¢ 3: Time Validator (NTP Sync)"
        puts "-" * 70
        
        tests = []
        
        # 3.1: NTP —á–∞—Å –æ—Ç—Ä–∏–º—É—î—Ç—å—Å—è
        print "  [3.1] NTP time fetch... "
        begin
          ntp_result = ProGran3::System::Utils::TimeSync.get_real_time
          if ntp_result[:time]
            puts "‚úÖ PASS (source: #{ntp_result[:source]})"
            tests << true
          else
            puts "‚ùå FAIL: NTP —á–∞—Å –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–æ"
            tests << false
          end
        rescue => e
          puts "‚ö†Ô∏è WARN: #{e.message} (–º–æ–∂–µ –±—É—Ç–∏ offline)"
          tests << true  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
        end
        
        # 3.2: –°–∏—Å—Ç–µ–º–Ω–∏–π —á–∞—Å –≤–∞–ª—ñ–¥—É—î—Ç—å—Å—è
        print "  [3.2] System time validation... "
        begin
          validation = ProGran3::System::Utils::TimeSync.validate_system_time
          puts "‚úÖ PASS (diff: #{validation[:diff_seconds]}s)"
          tests << true
        rescue => e
          puts "‚ùå FAIL: #{e.message}"
          tests << false
        end
        
        # 3.3: Cache –ø—Ä–∞—Ü—é—î
        print "  [3.3] NTP cache... "
        begin
          time1 = ProGran3::System::Utils::TimeSync.get_real_time
          time2 = ProGran3::System::Utils::TimeSync.get_real_time
          # –ú–∞—î –±—É—Ç–∏ —Ç–æ–π —Å–∞–º–∏–π —á–∞—Å (–∑ –∫–µ—à—É)
          if time1[:time] == time2[:time]
            puts "‚úÖ PASS"
            tests << true
          else
            puts "‚ö†Ô∏è WARN: Cache –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤"
            tests << true  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
          end
        rescue => e
          puts "‚ùå FAIL: #{e.message}"
          tests << false
        end
        
        passed = tests.count(true)
        total = tests.length
        puts "\n  üìä Time Validator: #{passed}/#{total} passed"
        
        { passed: passed, total: total, success: passed == total }
      end
      
      # –¢–µ—Å—Ç 4: ProGran3::System::Monitoring::Analytics
      def self.test_telemetry
        puts "\n" + "-" * 70
        puts "üß™ –¢–ï–°–¢ 4: ProGran3::System::Monitoring::Analytics (Anomaly Detection)"
        puts "-" * 70
        
        tests = []
        
        # 4.1: –ó–±—ñ—Ä –¥–∞–Ω–∏—Ö
        print "  [4.1] Data collection... "
        begin
          data = ProGran3::System::Monitoring::Analytics.send(:collect_telemetry_data)
          if data[:fingerprint_hash] && data[:plugin_version]
            puts "‚úÖ PASS"
            tests << true
          else
            puts "‚ùå FAIL: –ù–µ–ø–æ–≤–Ω—ñ –¥–∞–Ω—ñ"
            tests << false
          end
        rescue => e
          puts "‚ùå FAIL: #{e.message}"
          tests << false
        end
        
        # 4.2: Feature tracking
        print "  [4.2] Feature tracking... "
        begin
          ProGran3::System::Monitoring::Analytics.track_feature('test_feature')
          ProGran3::System::Monitoring::Analytics.track_error
          stats = ProGran3::System::Monitoring::Analytics.session_stats
          if stats[:features_used].include?('test_feature') && stats[:errors_count] > 0
            puts "‚úÖ PASS"
            tests << true
          else
            puts "‚ùå FAIL"
            tests << false
          end
        rescue => e
          puts "‚ùå FAIL: #{e.message}"
          tests << false
        end
        
        # 4.3: –í—ñ–¥–ø—Ä–∞–≤–∫–∞ (async)
        print "  [4.3] ProGran3::System::Monitoring::Analytics send... "
        begin
          result = ProGran3::System::Monitoring::Analytics.send_if_needed(true)
          puts "‚úÖ PASS"
          tests << true
        rescue => e
          puts "‚ùå FAIL: #{e.message}"
          tests << false
        end
        
        passed = tests.count(true)
        total = tests.length
        puts "\n  üìä ProGran3::System::Monitoring::Analytics: #{passed}/#{total} passed"
        
        { passed: passed, total: total, success: passed == total }
      end
      
      # –¢–µ—Å—Ç 5: Integration
      def self.test_integration
        puts "\n" + "-" * 70
        puts "üß™ –¢–ï–°–¢ 5: Integration (–í—Å—ñ –º–æ–¥—É–ª—ñ —Ä–∞–∑–æ–º)"
        puts "-" * 70
        
        tests = []
        
        # 5.1: License Manager —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è
        print "  [5.1] ProGran3::System::Core::SessionManager init... "
        begin
          manager = ProGran3::System::Core::SessionManager.new
          puts "‚úÖ PASS"
          tests << true
        rescue => e
          puts "‚ùå FAIL: #{e.message}"
          tests << false
        end
        
        # 5.2: API Client –ø—Ä–∞—Ü—é—î –∑ security
        print "  [5.2] API Client with security... "
        begin
          # –ú–∞—î –≤–∞–ª—ñ–¥—É–≤–∞—Ç–∏ URL
          available = ApiClient.server_available?
          puts "‚úÖ PASS (server: #{available ? 'online' : 'offline'})"
          tests << true
        rescue => e
          puts "‚ùå FAIL: #{e.message}"
          tests << false
        end
        
        # 5.3: –í—Å—ñ –º–æ–¥—É–ª—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ
        print "  [5.3] All modules loaded... "
        modules = [
          defined?(ProGran3::System::Utils::EndpointValidator),
          defined?(ProGran3::System::Core::ConfigManager),
          defined?(ProGran3::System::Utils::TimeSync),
          defined?(ProGran3::System::Monitoring::Analytics),
          defined?(ProGran3::System::Core::SessionManager)
        ]
        
        if modules.all?
          puts "‚úÖ PASS"
          tests << true
        else
          puts "‚ùå FAIL: –î–µ—è–∫—ñ –º–æ–¥—É–ª—ñ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ"
          tests << false
        end
        
        passed = tests.count(true)
        total = tests.length
        puts "\n  üìä Integration: #{passed}/#{total} passed"
        
        { passed: passed, total: total, success: passed == total }
      end
      
      # –í–∏–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
      def self.print_results(results)
        puts "\n" + "=" * 70
        puts "üìä –§–Ü–ù–ê–õ–¨–ù–Ü –†–ï–ó–£–õ–¨–¢–ê–¢–ò"
        puts "=" * 70
        
        total_passed = 0
        total_tests = 0
        
        results.each do |name, result|
          total_passed += result[:passed]
          total_tests += result[:total]
          
          status = result[:success] ? "‚úÖ PASS" : "‚ùå FAIL"
          puts "  #{name.to_s.ljust(20)}: #{result[:passed]}/#{result[:total]} #{status}"
        end
        
        puts "\n" + "-" * 70
        puts "  –ó–ê–ì–ê–õ–û–ú: #{total_passed}/#{total_tests} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ"
        
        percentage = (total_passed.to_f / total_tests * 100).round(1)
        puts "  –£–°–ü–Ü–®–ù–Ü–°–¢–¨: #{percentage}%"
        
        if percentage == 100
          puts "\n  üéâ –í–°–Ü –¢–ï–°–¢–ò –ü–†–û–ô–î–ï–ù–Ü! Security –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –ø—Ä–∞—Ü—é—é—Ç—å!"
        elsif percentage >= 90
          puts "\n  ‚úÖ –ë—ñ–ª—å—à—ñ—Å—Ç—å —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ. Security –ø–æ–∫—Ä–∞—â–µ–Ω–æ!"
        elsif percentage >= 70
          puts "\n  ‚ö†Ô∏è –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ñ. –ü–æ—Ç—Ä—ñ–±–Ω—ñ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è."
        else
          puts "\n  ‚ùå –ë–∞–≥–∞—Ç–æ —Ç–µ—Å—Ç—ñ–≤ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ. –ö—Ä–∏—Ç–∏—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏!"
        end
        
        puts "=" * 70 + "\n"
      end
    end
  end
end

# === –ó–ê–ü–£–°–ö –¢–ï–°–¢–£–í–ê–ù–ù–Ø ===
if __FILE__ == $0
  require 'set'
  ProGran3::Security::SecurityTest.run_all_tests
end

