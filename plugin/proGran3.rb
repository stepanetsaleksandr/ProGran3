# progran3.rb
require 'sketchup.rb'
require 'net/http'
require 'json'
require 'socket'
require 'timeout'

# –ö–ª–∞—Å –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –ø–ª–∞–≥—ñ–Ω–∞
class ProGran3Tracker
  def initialize(base_url = nil)
    @base_url = base_url || ENV['PROGRAN3_TRACKING_URL'] || 'https://progran3-tracking-server-90uwkjzpv-provis3ds-projects.vercel.app'
    @plugin_id = generate_unique_plugin_id
    @is_running = false
    @heartbeat_thread = nil
    @retry_count = 0
    @max_retries = 3
    @retry_delay = 30
  end

  private

  def generate_unique_plugin_id
    hostname = Socket.gethostname.downcase.gsub(/[^a-z0-9]/, '-')
    username = ENV['USERNAME'] || ENV['USER'] || 'sketchup-user'
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–∞–±—ñ–ª—å–Ω–∏–π ID –Ω–∞ –æ—Å–Ω–æ–≤—ñ hostname —Ç–∞ username
    "progran3-#{hostname}-#{username}".downcase
  end

  public

  def start_tracking
    return if @is_running
    
    @is_running = true
    puts "üöÄ –ó–∞–ø—É—Å–∫ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è ProGran3..."
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–µ—Ä—à–∏–π heartbeat
    send_heartbeat
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ñ–æ–Ω–æ–≤—É –∑–∞–¥–∞—á—É –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–∏—Ö heartbeat
    @heartbeat_thread = Thread.new do
      loop do
        break unless @is_running
        sleep(300) # 5 —Ö–≤–∏–ª–∏–Ω
        send_heartbeat if @is_running
      end
    end
    
    puts "‚úÖ –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–µ. Plugin ID: #{@plugin_id}"
  end

  def stop_tracking
    @is_running = false
    
    if @heartbeat_thread
      # Graceful shutdown - —á–µ–∫–∞—î–º–æ –¥–æ 5 —Å–µ–∫—É–Ω–¥
      @heartbeat_thread.join(5)
      @heartbeat_thread.kill if @heartbeat_thread.alive?
    end
    
    puts "‚èπÔ∏è –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–æ"
  end

  def send_heartbeat
    send_heartbeat_with_retry
  end

  private

  def send_heartbeat_with_retry
    begin
      uri = URI("#{@base_url}/api/heartbeat")
      
      # –í–∞–ª—ñ–¥–∞—Ü—ñ—è URL
      unless uri.scheme == 'https' || uri.scheme == 'http'
        raise "–ù–µ–≤—ñ—Ä–Ω–∏–π URL: #{@base_url}"
      end
      
      data = {
        plugin_id: @plugin_id,
        plugin_name: "ProGran3",
        version: get_plugin_version,
        user_id: get_user_identifier,
        computer_name: Socket.gethostname,
        system_info: get_system_info,
        timestamp: Time.now.iso8601,
        action: "heartbeat_update",  # –î–æ–¥–∞—î–º–æ —Ç–∏–ø –¥—ñ—ó
        source: "sketchup_plugin",   # –î–æ–¥–∞—î–º–æ –¥–∂–µ—Ä–µ–ª–æ
        update_existing: true,       # –Ø–≤–Ω–æ –≤–∫–∞–∑—É—î–º–æ, —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–Ω–æ–≤–∏—Ç–∏ —ñ—Å–Ω—É—é—á–∏–π
        force_update: false          # –ù–µ –ø—Ä–∏–º—É—Å–æ–≤–æ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –Ω–æ–≤–∏–π
      }
      
      # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
      validate_heartbeat_data(data)
      
      http = Net::HTTP.new(uri.host, uri.port)
      http.use_ssl = true if uri.scheme == 'https'
      http.read_timeout = 10
      http.open_timeout = 10
      
      request = Net::HTTP::Post.new(uri)
      request['Content-Type'] = 'application/json'
      request['User-Agent'] = "ProGran3-Plugin/#{get_plugin_version}"
      request.body = data.to_json
      
        puts "üì° –í—ñ–¥–ø—Ä–∞–≤–∫–∞ heartbeat –¥–æ: #{@base_url}/api/heartbeat"
        puts "üìä Plugin ID: #{data[:plugin_id]}"
        puts "üìã Action: #{data[:action]}"
        puts "üìã Update existing: #{data[:update_existing]}"
      
      response = http.request(request)
      
      puts "üì® –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞: #{response.code} #{response.message}"
      puts "üìÑ –¢—ñ–ª–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: #{response.body}"
      
      if response.code == '200'
        # –î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ (httpbin.org) –∑–∞–≤–∂–¥–∏ —É—Å–ø—ñ—Ö
        if @base_url.include?('httpbin.org')
          puts "üíì Heartbeat –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: #{Time.now.strftime('%H:%M:%S')}"
          @retry_count = 0 # –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ø—Ä–∏ —É—Å–ø—ñ—Ö—É
        elsif @base_url.include?('vercel.app')
          # –î–ª—è Vercel —Å–µ—Ä–≤–µ—Ä–∞ - –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
          begin
            result = JSON.parse(response.body)
            if result['success'] && result['plugin']
              puts "üíì Heartbeat –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: #{Time.now.strftime('%H:%M:%S')}"
              puts "üìã –°–µ—Ä–≤–µ—Ä ID: #{result['plugin']['id']}"
              puts "üìã Plugin ID: #{result['plugin']['plugin_id']}"
              puts "üìã Last heartbeat: #{result['plugin']['last_heartbeat']}"
              puts "üìã Is active: #{result['plugin']['is_active']}"
              
              # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ plugin_id —Å–ø—ñ–≤–ø–∞–¥–∞—î
              if result['plugin']['plugin_id'] != @plugin_id
                puts "‚ö†Ô∏è –£–í–ê–ì–ê: Plugin ID –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—î!"
                puts "   –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: #{@plugin_id}"
                puts "   –û—Ç—Ä–∏–º–∞–Ω–æ: #{result['plugin']['plugin_id']}"
              end
              
              @retry_count = 0
            else
              puts "‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ –æ—á—ñ–∫—É–≤–∞–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å"
              @retry_count = 0 # –í—Å–µ –æ–¥–Ω–æ –≤–≤–∞–∂–∞—î–º–æ —É—Å–ø—ñ—Ö–æ–º –ø—Ä–∏ 200
            end
          rescue => e
            puts "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: #{e.message}"
            @retry_count = 0
          end
        else
          # –î–ª—è —ñ–Ω—à–∏—Ö —Å–µ—Ä–≤–µ—Ä—ñ–≤ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å
          result = JSON.parse(response.body)
          if result['success'] || result['status'] == 'ok'
            puts "üíì Heartbeat –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: #{Time.now.strftime('%H:%M:%S')}"
            @retry_count = 0 # –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ø—Ä–∏ —É—Å–ø—ñ—Ö—É
          else
            raise "–°–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ–º–∏–ª–∫—É: #{result['error'] || result['message']}"
          end
        end
      else
        raise "HTTP –ø–æ–º–∏–ª–∫–∞: #{response.code} - #{response.message}"
      end
      
    rescue Timeout::Error
      handle_heartbeat_error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ heartbeat")
    rescue => e
      handle_heartbeat_error("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ heartbeat: #{e.message}")
    end
  end
  
  public
  
  # –ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ (–ø—É–±–ª—ñ—á–Ω–∏–π)
  def check_server_status
    begin
      uri = URI("#{@base_url}/api/plugins")
      
      # –í–∞–ª—ñ–¥–∞—Ü—ñ—è URL
      unless uri.scheme == 'https' || uri.scheme == 'http'
        raise "–ù–µ–≤—ñ—Ä–Ω–∏–π URL: #{@base_url}"
      end
      
      http = Net::HTTP.new(uri.host, uri.port)
      http.use_ssl = (uri.scheme == 'https')
      http.read_timeout = 30
      http.open_timeout = 10
      
      request = Net::HTTP::Get.new(uri)
      request['User-Agent'] = "ProGran3-Plugin/#{get_plugin_version}"
      
      puts "üì° –ó–∞–ø–∏—Ç —Å—Ç–∞—Ç—É—Å—É –∑ —Å–µ—Ä–≤–µ—Ä–∞: #{@base_url}/api/plugins"
      
      response = http.request(request)
      
      puts "üì® –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞: #{response.code} #{response.message}"
      
      if response.code == '200'
        begin
          result = JSON.parse(response.body)
          puts "üìÑ –î–∞–Ω—ñ –∑ —Å–µ—Ä–≤–µ—Ä–∞:"
          puts JSON.pretty_generate(result)
          
          # –®—É–∫–∞—î–º–æ –Ω–∞—à –ø–ª–∞–≥—ñ–Ω
          if result.is_a?(Array)
            our_plugin = result.find { |p| p['plugin_id'] == @plugin_id }
            if our_plugin
              puts "‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –Ω–∞—à –ø–ª–∞–≥—ñ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ:"
              puts "   ID: #{our_plugin['id']}"
              puts "   Plugin ID: #{our_plugin['plugin_id']}"
              puts "   Last heartbeat: #{our_plugin['last_heartbeat']}"
              puts "   Is active: #{our_plugin['is_active']}"
            else
              puts "‚ùå –ù–∞—à –ø–ª–∞–≥—ñ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ"
              puts "   –®—É–∫–∞—î–º–æ: #{@plugin_id}"
            end
          end
        rescue => e
          puts "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: #{e.message}"
        end
      else
        puts "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å: #{response.code}"
      end
      
    rescue => e
      puts "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —Å—Ç–∞—Ç—É—Å—É: #{e.message}"
    end
  end
  
  # –¢–µ—Å—Ç–æ–≤–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ heartbeat –∑ —Ä—ñ–∑–Ω–∏–º–∏ action
  def test_heartbeat_with_action(action_type)
    begin
      uri = URI("#{@base_url}/api/heartbeat")
      
      # –í–∞–ª—ñ–¥–∞—Ü—ñ—è URL
      unless uri.scheme == 'https' || uri.scheme == 'http'
        raise "–ù–µ–≤—ñ—Ä–Ω–∏–π URL: #{@base_url}"
      end
      
      data = {
        plugin_id: @plugin_id,
        plugin_name: "ProGran3",
        version: get_plugin_version,
        user_id: get_user_identifier,
        computer_name: Socket.gethostname,
        system_info: get_system_info,
        timestamp: Time.now.iso8601,
        action: action_type,           # –¢–µ—Å—Ç–æ–≤–∏–π action
        source: "sketchup_plugin",
        update_existing: true,
        force_update: false
      }
      
      # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
      validate_heartbeat_data(data)
      
      http = Net::HTTP.new(uri.host, uri.port)
      http.use_ssl = (uri.scheme == 'https')
      http.read_timeout = 30
      http.open_timeout = 10
      
      request = Net::HTTP::Post.new(uri)
      request['Content-Type'] = 'application/json'
      request['User-Agent'] = "ProGran3-Plugin/#{get_plugin_version}"
      request.body = data.to_json
      
      puts "üì° –¢–µ—Å—Ç–æ–≤–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ heartbeat –∑ action='#{action_type}'"
      puts "üìä Plugin ID: #{data[:plugin_id]}"
      
      response = http.request(request)
      
      puts "üì® –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞: #{response.code} #{response.message}"
      puts "üìÑ –¢—ñ–ª–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: #{response.body}"
      
      if response.code == '200'
        begin
          result = JSON.parse(response.body)
          if result['success'] && result['plugin']
            puts "‚úÖ –¢–µ—Å—Ç–æ–≤–∏–π heartbeat —É—Å–ø—ñ—à–Ω–∏–π"
            puts "üìã –°–µ—Ä–≤–µ—Ä ID: #{result['plugin']['id']}"
            puts "üìã Plugin ID: #{result['plugin']['plugin_id']}"
            puts "üìã Last heartbeat: #{result['plugin']['last_heartbeat']}"
          else
            puts "‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤–∏–π heartbeat –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ –æ—á—ñ–∫—É–≤–∞–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å"
          end
        rescue => e
          puts "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É —Ç–µ—Å—Ç–æ–≤–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: #{e.message}"
        end
      else
        puts "‚ùå –¢–µ—Å—Ç–æ–≤–∏–π heartbeat –Ω–µ–≤–¥–∞–ª–∏–π: #{response.code}"
      end
      
    rescue => e
      puts "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤—ñ–π –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ heartbeat: #{e.message}"
    end
  end
  
  # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–æ–≤—ñ–ª—å–Ω–æ–≥–æ API endpoint
  def test_api_endpoint(endpoint)
    begin
      uri = URI("#{@base_url}#{endpoint}")
      
      # –í–∞–ª—ñ–¥–∞—Ü—ñ—è URL
      unless uri.scheme == 'https' || uri.scheme == 'http'
        raise "–ù–µ–≤—ñ—Ä–Ω–∏–π URL: #{@base_url}#{endpoint}"
      end
      
      http = Net::HTTP.new(uri.host, uri.port)
      http.use_ssl = (uri.scheme == 'https')
      http.read_timeout = 30
      http.open_timeout = 10
      
      request = Net::HTTP::Get.new(uri)
      request['User-Agent'] = "ProGran3-Plugin/#{get_plugin_version}"
      
      puts "üì° –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è endpoint: #{@base_url}#{endpoint}"
      
      response = http.request(request)
      
      puts "üì® –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞: #{response.code} #{response.message}"
      puts "üìÑ –¢—ñ–ª–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: #{response.body[0..500]}#{response.body.length > 500 ? '...' : ''}"
      
      if response.code == '200'
        puts "‚úÖ Endpoint #{endpoint} –ø—Ä–∞—Ü—é—î"
      else
        puts "‚ùå Endpoint #{endpoint} –Ω–µ–≤–¥–∞–ª–∏–π: #{response.code}"
      end
      
    rescue => e
      puts "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—ñ #{endpoint}: #{e.message}"
    end
  end

  private

  def get_plugin_version
    # –ß–∏—Ç–∞—î–º–æ –≤–µ—Ä—Å—ñ—é –∑ constants.rb –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω—É
    if defined?(ProGran3::Constants) && ProGran3::Constants.const_defined?(:VERSION)
      ProGran3::Constants::VERSION
    else
      "1.0.0"
    end
  end

  def get_user_identifier
    # –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    username = ENV['USERNAME'] || ENV['USER'] || 'sketchup-user'
    hostname = Socket.gethostname
    "#{username}@#{hostname}"
  end

  def get_system_info
    {
      os: RUBY_PLATFORM,
      ruby_version: RUBY_VERSION,
      sketchup_version: defined?(Sketchup) ? Sketchup.version : 'unknown',
      architecture: RUBY_PLATFORM.include?('x64') ? '64-bit' : '32-bit'
    }
  end

  def validate_heartbeat_data(data)
    required_fields = [:plugin_id, :plugin_name, :version, :user_id, :computer_name]
    required_fields.each do |field|
      if data[field].nil? || data[field].to_s.strip.empty?
        raise "–í—ñ–¥—Å—É—Ç–Ω—î –æ–±–æ–≤'—è–∑–∫–æ–≤–µ –ø–æ–ª–µ: #{field}"
      end
    end
  end

  def handle_heartbeat_error(message)
    @retry_count += 1
    puts "‚ùå #{message}"
    
    if @retry_count < @max_retries
      puts "üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ #{@retry_count}/#{@max_retries} —á–µ—Ä–µ–∑ #{@retry_delay} —Å–µ–∫—É–Ω–¥..."
      sleep(@retry_delay)
      send_heartbeat_with_retry
    else
      puts "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ heartbeat –ø—ñ—Å–ª—è #{@max_retries} —Å–ø—Ä–æ–±"
      @retry_count = 0 # –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫
    end
  end
end

module ProGran3
  # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –Ω–æ–≤—ñ —Å–∏—Å—Ç–µ–º–Ω—ñ –º–æ–¥—É–ª—ñ –ø–µ—Ä—à–∏–º–∏
  require_relative 'progran3/constants'
  require_relative 'progran3/logger'
  require_relative 'progran3/error_handler'
  require_relative 'progran3/validation'
  require_relative 'progran3/dimensions_manager'
  require_relative 'progran3/coordination_manager'
  require_relative 'progran3/callback_manager'
  
  # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –º–æ–¥—É–ª—ñ
  require_relative 'progran3/loader'
  require_relative 'progran3/builders/foundation_builder'
  require_relative 'progran3/builders/tiling_builder'
  require_relative 'progran3/builders/cladding_builder'
  require_relative 'progran3/builders/blind_area_builder'
  require_relative 'progran3/ui'
  require_relative 'progran3/skp_preview_extractor'

  # –ú–µ—Ç–æ–¥ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–Ω–µ–ª—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤
  def self.create_toolbar
    ErrorHandler.safe_execute("Toolbar", "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–Ω–µ–ª—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤") do
      # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–Ω–µ–ª—å —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤
      toolbar = ::UI::Toolbar.new("ProGran3")
      
      # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫—É –ø–ª–∞–≥—ñ–Ω–∞
      cmd = ::UI::Command.new("ProGran3 –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä") {
        ErrorHandler.safe_execute("UI", "–ó–∞–ø—É—Å–∫ –¥—ñ–∞–ª–æ–≥—É") do
          ProGran3::UI.show_dialog
        end
      }
      
      # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —ñ–∫–æ–Ω–∫–∏
      icon_path = File.join(Constants::ICONS_PATH, "icon_24.png")
      ErrorHandler.validate_file_exists(icon_path, "Toolbar")
      cmd.small_icon = icon_path
      cmd.large_icon = icon_path
      
      cmd.tooltip = "ProGran3 –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä - –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π"
      
      # –î–æ–¥–∞—î–º–æ –∫–æ–º–∞–Ω–¥—É –¥–æ –ø–∞–Ω–µ–ª—ñ
      toolbar.add_item(cmd)
      
      # –ü–æ–∫–∞–∑—É—î–º–æ –ø–∞–Ω–µ–ª—å
      toolbar.show
      
      Logger.success("–ü–∞–Ω–µ–ª—å —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ ProGran3 —Å—Ç–≤–æ—Ä–µ–Ω–∞", "Toolbar")
    end
  end

  # –î–æ–¥–∞—î–º–æ –ø—É–Ω–∫—Ç —É –º–µ–Ω—é Plugins
  unless file_loaded?(__FILE__)
    # –ú–µ–Ω—é Plugins
    ::UI.menu("Plugins").add_item("proGran3 –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä") {
      ErrorHandler.safe_execute("Menu", "–ó–∞–ø—É—Å–∫ –∑ –º–µ–Ω—é") do
        ProGran3::UI.show_dialog
      end
    }
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–Ω–µ–ª—å —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤
    create_toolbar
    file_loaded(__FILE__)
    
    Logger.info("–ü–ª–∞–≥—ñ–Ω ProGran3 –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ", "Main")
  end

  # –ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–ª–∞–≥—ñ–Ω–∞
  def self.reload
    Logger.start("–ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–ª–∞–≥—ñ–Ω–∞ ProGran3", "Main")
    
    # –û—á–∏—â–∞—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ —Ñ–∞–π–ª–∏
    $LOADED_FEATURES.delete_if { |file| file.include?('progran3') }
    
          # –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –Ω–∞—à—ñ —Ñ–∞–π–ª–∏
      plugin_dir = File.dirname(__FILE__)
      our_files = [
        File.join(plugin_dir, 'proGran3.rb'),
        File.join(plugin_dir, 'proGran3', 'constants.rb'),
        File.join(plugin_dir, 'proGran3', 'logger.rb'),
        File.join(plugin_dir, 'proGran3', 'error_handler.rb'),
        File.join(plugin_dir, 'proGran3', 'validation.rb'),
        File.join(plugin_dir, 'proGran3', 'dimensions_manager.rb'),
        File.join(plugin_dir, 'proGran3', 'coordination_manager.rb'),
        File.join(plugin_dir, 'proGran3', 'callback_manager.rb'),
        File.join(plugin_dir, 'proGran3', 'loader.rb'),
        File.join(plugin_dir, 'proGran3', 'ui.rb'),
        File.join(plugin_dir, 'proGran3', 'builders', 'foundation_builder.rb'),
        File.join(plugin_dir, 'proGran3', 'builders', 'tiling_builder.rb'),
        File.join(plugin_dir, 'proGran3', 'builders', 'cladding_builder.rb'),
        File.join(plugin_dir, 'proGran3', 'builders', 'blind_area_builder.rb'),
        File.join(plugin_dir, 'proGran3', 'skp_preview_extractor.rb'),
        File.join(plugin_dir, 'proGran3', 'carousel', 'carousel_manager.rb'),
        File.join(plugin_dir, 'proGran3', 'carousel', 'carousel_ui.rb')
      ]
    
    our_files.each do |file|
      if File.exist?(file)
        ErrorHandler.safe_execute("Reload", "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è #{File.basename(file)}") do
          load file
          Logger.success(File.basename(file), "Reload")
        end
      else
        Logger.warn("–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: #{File.basename(file)}", "Reload")
      end
    end
    
    Logger.finish("–ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–ª–∞–≥—ñ–Ω–∞ ProGran3", "Main")
  end
  

  # –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –ø—Ä–µ–≤—å—é –∑ .skp —Ñ–∞–π–ª—ñ–≤
  def self.extract_skp_preview(component_path, size = 256)
    SkpPreviewExtractor.extract_preview(component_path, size)
  end
  
  # –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è base64 –¥–∞–Ω–∏—Ö –ø—Ä–µ–≤—å—é
  def self.get_preview_base64(component_path, size = 256)
    SkpPreviewExtractor.get_preview_base64(component_path, size)
  end

  # –ú–µ—Ç–æ–¥ –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü—ñ—ó –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
  def self.coordinate_elements
    CoordinationManager.update_all_elements
  end

  # –¢–µ—Å—Ç–æ–≤–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–µ–≤—å—é –ø–æ—Ç–æ—á–Ω–æ—ó –º–æ–¥–µ–ª—ñ
  def self.test_model_preview
    Logger.info("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–µ–≤—å—é –ø–æ—Ç–æ—á–Ω–æ—ó –º–æ–¥–µ–ª—ñ", "Main")
    
    begin
      # –¢–µ—Å—Ç—É—î–º–æ —Ä—ñ–∑–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏ —Ç–∞ —è–∫–æ—Å—Ç—ñ
      test_cases = [
        { size: 256, quality: 'low' },
        { size: 512, quality: 'medium' },
        { size: 1024, quality: 'high' }
      ]
      
      test_cases.each do |params|
        Logger.info("üìê –¢–µ—Å—Ç—É—î–º–æ: —Ä–æ–∑–º—ñ—Ä=#{params[:size]}, —è–∫—ñ—Å—Ç—å=#{params[:quality]}", "Main")
        
        result = SkpPreviewExtractor.generate_current_model_preview(params[:size], params[:quality])
        
        if result
          Logger.success("‚úÖ –¢–µ—Å—Ç —É—Å–ø—ñ—à–Ω–∏–π –¥–ª—è #{params[:size]}x#{params[:size]} (#{params[:quality]})", "Main")
        else
          Logger.error("‚ùå –¢–µ—Å—Ç –Ω–µ–≤–¥–∞–ª–∏–π –¥–ª—è #{params[:size]}x#{params[:size]} (#{params[:quality]})", "Main")
        end
      end
      
    rescue => e
      Logger.error("–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–µ–≤—å—é: #{e.message}", "Main")
    end
  end

  # –ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–µ–≤—å—é
  def self.test_simple_preview
    Logger.info("üß™ –ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–µ–≤—å—é", "Main")
    
    begin
      result = SkpPreviewExtractor.generate_current_model_preview(256, 'low')
      
      if result
        Logger.success("‚úÖ –ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç —É—Å–ø—ñ—à–Ω–∏–π", "Main")
        Logger.info("üìè –î–æ–≤–∂–∏–Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É: #{result.length}", "Main")
      else
        Logger.error("‚ùå –ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç –Ω–µ–≤–¥–∞–ª–∏–π", "Main")
      end
      
    rescue => e
      Logger.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç—É: #{e.message}", "Main")
      Logger.error("Stack trace: #{e.backtrace.join("\n")}", "Main")
    end
  end


# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è
if defined?(Sketchup)
  # –°—Ç–≤–æ—Ä—é—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π —Ç—Ä–µ–∫–µ—Ä –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é
  $progran3_tracker = ProGran3Tracker.new
  
  # –ù–ï –∑–∞–ø—É—Å–∫–∞—î–º–æ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ - —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–º—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—ñ
  puts "üìä –¢—Ä–µ–∫–µ—Ä —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ (–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—ñ –ø–ª–∞–≥—ñ–Ω–∞)"
  
  # –ó—É–ø–∏–Ω—è—î–º–æ –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ SketchUp
  at_exit do
    begin
      $progran3_tracker.stop_tracking if $progran3_tracker
    rescue => e
      puts "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è: #{e.message}"
    end
  end
  
  # –ú–µ—Ç–æ–¥–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ç—Ä–µ–∫–µ—Ä–æ–º (–∑–∞–≤–∂–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ)
  def self.start_tracking
    $progran3_tracker&.start_tracking
  end
  
  def self.stop_tracking
    $progran3_tracker&.stop_tracking
  end
  
  def self.send_heartbeat
    $progran3_tracker&.send_heartbeat
  end
  
  # –¢–µ—Å—Ç–æ–≤–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –∑–∞–ø–∏—Ç—ñ–≤
  def self.test_heartbeat_variants
    if $progran3_tracker
      puts "üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä—ñ–∑–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ heartbeat..."
      
      # –¢–µ—Å—Ç 1: –ó–≤–∏—á–∞–π–Ω–∏–π heartbeat
      puts "\nüìã –¢–µ—Å—Ç 1: –ó–≤–∏—á–∞–π–Ω–∏–π heartbeat"
      $progran3_tracker.send_heartbeat
      
      # –¢–µ—Å—Ç 2: Heartbeat –∑ —ñ–Ω—à–∏–º action
      puts "\nüìã –¢–µ—Å—Ç 2: Heartbeat –∑ action='update'"
      $progran3_tracker.test_heartbeat_with_action("update")
      
      # –¢–µ—Å—Ç 3: Heartbeat –∑ action='upsert'
      puts "\nüìã –¢–µ—Å—Ç 3: Heartbeat –∑ action='upsert'"
      $progran3_tracker.test_heartbeat_with_action("upsert")
    else
      puts "‚ö†Ô∏è –¢—Ä–µ–∫–µ—Ä –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ"
    end
  end
  
  # –ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ
  def self.check_server_status
    if $progran3_tracker
      puts "üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ..."
      $progran3_tracker.check_server_status
    else
      puts "‚ö†Ô∏è –¢—Ä–µ–∫–µ—Ä –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ"
    end
  end
  
  # –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–≤–µ—Ä–∞
  def self.test_server_complete
    if $progran3_tracker
      puts "üß™ –ü–æ–≤–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–≤–µ—Ä–∞..."
      
      # 1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å
      puts "\nüìã –ö—Ä–æ–∫ 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É"
      $progran3_tracker.check_server_status
      
      # 2. –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ heartbeat
      puts "\nüìã –ö—Ä–æ–∫ 2: –í—ñ–¥–ø—Ä–∞–≤–∫–∞ heartbeat"
      $progran3_tracker.send_heartbeat
      
      # 3. –ó–Ω–æ–≤—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å
      puts "\nüìã –ö—Ä–æ–∫ 3: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –ø—ñ—Å–ª—è heartbeat"
      $progran3_tracker.check_server_status
      
      # 4. –¢–µ—Å—Ç—É—î–º–æ —Ä—ñ–∑–Ω—ñ action
      puts "\nüìã –ö—Ä–æ–∫ 4: –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä—ñ–∑–Ω–∏—Ö action"
      $progran3_tracker.test_heartbeat_with_action("update")
      $progran3_tracker.test_heartbeat_with_action("upsert")
      
    else
      puts "‚ö†Ô∏è –¢—Ä–µ–∫–µ—Ä –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ"
    end
  end
  
  # –ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, —á–∏ —Å–µ—Ä–≤–µ—Ä –º–∞—î –ª–æ–≥—ñ–∫—É –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
  def self.test_server_update_logic
    if $progran3_tracker
      puts "üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–µ—Ä–≤–µ—Ä–∞..."
      
      # 1. –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–µ—Ä—à–∏–π heartbeat
      puts "\nüìã –ö—Ä–æ–∫ 1: –ü–µ—Ä—à–∏–π heartbeat"
      $progran3_tracker.send_heartbeat
      
      # 2. –ß–µ–∫–∞—î–º–æ 2 —Å–µ–∫—É–Ω–¥–∏
      puts "\nüìã –ö—Ä–æ–∫ 2: –û—á—ñ–∫—É–≤–∞–Ω–Ω—è 2 —Å–µ–∫—É–Ω–¥–∏..."
      sleep(2)
      
      # 3. –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –¥—Ä—É–≥–∏–π heartbeat
      puts "\nüìã –ö—Ä–æ–∫ 3: –î—Ä—É–≥–∏–π heartbeat"
      $progran3_tracker.send_heartbeat
      
      # 4. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å
      puts "\nüìã –ö—Ä–æ–∫ 4: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É"
      $progran3_tracker.check_server_status
      
    else
      puts "‚ö†Ô∏è –¢—Ä–µ–∫–µ—Ä –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ"
    end
  end
  
  # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö API —Å–µ—Ä–≤–µ—Ä–∞
  def self.test_all_apis
    if $progran3_tracker
      puts "üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö API —Å–µ—Ä–≤–µ—Ä–∞..."
      
      base_url = $progran3_tracker.instance_variable_get(:@base_url)
      
      # –¢–µ—Å—Ç 1: API heartbeat
      puts "\nüìã –¢–µ—Å—Ç 1: /api/heartbeat"
      $progran3_tracker.send_heartbeat
      
      # –¢–µ—Å—Ç 2: API plugins
      puts "\nüìã –¢–µ—Å—Ç 2: /api/plugins"
      $progran3_tracker.check_server_status
      
      # –¢–µ—Å—Ç 3: API health (—è–∫—â–æ —î)
      puts "\nüìã –¢–µ—Å—Ç 3: /api/health"
      $progran3_tracker.test_api_endpoint("/api/health")
      
      # –¢–µ—Å—Ç 4: API status (—è–∫—â–æ —î)
      puts "\nüìã –¢–µ—Å—Ç 4: /api/status"
      $progran3_tracker.test_api_endpoint("/api/status")
      
      # –¢–µ—Å—Ç 5: Root API
      puts "\nüìã –¢–µ—Å—Ç 5: /"
      $progran3_tracker.test_api_endpoint("/")
      
    else
      puts "‚ö†Ô∏è –¢—Ä–µ–∫–µ—Ä –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ"
    end
  end
  
  # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞—Ç—Ä–∏–º–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
  def self.test_update_delays
    if $progran3_tracker
      puts "‚è±Ô∏è –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞—Ç—Ä–∏–º–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è..."
      
      # 1. –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ heartbeat
      puts "\nüìã –ö—Ä–æ–∫ 1: –í—ñ–¥–ø—Ä–∞–≤–∫–∞ heartbeat"
      $progran3_tracker.send_heartbeat
      
      # 2. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—ñ–¥—Ä–∞–∑—É
      puts "\nüìã –ö—Ä–æ–∫ 2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥—Ä–∞–∑—É"
      $progran3_tracker.check_server_status
      
      # 3. –ß–µ–∫–∞—î–º–æ 5 —Å–µ–∫—É–Ω–¥
      puts "\nüìã –ö—Ä–æ–∫ 3: –û—á—ñ–∫—É–≤–∞–Ω–Ω—è 5 —Å–µ–∫—É–Ω–¥..."
      sleep(5)
      
      # 4. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–Ω–æ–≤—É
      puts "\nüìã –ö—Ä–æ–∫ 4: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ—Å–ª—è 5 —Å–µ–∫—É–Ω–¥"
      $progran3_tracker.check_server_status
      
      # 5. –ß–µ–∫–∞—î–º–æ —â–µ 10 —Å–µ–∫—É–Ω–¥
      puts "\nüìã –ö—Ä–æ–∫ 5: –û—á—ñ–∫—É–≤–∞–Ω–Ω—è —â–µ 10 —Å–µ–∫—É–Ω–¥..."
      sleep(10)
      
      # 6. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–Ω–æ–≤—É
      puts "\nüìã –ö—Ä–æ–∫ 6: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ—Å–ª—è 15 —Å–µ–∫—É–Ω–¥"
      $progran3_tracker.check_server_status
      
    else
      puts "‚ö†Ô∏è –¢—Ä–µ–∫–µ—Ä –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ"
    end
  end
  
  def self.tracking_status
    if $progran3_tracker
      {
        running: $progran3_tracker.instance_variable_get(:@is_running),
        plugin_id: $progran3_tracker.instance_variable_get(:@plugin_id),
        base_url: $progran3_tracker.instance_variable_get(:@base_url),
        retry_count: $progran3_tracker.instance_variable_get(:@retry_count),
        max_retries: $progran3_tracker.instance_variable_get(:@max_retries),
        retry_delay: $progran3_tracker.instance_variable_get(:@retry_delay)
      }
    else
      { error: "–¢—Ä–µ–∫–µ—Ä –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π" }
    end
  end
  
  def self.create_new_tracker(server_url = nil)
    # –ó—É–ø–∏–Ω—è—î–º–æ —Å—Ç–∞—Ä–∏–π —Ç—Ä–µ–∫–µ—Ä
    $progran3_tracker&.stop_tracking
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —Ç—Ä–µ–∫–µ—Ä –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º URL
    $progran3_tracker = ProGran3Tracker.new(server_url)
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è
    $progran3_tracker.start_tracking
    
    puts "‚úÖ –ù–æ–≤–∏–π —Ç—Ä–µ–∫–µ—Ä —Å—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∞ –∑–∞–ø—É—â–µ–Ω–æ"
  end
end
end