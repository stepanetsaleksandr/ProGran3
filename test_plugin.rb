#!/usr/bin/env ruby
# test_plugin.rb
# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É Ruby —Ñ–∞–π–ª—ñ–≤ –ø–ª–∞–≥—ñ–Ω–∞

require 'fileutils'

puts "üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–ª–∞–≥—ñ–Ω–∞ ProGran3..."
puts "=" * 50

# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –≤—Å—ñ—Ö Ruby —Ñ–∞–π–ª—ñ–≤
def test_ruby_syntax
  puts "üìù –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É Ruby —Ñ–∞–π–ª—ñ–≤..."
  
  rb_files = Dir.glob("**/*.rb").sort
  errors = []
  
  rb_files.each do |file|
    begin
      # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –±–µ–∑ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
      File.open(file, 'r') do |f|
        content = f.read
        # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ñ–∞–π–ª–∏, —è–∫—ñ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å SketchUp API
        if content.include?('require') && (content.include?('sketchup') || content.include?('UI.menu'))
          puts "  ‚ö†Ô∏è  #{file} (–ø–æ—Ç—Ä–µ–±—É—î SketchUp API)"
        else
          # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç—ñ–ª—å–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
          RubyVM::InstructionSequence.compile(content, file)
          puts "  ‚úÖ #{file}"
        end
      end
    rescue SyntaxError => e
      puts "  ‚ùå #{file}: #{e.message}"
      errors << "#{file}: #{e.message}"
    rescue LoadError => e
      puts "  ‚ö†Ô∏è  #{file}: #{e.message}"
    rescue => e
      puts "  ‚ö†Ô∏è  #{file}: #{e.message}"
    end
  end
  
  if errors.empty?
    puts "üéâ –í—Å—ñ Ruby —Ñ–∞–π–ª–∏ –º–∞—é—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!"
  else
    puts "‚ùå –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–º–∏–ª–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É:"
    errors.each { |error| puts "  - #{error}" }
  end
  
  errors.empty?
end

# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª—ñ–≤
def test_file_structure
  puts "\nüìÅ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ñ–∞–π–ª—ñ–≤..."
  
  required_files = [
    "proGran3.rb",
    "proGran3/loader.rb",
    "proGran3/ui.rb",
    "proGran3/builders/foundation_builder.rb",
    "proGran3/builders/tiling_builder.rb",
    "proGran3/builders/cladding_builder.rb"
  ]
  
  missing_files = []
  
  required_files.each do |file|
    if File.exist?(file)
      puts "  ‚úÖ #{file}"
    else
      puts "  ‚ùå #{file} - –≤—ñ–¥—Å—É—Ç–Ω—ñ–π"
      missing_files << file
    end
  end
  
  if missing_files.empty?
    puts "üéâ –í—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ñ–∞–π–ª–∏ –ø—Ä–∏—Å—É—Ç–Ω—ñ!"
  else
    puts "‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ —Ñ–∞–π–ª–∏:"
    missing_files.each { |file| puts "  - #{file}" }
  end
  
  missing_files.empty?
end

# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ assets
def test_assets
  puts "\nüé® –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ assets..."
  
  asset_categories = ["flowerbeds", "gravestones", "pavement_tiles", "stands", "steles"]
  missing_categories = []
  
  asset_categories.each do |category|
    category_path = "proGran3/assets/#{category}"
    if Dir.exist?(category_path)
      files = Dir.glob("#{category_path}/*.{skp,png}")
      puts "  ‚úÖ #{category}: #{files.length} —Ñ–∞–π–ª—ñ–≤"
    else
      puts "  ‚ùå #{category}: –ø–∞–ø–∫–∞ –≤—ñ–¥—Å—É—Ç–Ω—è"
      missing_categories << category
    end
  end
  
  if missing_categories.empty?
    puts "üéâ –í—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó assets –ø—Ä–∏—Å—É—Ç–Ω—ñ!"
  else
    puts "‚ö†Ô∏è  –í—ñ–¥—Å—É—Ç–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:"
    missing_categories.each { |cat| puts "  - #{cat}" }
  end
  
  missing_categories.empty?
end

# –ì–æ–ª–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
begin
  syntax_ok = test_ruby_syntax
  structure_ok = test_file_structure
  assets_ok = test_assets
  
  puts "\n" + "=" * 50
  puts "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:"
  puts "  –°–∏–Ω—Ç–∞–∫—Å–∏—Å Ruby: #{syntax_ok ? '‚úÖ' : '‚ùå'}"
  puts "  –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª—ñ–≤: #{structure_ok ? '‚úÖ' : '‚ùå'}"
  puts "  Assets: #{assets_ok ? '‚úÖ' : '‚ö†Ô∏è'}"
  
  if syntax_ok && structure_ok
    puts "\nüéâ –ü–ª–∞–≥—ñ–Ω –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è!"
    puts "üí° –ó–∞–ø—É—Å—Ç—ñ—Ç—å: .\\deploy.bat –∞–±–æ .\\deploy_to_sketchup.ps1"
  else
    puts "\n‚ùå –í–∏–ø—Ä–∞–≤—Ç–µ –ø–æ–º–∏–ª–∫–∏ –ø–µ—Ä–µ–¥ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è–º"
  end
  
rescue => e
  puts "‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: #{e.message}"
  puts e.backtrace.first(5)
end
